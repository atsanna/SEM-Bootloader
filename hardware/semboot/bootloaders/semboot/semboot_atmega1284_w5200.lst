
semboot_atmega1284_w5200.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0001fa2e  00000ac2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a2e  0001f000  0001f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800120  00800120  00000ae2  2**0
                  ALLOC
  3 .stab         000008d0  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000199  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001550  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000151c  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000992  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1c  00000000  00000000  0000359e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  000042bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000560  00000000  00000000  000046d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001507  00000000  00000000  00004c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00006137  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
   1f000:	62 c0       	rjmp	.+196    	; 0x1f0c6 <__ctors_end>
   1f002:	00 00       	nop
   1f004:	ef c0       	rjmp	.+478    	; 0x1f1e4 <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	ed c0       	rjmp	.+474    	; 0x1f1e4 <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	eb c0       	rjmp	.+470    	; 0x1f1e4 <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	e9 c0       	rjmp	.+466    	; 0x1f1e4 <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	e7 c0       	rjmp	.+462    	; 0x1f1e4 <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	e5 c0       	rjmp	.+458    	; 0x1f1e4 <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	e3 c0       	rjmp	.+454    	; 0x1f1e4 <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	e1 c0       	rjmp	.+450    	; 0x1f1e4 <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	df c0       	rjmp	.+446    	; 0x1f1e4 <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	dd c0       	rjmp	.+442    	; 0x1f1e4 <__bad_interrupt>
   1f02a:	00 00       	nop
   1f02c:	db c0       	rjmp	.+438    	; 0x1f1e4 <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	d9 c0       	rjmp	.+434    	; 0x1f1e4 <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	d7 c0       	rjmp	.+430    	; 0x1f1e4 <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	d5 c0       	rjmp	.+426    	; 0x1f1e4 <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	d3 c0       	rjmp	.+422    	; 0x1f1e4 <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	d1 c0       	rjmp	.+418    	; 0x1f1e4 <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	cf c0       	rjmp	.+414    	; 0x1f1e4 <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	cd c0       	rjmp	.+410    	; 0x1f1e4 <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	cb c0       	rjmp	.+406    	; 0x1f1e4 <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	c9 c0       	rjmp	.+402    	; 0x1f1e4 <__bad_interrupt>
   1f052:	00 00       	nop
   1f054:	c7 c0       	rjmp	.+398    	; 0x1f1e4 <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	c5 c0       	rjmp	.+394    	; 0x1f1e4 <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	c3 c0       	rjmp	.+390    	; 0x1f1e4 <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	c1 c0       	rjmp	.+386    	; 0x1f1e4 <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	bf c0       	rjmp	.+382    	; 0x1f1e4 <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	bd c0       	rjmp	.+378    	; 0x1f1e4 <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	bb c0       	rjmp	.+374    	; 0x1f1e4 <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	b9 c0       	rjmp	.+370    	; 0x1f1e4 <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	b7 c0       	rjmp	.+366    	; 0x1f1e4 <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	b5 c0       	rjmp	.+362    	; 0x1f1e4 <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	b3 c0       	rjmp	.+358    	; 0x1f1e4 <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	b1 c0       	rjmp	.+354    	; 0x1f1e4 <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	af c0       	rjmp	.+350    	; 0x1f1e4 <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	ad c0       	rjmp	.+346    	; 0x1f1e4 <__bad_interrupt>
	...

0001f08c <tftp_invalid_image_packet>:
   1f08c:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
   1f09c:	67 65 20 66 69 6c 65 00                             ge file.

0001f0a4 <tftp_unknown_error_packet>:
   1f0a4:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0001f0af <tftp_full_error_packet>:
   1f0af:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

0001f0b9 <tftp_opcode_error_packet>:
   1f0b9:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

0001f0c6 <__ctors_end>:
   1f0c6:	11 24       	eor	r1, r1
   1f0c8:	1f be       	out	0x3f, r1	; 63
   1f0ca:	cf ef       	ldi	r28, 0xFF	; 255
   1f0cc:	d0 e4       	ldi	r29, 0x40	; 64
   1f0ce:	de bf       	out	0x3e, r29	; 62
   1f0d0:	cd bf       	out	0x3d, r28	; 61

0001f0d2 <__do_copy_data>:
   1f0d2:	11 e0       	ldi	r17, 0x01	; 1
   1f0d4:	a0 e0       	ldi	r26, 0x00	; 0
   1f0d6:	b1 e0       	ldi	r27, 0x01	; 1
   1f0d8:	ee e2       	ldi	r30, 0x2E	; 46
   1f0da:	fa ef       	ldi	r31, 0xFA	; 250
   1f0dc:	01 e0       	ldi	r16, 0x01	; 1
   1f0de:	0b bf       	out	0x3b, r16	; 59
   1f0e0:	02 c0       	rjmp	.+4      	; 0x1f0e6 <__do_copy_data+0x14>
   1f0e2:	07 90       	elpm	r0, Z+
   1f0e4:	0d 92       	st	X+, r0
   1f0e6:	a0 32       	cpi	r26, 0x20	; 32
   1f0e8:	b1 07       	cpc	r27, r17
   1f0ea:	d9 f7       	brne	.-10     	; 0x1f0e2 <__do_copy_data+0x10>
   1f0ec:	1b be       	out	0x3b, r1	; 59

0001f0ee <__do_clear_bss>:
   1f0ee:	11 e0       	ldi	r17, 0x01	; 1
   1f0f0:	a0 e2       	ldi	r26, 0x20	; 32
   1f0f2:	b1 e0       	ldi	r27, 0x01	; 1
   1f0f4:	01 c0       	rjmp	.+2      	; 0x1f0f8 <.do_clear_bss_start>

0001f0f6 <.do_clear_bss_loop>:
   1f0f6:	1d 92       	st	X+, r1

0001f0f8 <.do_clear_bss_start>:
   1f0f8:	ac 32       	cpi	r26, 0x2C	; 44
   1f0fa:	b1 07       	cpc	r27, r17
   1f0fc:	e1 f7       	brne	.-8      	; 0x1f0f6 <.do_clear_bss_loop>
   1f0fe:	01 d0       	rcall	.+2      	; 0x1f102 <main>
   1f100:	94 c4       	rjmp	.+2344   	; 0x1fa2a <_exit>

0001f102 <main>:
int main(void)
{
	/* Disable the watchdog timer to prevent
	 * eternal reset loop of doom and despair */
	//uint8_t ch = MCUSR;
	MCUSR = 0;
   1f102:	14 be       	out	0x34, r1	; 52
	wdt_disable();
   1f104:	88 e1       	ldi	r24, 0x18	; 24
   1f106:	0f b6       	in	r0, 0x3f	; 63
   1f108:	f8 94       	cli
   1f10a:	80 93 60 00 	sts	0x0060, r24
   1f10e:	10 92 60 00 	sts	0x0060, r1
   1f112:	0f be       	out	0x3f, r0	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   1f114:	8f ef       	ldi	r24, 0xFF	; 255
   1f116:	95 ea       	ldi	r25, 0xA5	; 165
   1f118:	ae e0       	ldi	r26, 0x0E	; 14
   1f11a:	81 50       	subi	r24, 0x01	; 1
   1f11c:	90 40       	sbci	r25, 0x00	; 0
   1f11e:	a0 40       	sbci	r26, 0x00	; 0
   1f120:	e1 f7       	brne	.-8      	; 0x1f11a <main+0x18>
   1f122:	00 c0       	rjmp	.+0      	; 0x1f124 <main+0x22>
   1f124:	00 00       	nop
	/* This code makes the following assumptions:
	 * No interrupts will execute
	 * SP points to RAMEND
	 * r1 contains zero */
	//cli();
	asm volatile("clr __zero_reg__");
   1f126:	11 24       	eor	r1, r1
	// 0x02 -> ClkIO/8 -> 500ns period, 32ms max
	// 0X03 -> ClkIO/64 -> 4us period, 256ms max
	// 0x04 -> ClkIO/256 -> 16us period, 1024ms max
	// 0x05 -> ClkIO/1024 -> 64us period, 4096ms max
	// Set up Timer 1 as timekeeper for LED flashing
	TCCR1B = _BV(CS12) | _BV(CS10); // Same thing as TCCR1B = 0x05;
   1f128:	85 e0       	ldi	r24, 0x05	; 5
   1f12a:	80 93 81 00 	sts	0x0081, r24

	/* Write version information in the EEPROM */
	if(eeprom_read_byte(EEPROM_MAJVER) != ARIADNE_MAJVER)
   1f12e:	80 e0       	ldi	r24, 0x00	; 0
   1f130:	90 e0       	ldi	r25, 0x00	; 0
   1f132:	65 d4       	rcall	.+2250   	; 0x1f9fe <__eerd_byte_m1284p>
   1f134:	88 23       	and	r24, r24
   1f136:	21 f0       	breq	.+8      	; 0x1f140 <main+0x3e>
   1f138:	80 e0       	ldi	r24, 0x00	; 0
		eeprom_write_byte(EEPROM_MAJVER, ARIADNE_MAJVER);
   1f13a:	90 e0       	ldi	r25, 0x00	; 0
   1f13c:	60 e0       	ldi	r22, 0x00	; 0
   1f13e:	67 d4       	rcall	.+2254   	; 0x1fa0e <__eewr_byte_m1284p>
   1f140:	81 e0       	ldi	r24, 0x01	; 1
   1f142:	90 e0       	ldi	r25, 0x00	; 0
	if(eeprom_read_byte(EEPROM_MINVER) != ARIADNE_MINVER)
   1f144:	5c d4       	rcall	.+2232   	; 0x1f9fe <__eerd_byte_m1284p>
   1f146:	84 30       	cpi	r24, 0x04	; 4
   1f148:	21 f0       	breq	.+8      	; 0x1f152 <main+0x50>
   1f14a:	81 e0       	ldi	r24, 0x01	; 1
   1f14c:	90 e0       	ldi	r25, 0x00	; 0
   1f14e:	64 e0       	ldi	r22, 0x04	; 4
		eeprom_write_byte(EEPROM_MINVER, ARIADNE_MINVER);
   1f150:	5e d4       	rcall	.+2236   	; 0x1fa0e <__eewr_byte_m1284p>
   1f152:	8e e3       	ldi	r24, 0x3E	; 62
   1f154:	90 e0       	ldi	r25, 0x00	; 0
   1f156:	53 d4       	rcall	.+2214   	; 0x1f9fe <__eerd_byte_m1284p>
   1f158:	81 30       	cpi	r24, 0x01	; 1
    //    _delay_ms(300);
    //    PORTD &= ~(1UL<<4);
    //}

    
 	if( (eeprom_read_byte(EEPROM_UPDATE_FLAG) == 1) || !((PIND & (1UL<<5)) == (1UL<<5)) || eeprom_read_byte(EEPROM_IMG_STAT) != EEPROM_IMG_OK_VALUE) { //If the update flag was set or button default is being pressed, no timeout will occur
   1f15a:	41 f0       	breq	.+16     	; 0x1f16c <main+0x6a>
   1f15c:	89 b1       	in	r24, 0x09	; 9
   1f15e:	85 ff       	sbrs	r24, 5
   1f160:	05 c0       	rjmp	.+10     	; 0x1f16c <main+0x6a>
   1f162:	82 e0       	ldi	r24, 0x02	; 2
   1f164:	90 e0       	ldi	r25, 0x00	; 0
   1f166:	4b d4       	rcall	.+2198   	; 0x1f9fe <__eerd_byte_m1284p>
   1f168:	8e 3e       	cpi	r24, 0xEE	; 238
   1f16a:	31 f0       	breq	.+12     	; 0x1f178 <main+0x76>
   1f16c:	8e e3       	ldi	r24, 0x3E	; 62
   1f16e:	90 e0       	ldi	r25, 0x00	; 0
   1f170:	60 e0       	ldi	r22, 0x00	; 0
   1f172:	4d d4       	rcall	.+2202   	; 0x1fa0e <__eewr_byte_m1284p>
   1f174:	c1 e0       	ldi	r28, 0x01	; 1
   1f176:	02 c0       	rjmp	.+4      	; 0x1f17c <main+0x7a>
 		updateFlag = 1;
 		eeprom_write_byte(EEPROM_UPDATE_FLAG, 0);//Reset update flag so that next reboot normal boot continues
   1f178:	35 d4       	rcall	.+2154   	; 0x1f9e4 <appStart>
   1f17a:	c0 e0       	ldi	r28, 0x00	; 0
   1f17c:	c2 d3       	rcall	.+1924   	; 0x1f902 <serialInit>
   1f17e:	9d d0       	rcall	.+314    	; 0x1f2ba <spiInit>
   1f180:	a5 d0       	rcall	.+330    	; 0x1f2cc <netInit>
    //    PORTD &= ~(1UL<<4);
    //}

    
 	if( (eeprom_read_byte(EEPROM_UPDATE_FLAG) == 1) || !((PIND & (1UL<<5)) == (1UL<<5)) || eeprom_read_byte(EEPROM_IMG_STAT) != EEPROM_IMG_OK_VALUE) { //If the update flag was set or button default is being pressed, no timeout will occur
 		updateFlag = 1;
   1f182:	b0 d2       	rcall	.+1376   	; 0x1f6e4 <tftpInit>
 		eeprom_write_byte(EEPROM_UPDATE_FLAG, 0);//Reset update flag so that next reboot normal boot continues
   1f184:	10 92 2a 01 	sts	0x012A, r1
 	}
 	//else if(eeprom_read_byte(EEPROM_UPDATE_FLAG) == 2 || !(ch & _BV(EXTRF))) { //Updating disabled || if not external (hard reset) skip bootloader
    else {
		appStart();
   1f188:	10 92 2b 01 	sts	0x012B, r1
 	}

	//Initialize UART communication
	serialInit();
   1f18c:	d3 e0       	ldi	r29, 0x03	; 3
   1f18e:	cc 24       	eor	r12, r12
		buttonInit();
	)

	/** Initalize SPI communication */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_SPI);)
	spiInit();
   1f190:	dd 24       	eor	r13, r13
   1f192:	76 01       	movw	r14, r12
	/** Initialize networking */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_NET);)
	netInit();
   1f194:	80 91 2a 01 	lds	r24, 0x012A

	// Initialize the UDP socket for tftp
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_TFTP);)
	tftpInit();
   1f198:	88 23       	and	r24, r24
   1f19a:	19 f4       	brne	.+6      	; 0x1f1a2 <main+0xa0>
#if defined(ANNOUNCE)
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_ANN);)
	announceInit();
#endif

	serialFlashing = FALSE;
   1f19c:	c6 d2       	rcall	.+1420   	; 0x1f72a <tftpPoll>
   1f19e:	88 23       	and	r24, r24
	tftpFlashing = FALSE;
   1f1a0:	d1 f0       	breq	.+52     	; 0x1f1d6 <main+0xd4>
   1f1a2:	09 d4       	rcall	.+2066   	; 0x1f9b6 <timedOut>
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
				// Delete first page of flash memory
				boot_page_erase(0);
   1f1a4:	88 23       	and	r24, r24
   1f1a6:	a9 f0       	breq	.+42     	; 0x1f1d2 <main+0xd0>
   1f1a8:	c1 30       	cpi	r28, 0x01	; 1
   1f1aa:	99 f0       	breq	.+38     	; 0x1f1d2 <main+0xd0>
	serialFlashing = FALSE;
	tftpFlashing = FALSE;

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
   1f1ac:	82 e0       	ldi	r24, 0x02	; 2
   1f1ae:	90 e0       	ldi	r25, 0x00	; 0
   1f1b0:	26 d4       	rcall	.+2124   	; 0x1f9fe <__eerd_byte_m1284p>
   1f1b2:	8e 3e       	cpi	r24, 0xEE	; 238
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
   1f1b4:	81 f0       	breq	.+32     	; 0x1f1d6 <main+0xd4>
   1f1b6:	80 91 2b 01 	lds	r24, 0x012B
   1f1ba:	81 30       	cpi	r24, 0x01	; 1
		/* As explained above this goes out */
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if((timedOut()) && !(updateFlag == 1)) {
   1f1bc:	51 f4       	brne	.+20     	; 0x1f1d2 <main+0xd0>
   1f1be:	f6 01       	movw	r30, r12
   1f1c0:	e0 92 5b 00 	sts	0x005B, r14
   1f1c4:	d0 93 57 00 	sts	0x0057, r29
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;
   1f1c8:	e8 95       	spm
   1f1ca:	8c d2       	rcall	.+1304   	; 0x1f6e4 <tftpInit>
   1f1cc:	eb d3       	rcall	.+2006   	; 0x1f9a4 <resetTick>
   1f1ce:	10 92 2b 01 	sts	0x012B, r1
   1f1d2:	c7 d3       	rcall	.+1934   	; 0x1f962 <updateLed>

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
   1f1d4:	df cf       	rjmp	.-66     	; 0x1f194 <main+0x92>
   1f1d6:	88 e1       	ldi	r24, 0x18	; 24
   1f1d8:	80 93 60 00 	sts	0x0060, r24
				// Delete first page of flash memory
				boot_page_erase(0);
   1f1dc:	8c e0       	ldi	r24, 0x0C	; 12
   1f1de:	80 93 60 00 	sts	0x0060, r24
   1f1e2:	ff cf       	rjmp	.-2      	; 0x1f1e2 <main+0xe0>

0001f1e4 <__bad_interrupt>:
   1f1e4:	0d cf       	rjmp	.-486    	; 0x1f000 <__vectors>

0001f1e6 <spiWriteReg>:
		tracenum(address);
		tracePGM(mDebugSpi_COMMA);
		tracenum(value);
	)

	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
   1f1e6:	20 e5       	ldi	r18, 0x50	; 80
   1f1e8:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   1f1ea:	2c 98       	cbi	0x05, 4	; 5

#if (W5200 > 0)
	
	SPDR = address >> 8;
   1f1ec:	29 2f       	mov	r18, r25
   1f1ee:	33 27       	eor	r19, r19
   1f1f0:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1f2:	0d b4       	in	r0, 0x2d	; 45
   1f1f4:	07 fe       	sbrs	r0, 7
   1f1f6:	fd cf       	rjmp	.-6      	; 0x1f1f2 <spiWriteReg+0xc>

	SPDR = address & 0xff;
   1f1f8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1fa:	0d b4       	in	r0, 0x2d	; 45
   1f1fc:	07 fe       	sbrs	r0, 7
   1f1fe:	fd cf       	rjmp	.-6      	; 0x1f1fa <spiWriteReg+0x14>
	
	SPDR = 0x80;
   1f200:	80 e8       	ldi	r24, 0x80	; 128
   1f202:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   1f204:	0d b4       	in	r0, 0x2d	; 45
   1f206:	07 fe       	sbrs	r0, 7
   1f208:	fd cf       	rjmp	.-6      	; 0x1f204 <spiWriteReg+0x1e>
	
	SPDR = 0x01;
   1f20a:	81 e0       	ldi	r24, 0x01	; 1
   1f20c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   1f20e:	0d b4       	in	r0, 0x2d	; 45
   1f210:	07 fe       	sbrs	r0, 7
   1f212:	fd cf       	rjmp	.-6      	; 0x1f20e <spiWriteReg+0x28>
	SPDR = address & 0xff;
	while(!(SPSR & _BV(SPIF)));

#endif

	SPDR = value;
   1f214:	4e bd       	out	0x2e, r20	; 46
	while(!(SPSR & _BV(SPIF)));
   1f216:	0d b4       	in	r0, 0x2d	; 45
   1f218:	07 fe       	sbrs	r0, 7
   1f21a:	fd cf       	rjmp	.-6      	; 0x1f216 <spiWriteReg+0x30>

	SS_HIGH();
   1f21c:	2c 9a       	sbi	0x05, 4	; 5
	cb = 0; //prevents compiler whining about unused cb variable
	SPCR = cb; // Turn off SPI	
   1f21e:	1c bc       	out	0x2c, r1	; 44
	
}
   1f220:	08 95       	ret

0001f222 <spiWriteWord>:

void spiWriteWord(uint16_t address, uint8_t cb, uint16_t value)
{
   1f222:	ef 92       	push	r14
   1f224:	ff 92       	push	r15
   1f226:	1f 93       	push	r17
   1f228:	cf 93       	push	r28
   1f22a:	df 93       	push	r29
   1f22c:	ec 01       	movw	r28, r24
   1f22e:	16 2f       	mov	r17, r22
   1f230:	7a 01       	movw	r14, r20
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, cb, value >> 8);
   1f232:	45 2f       	mov	r20, r21
   1f234:	55 27       	eor	r21, r21
   1f236:	d7 df       	rcall	.-82     	; 0x1f1e6 <spiWriteReg>
   1f238:	ce 01       	movw	r24, r28
	spiWriteReg(address, cb, value & 0xff);
   1f23a:	01 96       	adiw	r24, 0x01	; 1
   1f23c:	61 2f       	mov	r22, r17
   1f23e:	4e 2d       	mov	r20, r14
   1f240:	d2 df       	rcall	.-92     	; 0x1f1e6 <spiWriteReg>
   1f242:	df 91       	pop	r29
   1f244:	cf 91       	pop	r28
}
   1f246:	1f 91       	pop	r17
   1f248:	ff 90       	pop	r15
   1f24a:	ef 90       	pop	r14
   1f24c:	08 95       	ret

0001f24e <spiReadReg>:
   1f24e:	20 e5       	ldi	r18, 0x50	; 80
   1f250:	2c bd       	out	0x2c, r18	; 44
	)
	#endif

	uint8_t returnValue;

	SPCR = _BV(SPE) | _BV(MSTR);
   1f252:	2c 98       	cbi	0x05, 4	; 5
   1f254:	29 2f       	mov	r18, r25
	SS_LOW();
   1f256:	33 27       	eor	r19, r19

#if (W5200 > 0)

	SPDR = address >> 8;
   1f258:	2e bd       	out	0x2e, r18	; 46
   1f25a:	0d b4       	in	r0, 0x2d	; 45
   1f25c:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
   1f25e:	fd cf       	rjmp	.-6      	; 0x1f25a <spiReadReg+0xc>
   1f260:	8e bd       	out	0x2e, r24	; 46
   1f262:	0d b4       	in	r0, 0x2d	; 45

	SPDR = address & 0xff;
   1f264:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
   1f266:	fd cf       	rjmp	.-6      	; 0x1f262 <spiReadReg+0x14>
   1f268:	1e bc       	out	0x2e, r1	; 46
   1f26a:	0d b4       	in	r0, 0x2d	; 45
	
	SPDR = 0x00;
   1f26c:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
   1f26e:	fd cf       	rjmp	.-6      	; 0x1f26a <spiReadReg+0x1c>
   1f270:	81 e0       	ldi	r24, 0x01	; 1
   1f272:	8e bd       	out	0x2e, r24	; 46
	
	SPDR = 0x01;
   1f274:	0d b4       	in	r0, 0x2d	; 45
   1f276:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
   1f278:	fd cf       	rjmp	.-6      	; 0x1f274 <spiReadReg+0x26>
   1f27a:	1e bc       	out	0x2e, r1	; 46
   1f27c:	0d b4       	in	r0, 0x2d	; 45
	SPDR = address & 0xff;
	while(!(SPSR & _BV(SPIF)));

#endif

	SPDR = 0;
   1f27e:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
   1f280:	fd cf       	rjmp	.-6      	; 0x1f27c <spiReadReg+0x2e>
   1f282:	2c 9a       	sbi	0x05, 4	; 5
   1f284:	8e b5       	in	r24, 0x2e	; 46

	SS_HIGH();
   1f286:	1c bc       	out	0x2c, r1	; 44
	returnValue = SPDR;
   1f288:	08 95       	ret

0001f28a <spiReadWord>:
	
	cb = 0; //prevents compiler whining about unused cb variable
	SPCR = cb; // Turn off SPI
   1f28a:	0f 93       	push	r16

	return(returnValue);
}
   1f28c:	1f 93       	push	r17

uint16_t spiReadWord(uint16_t address, uint8_t cb)
{
   1f28e:	cf 93       	push	r28
   1f290:	df 93       	push	r29
   1f292:	ec 01       	movw	r28, r24
   1f294:	16 2f       	mov	r17, r22
   1f296:	db df       	rcall	.-74     	; 0x1f24e <spiReadReg>
   1f298:	08 2f       	mov	r16, r24
	// Read uint16_t from Ethernet controller
	return((spiReadReg(address, cb) << 8) | spiReadReg(address + 1, cb));
   1f29a:	ce 01       	movw	r24, r28
   1f29c:	01 96       	adiw	r24, 0x01	; 1
   1f29e:	61 2f       	mov	r22, r17
   1f2a0:	d6 df       	rcall	.-84     	; 0x1f24e <spiReadReg>
   1f2a2:	20 2f       	mov	r18, r16
   1f2a4:	30 e0       	ldi	r19, 0x00	; 0
   1f2a6:	32 2f       	mov	r19, r18
   1f2a8:	22 27       	eor	r18, r18
   1f2aa:	90 e0       	ldi	r25, 0x00	; 0
   1f2ac:	82 2b       	or	r24, r18
   1f2ae:	93 2b       	or	r25, r19
   1f2b0:	df 91       	pop	r29
   1f2b2:	cf 91       	pop	r28
}
   1f2b4:	1f 91       	pop	r17
   1f2b6:	0f 91       	pop	r16
   1f2b8:	08 95       	ret

0001f2ba <spiInit>:
   1f2ba:	80 ef       	ldi	r24, 0xF0	; 240
   1f2bc:	85 b9       	out	0x05, r24	; 5
   1f2be:	80 eb       	ldi	r24, 0xB0	; 176
   1f2c0:	84 b9       	out	0x04, r24	; 4
	 * At this stage all pins are set to HIGH. This in fact DISABLES SPI for both Ethernet and SD.
	 * SS pin for ethernet is pulled low just in time for reading or writing data inside those
	 * functions. */

	/** Set SPI pins high */
	SPI_PORT = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
   1f2c2:	47 9a       	sbi	0x08, 7	; 8
   1f2c4:	3f 9a       	sbi	0x07, 7	; 7
	/** Set SPI pins as output */
	SPI_DDR = _BV(SCK) | _BV(MOSI) | _BV(SS);
   1f2c6:	81 e0       	ldi	r24, 0x01	; 1
   1f2c8:	8d bd       	out	0x2d, r24	; 45
	ETH_DDR |= _BV(ETH_SS);
	#endif

	/** Disable SD card */
	/** Set SD SS pin high */
	SD_PORT |= _BV(SD_SS);
   1f2ca:	08 95       	ret

0001f2cc <netInit>:
	0             // Reserved in w5200
};


void netInit(void)
{
   1f2cc:	0f 93       	push	r16
   1f2ce:	1f 93       	push	r17
   1f2d0:	cf 93       	push	r28
   1f2d2:	df 93       	push	r29
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
   1f2d4:	83 e0       	ldi	r24, 0x03	; 3
   1f2d6:	90 e0       	ldi	r25, 0x00	; 0
   1f2d8:	92 d3       	rcall	.+1828   	; 0x1f9fe <__eerd_byte_m1284p>
   1f2da:	85 35       	cpi	r24, 0x55	; 85
   1f2dc:	91 f4       	brne	.+36     	; 0x1f302 <netInit+0x36>
   1f2de:	84 e0       	ldi	r24, 0x04	; 4
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
   1f2e0:	90 e0       	ldi	r25, 0x00	; 0
   1f2e2:	8d d3       	rcall	.+1818   	; 0x1f9fe <__eerd_byte_m1284p>
   1f2e4:	8a 3a       	cpi	r24, 0xAA	; 170
   1f2e6:	69 f4       	brne	.+26     	; 0x1f302 <netInit+0x36>
   1f2e8:	01 e0       	ldi	r16, 0x01	; 1
   1f2ea:	11 e0       	ldi	r17, 0x01	; 1
   1f2ec:	c5 e0       	ldi	r28, 0x05	; 5
   1f2ee:	d0 e0       	ldi	r29, 0x00	; 0
   1f2f0:	ce 01       	movw	r24, r28
   1f2f2:	85 d3       	rcall	.+1802   	; 0x1f9fe <__eerd_byte_m1284p>

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
   1f2f4:	f8 01       	movw	r30, r16
   1f2f6:	81 93       	st	Z+, r24
   1f2f8:	8f 01       	movw	r16, r30
   1f2fa:	21 96       	adiw	r28, 0x01	; 1
   1f2fc:	c7 31       	cpi	r28, 0x17	; 23
   1f2fe:	d1 05       	cpc	r29, r1
   1f300:	b9 f7       	brne	.-18     	; 0x1f2f0 <netInit+0x24>
	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
   1f302:	00 e0       	ldi	r16, 0x00	; 0
   1f304:	11 e0       	ldi	r17, 0x01	; 1
   1f306:	c0 e0       	ldi	r28, 0x00	; 0
   1f308:	d0 e0       	ldi	r29, 0x00	; 0
   1f30a:	f8 01       	movw	r30, r16
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
   1f30c:	41 91       	ld	r20, Z+
   1f30e:	8f 01       	movw	r16, r30
//	for(i = 0; i < REGISTER_BLOCK_SIZE-2; i++)
//		spiWriteReg(i, registerBuffer[i]);

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE-2; i++)
		spiWriteReg(i, 0, registerBuffer[i]);
   1f310:	ce 01       	movw	r24, r28
   1f312:	60 e0       	ldi	r22, 0x00	; 0
   1f314:	68 df       	rcall	.-304    	; 0x1f1e6 <spiWriteReg>
   1f316:	21 96       	adiw	r28, 0x01	; 1
   1f318:	ca 31       	cpi	r28, 0x1A	; 26
   1f31a:	d1 05       	cpc	r29, r1
   1f31c:	b1 f7       	brne	.-20     	; 0x1f30a <netInit+0x3e>
   1f31e:	cf e1       	ldi	r28, 0x1F	; 31
	/** Configure Wiznet chip. Network settings */
//	for(i = 0; i < REGISTER_BLOCK_SIZE-2; i++)
//		spiWriteReg(i, registerBuffer[i]);

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE-2; i++)
   1f320:	d0 e4       	ldi	r29, 0x40	; 64
   1f322:	ce 01       	movw	r24, r28
   1f324:	60 e0       	ldi	r22, 0x00	; 0
   1f326:	42 e0       	ldi	r20, 0x02	; 2
   1f328:	5e df       	rcall	.-324    	; 0x1f1e6 <spiWriteReg>
		spiWriteReg(i, 0, registerBuffer[i]);

        for (i=0; i<8; i++) {
        	spiWriteReg((0x4000 + i * 0x100 + 0x001F), 0, 0x02);
   1f32a:	ce 01       	movw	r24, r28
   1f32c:	01 97       	sbiw	r24, 0x01	; 1
   1f32e:	60 e0       	ldi	r22, 0x00	; 0
   1f330:	42 e0       	ldi	r20, 0x02	; 2
   1f332:	59 df       	rcall	.-334    	; 0x1f1e6 <spiWriteReg>
                spiWriteReg((0x4000 + i * 0x100 + 0x001E), 0, 0x02);
   1f334:	c0 50       	subi	r28, 0x00	; 0
   1f336:	df 4f       	sbci	r29, 0xFF	; 255
   1f338:	f8 e4       	ldi	r31, 0x48	; 72
   1f33a:	cf 31       	cpi	r28, 0x1F	; 31
   1f33c:	df 07       	cpc	r29, r31
   1f33e:	89 f7       	brne	.-30     	; 0x1f322 <netInit+0x56>
   1f340:	df 91       	pop	r29
   1f342:	cf 91       	pop	r28

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE-2; i++)
		spiWriteReg(i, 0, registerBuffer[i]);

        for (i=0; i<8; i++) {
   1f344:	1f 91       	pop	r17
   1f346:	0f 91       	pop	r16
   1f348:	08 95       	ret

0001f34a <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
   1f34a:	cf 93       	push	r28
   1f34c:	df 93       	push	r29
   1f34e:	ec 01       	movw	r28, r24
		tracePGMlnTftp(mDebugTftp_SOCK);
		tracenum(port);
	)


	spiWriteReg(REG_S3_CR, S3_W_CB, CR_CLOSE);
   1f350:	81 e0       	ldi	r24, 0x01	; 1
   1f352:	93 e4       	ldi	r25, 0x43	; 67
   1f354:	6c e6       	ldi	r22, 0x6C	; 108
   1f356:	40 e1       	ldi	r20, 0x10	; 16
   1f358:	46 df       	rcall	.-372    	; 0x1f1e6 <spiWriteReg>
   1f35a:	81 e0       	ldi	r24, 0x01	; 1
        while(spiReadReg(REG_S3_CR, S3_R_CB)) {
   1f35c:	93 e4       	ldi	r25, 0x43	; 67
   1f35e:	68 e6       	ldi	r22, 0x68	; 104
   1f360:	76 df       	rcall	.-276    	; 0x1f24e <spiReadReg>
   1f362:	88 23       	and	r24, r24
   1f364:	d1 f7       	brne	.-12     	; 0x1f35a <sockInit+0x10>
   1f366:	82 e0       	ldi	r24, 0x02	; 2
   1f368:	93 e4       	ldi	r25, 0x43	; 67
        	//wait for command to complete	
        }  
        
	do {
                // Write interrupt
		spiWriteReg(REG_S3_IR, S3_W_CB, 0xFF);
   1f36a:	6c e6       	ldi	r22, 0x6C	; 108
   1f36c:	4f ef       	ldi	r20, 0xFF	; 255
   1f36e:	3b df       	rcall	.-394    	; 0x1f1e6 <spiWriteReg>
   1f370:	80 e0       	ldi	r24, 0x00	; 0
   1f372:	93 e4       	ldi	r25, 0x43	; 67
   1f374:	6c e6       	ldi	r22, 0x6C	; 108
                // Write mode
                spiWriteReg(REG_S3_MR, S3_W_CB, MR_UDP);
   1f376:	42 e0       	ldi	r20, 0x02	; 2
   1f378:	36 df       	rcall	.-404    	; 0x1f1e6 <spiWriteReg>
   1f37a:	84 e0       	ldi	r24, 0x04	; 4
   1f37c:	93 e4       	ldi	r25, 0x43	; 67
   1f37e:	6c e6       	ldi	r22, 0x6C	; 108
   1f380:	ae 01       	movw	r20, r28
                // Write TFTP Port
		spiWriteWord(REG_S3_PORT0, S3_W_CB, port);
   1f382:	4f df       	rcall	.-354    	; 0x1f222 <spiWriteWord>
   1f384:	81 e0       	ldi	r24, 0x01	; 1
   1f386:	93 e4       	ldi	r25, 0x43	; 67
   1f388:	6c e6       	ldi	r22, 0x6C	; 108
   1f38a:	41 e0       	ldi	r20, 0x01	; 1
   1f38c:	2c df       	rcall	.-424    	; 0x1f1e6 <spiWriteReg>
		// Open Socket
        	spiWriteReg(REG_S3_CR, S3_W_CB, CR_OPEN);
   1f38e:	81 e0       	ldi	r24, 0x01	; 1
   1f390:	93 e4       	ldi	r25, 0x43	; 67
   1f392:	68 e6       	ldi	r22, 0x68	; 104
   1f394:	5c df       	rcall	.-328    	; 0x1f24e <spiReadReg>
   1f396:	88 23       	and	r24, r24
   1f398:	d1 f7       	brne	.-12     	; 0x1f38e <sockInit+0x44>
        	while(spiReadReg(REG_S3_CR, S3_R_CB)) {
   1f39a:	83 e0       	ldi	r24, 0x03	; 3
   1f39c:	93 e4       	ldi	r25, 0x43	; 67
   1f39e:	68 e6       	ldi	r22, 0x68	; 104
   1f3a0:	56 df       	rcall	.-340    	; 0x1f24e <spiReadReg>
   1f3a2:	82 32       	cpi	r24, 0x22	; 34
   1f3a4:	29 f0       	breq	.+10     	; 0x1f3b0 <sockInit+0x66>
   1f3a6:	81 e0       	ldi	r24, 0x01	; 1
        		//wait for command to complete	
 		} 
		// Read Status
		if(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP)
   1f3a8:	93 e4       	ldi	r25, 0x43	; 67
   1f3aa:	6c e6       	ldi	r22, 0x6C	; 108
   1f3ac:	40 e1       	ldi	r20, 0x10	; 16
   1f3ae:	1b df       	rcall	.-458    	; 0x1f1e6 <spiWriteReg>
   1f3b0:	83 e0       	ldi	r24, 0x03	; 3
   1f3b2:	93 e4       	ldi	r25, 0x43	; 67
   1f3b4:	68 e6       	ldi	r22, 0x68	; 104
			// Close Socket if it wasn't initialized correctly
			spiWriteReg(REG_S3_CR, S3_W_CB, CR_CLOSE);
   1f3b6:	4b df       	rcall	.-362    	; 0x1f24e <spiReadReg>
   1f3b8:	82 32       	cpi	r24, 0x22	; 34
   1f3ba:	a9 f6       	brne	.-86     	; 0x1f366 <sockInit+0x1c>
   1f3bc:	df 91       	pop	r29
   1f3be:	cf 91       	pop	r28
   1f3c0:	08 95       	ret

0001f3c2 <processPacket>:


		// If socket correctly opened continue
	} while(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP);
   1f3c2:	2f 92       	push	r2
   1f3c4:	3f 92       	push	r3
   1f3c6:	4f 92       	push	r4
   1f3c8:	5f 92       	push	r5
   1f3ca:	6f 92       	push	r6
   1f3cc:	7f 92       	push	r7
   1f3ce:	8f 92       	push	r8
}
   1f3d0:	9f 92       	push	r9
   1f3d2:	af 92       	push	r10
   1f3d4:	bf 92       	push	r11
#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
#endif
{
   1f3d6:	cf 92       	push	r12
   1f3d8:	df 92       	push	r13
   1f3da:	ef 92       	push	r14
   1f3dc:	ff 92       	push	r15
   1f3de:	0f 93       	push	r16
   1f3e0:	1f 93       	push	r17
   1f3e2:	cf 93       	push	r28
   1f3e4:	df 93       	push	r29
   1f3e6:	cd b7       	in	r28, 0x3d	; 61
   1f3e8:	de b7       	in	r29, 0x3e	; 62
   1f3ea:	cc 50       	subi	r28, 0x0C	; 12
   1f3ec:	d2 40       	sbci	r29, 0x02	; 2
   1f3ee:	de bf       	out	0x3e, r29	; 62
   1f3f0:	cd bf       	out	0x3d, r28	; 61
   1f3f2:	88 e2       	ldi	r24, 0x28	; 40
   1f3f4:	93 e4       	ldi	r25, 0x43	; 67
   1f3f6:	68 e6       	ldi	r22, 0x68	; 104
   1f3f8:	48 df       	rcall	.-368    	; 0x1f28a <spiReadWord>
   1f3fa:	ac 01       	movw	r20, r24
   1f3fc:	00 97       	sbiw	r24, 0x00	; 0
   1f3fe:	11 f4       	brne	.+4      	; 0x1f404 <processPacket+0x42>
   1f400:	40 e0       	ldi	r20, 0x00	; 0
   1f402:	58 ed       	ldi	r21, 0xD8	; 216
   1f404:	fd e0       	ldi	r31, 0x0D	; 13

		DBG_BTN(button();)
	)

	// Read data from chip to buffer
	readPointer = spiReadWord(REG_S3_RX_RD0, S3_R_CB);
   1f406:	cf 2e       	mov	r12, r31
   1f408:	f2 e0       	ldi	r31, 0x02	; 2
   1f40a:	df 2e       	mov	r13, r31
   1f40c:	cc 0e       	add	r12, r28
   1f40e:	dd 1e       	adc	r13, r29
   1f410:	7e 01       	movw	r14, r28

	if(readPointer == 0) readPointer = 0x0000;

#else

	if(readPointer == 0) readPointer += S3_RX_START;
   1f412:	08 94       	sec
   1f414:	e1 1c       	adc	r14, r1
   1f416:	f1 1c       	adc	r15, r1
   1f418:	10 c0       	rjmp	.+32     	; 0x1f43a <processPacket+0x78>


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
   1f41a:	8a 01       	movw	r16, r20
   1f41c:	0f 5f       	subi	r16, 0xFF	; 255
   1f41e:	1f 4f       	sbci	r17, 0xFF	; 255
   1f420:	ca 01       	movw	r24, r20
   1f422:	60 e0       	ldi	r22, 0x00	; 0
   1f424:	14 df       	rcall	.-472    	; 0x1f24e <spiReadReg>
   1f426:	d7 01       	movw	r26, r14
   1f428:	8d 93       	st	X+, r24
   1f42a:	7d 01       	movw	r14, r26
   1f42c:	b0 ee       	ldi	r27, 0xE0	; 224
   1f42e:	00 30       	cpi	r16, 0x00	; 0
		*bufPtr++ = spiReadReg(readPointer++, S3_RXBUF_CB);

		if(readPointer == 0xFFFF) readPointer = 0x0000; //changed 0c0800 to 0xFFFF, fixes a 4th packet retransmit bug. upload speed changed from 500sec to 90sec for 100kb program
#else

		*bufPtr++ = spiReadReg(readPointer++, 0);
   1f430:	1b 07       	cpc	r17, r27
   1f432:	11 f4       	brne	.+4      	; 0x1f438 <processPacket+0x76>
   1f434:	00 e0       	ldi	r16, 0x00	; 0
   1f436:	18 ed       	ldi	r17, 0xD8	; 216
   1f438:	a8 01       	movw	r20, r16
   1f43a:	ec 14       	cp	r14, r12
   1f43c:	fd 04       	cpc	r15, r13
   1f43e:	69 f7       	brne	.-38     	; 0x1f41a <processPacket+0x58>
   1f440:	88 e2       	ldi	r24, 0x28	; 40
   1f442:	93 e4       	ldi	r25, 0x43	; 67

		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
   1f444:	6c e6       	ldi	r22, 0x6C	; 108
   1f446:	ed de       	rcall	.-550    	; 0x1f222 <spiWriteWord>
   1f448:	81 e0       	ldi	r24, 0x01	; 1
   1f44a:	93 e4       	ldi	r25, 0x43	; 67
   1f44c:	6c e6       	ldi	r22, 0x6C	; 108
   1f44e:	40 e4       	ldi	r20, 0x40	; 64


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
   1f450:	ca de       	rcall	.-620    	; 0x1f1e6 <spiWriteReg>

	if(readPointer == 0) readPointer += S3_RX_START;

#endif

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
   1f452:	81 e0       	ldi	r24, 0x01	; 1
   1f454:	93 e4       	ldi	r25, 0x43	; 67
   1f456:	68 e6       	ldi	r22, 0x68	; 104

#endif

	}

	spiWriteWord(REG_S3_RX_RD0, S3_W_CB, readPointer);     // Write back new pointer
   1f458:	fa de       	rcall	.-524    	; 0x1f24e <spiReadReg>
   1f45a:	88 23       	and	r24, r24
   1f45c:	d1 f7       	brne	.-12     	; 0x1f452 <processPacket+0x90>
   1f45e:	8e 01       	movw	r16, r28
   1f460:	0f 5f       	subi	r16, 0xFF	; 255
	spiWriteReg(REG_S3_CR, S3_W_CB, CR_RECV);
   1f462:	1f 4f       	sbci	r17, 0xFF	; 255
   1f464:	ec e0       	ldi	r30, 0x0C	; 12
   1f466:	ee 2e       	mov	r14, r30
   1f468:	e3 e4       	ldi	r30, 0x43	; 67
   1f46a:	fe 2e       	mov	r15, r30
   1f46c:	f8 01       	movw	r30, r16

	while(spiReadReg(REG_S3_CR, S3_R_CB));
   1f46e:	41 91       	ld	r20, Z+
   1f470:	8f 01       	movw	r16, r30
   1f472:	c7 01       	movw	r24, r14
   1f474:	6c e6       	ldi	r22, 0x6C	; 108
   1f476:	b7 de       	rcall	.-658    	; 0x1f1e6 <spiWriteReg>
   1f478:	08 94       	sec
   1f47a:	e1 1c       	adc	r14, r1
   1f47c:	f1 1c       	adc	r15, r1
   1f47e:	f2 e1       	ldi	r31, 0x12	; 18
   1f480:	ef 16       	cp	r14, r31
   1f482:	f3 e4       	ldi	r31, 0x43	; 67
   1f484:	ff 06       	cpc	r15, r31
   1f486:	91 f7       	brne	.-28     	; 0x1f46c <processPacket+0xaa>
   1f488:	ef 80       	ldd	r14, Y+7	; 0x07
	)

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) spiWriteReg(REG_S3_DIPR0 + i, S3_W_CB, buffer[i]);
   1f48a:	ff 24       	eor	r15, r15
   1f48c:	fe 2c       	mov	r15, r14
   1f48e:	ee 24       	eor	r14, r14
   1f490:	88 85       	ldd	r24, Y+8	; 0x08
   1f492:	e8 0e       	add	r14, r24
   1f494:	f1 1c       	adc	r15, r1
   1f496:	89 85       	ldd	r24, Y+9	; 0x09
   1f498:	90 e0       	ldi	r25, 0x00	; 0
   1f49a:	98 2f       	mov	r25, r24
   1f49c:	88 27       	eor	r24, r24
   1f49e:	2a 85       	ldd	r18, Y+10	; 0x0a
   1f4a0:	82 0f       	add	r24, r18
   1f4a2:	91 1d       	adc	r25, r1
   1f4a4:	0b 85       	ldd	r16, Y+11	; 0x0b
   1f4a6:	10 e0       	ldi	r17, 0x00	; 0

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RADDR);)

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
   1f4a8:	10 2f       	mov	r17, r16
   1f4aa:	00 27       	eor	r16, r16
   1f4ac:	2c 85       	ldd	r18, Y+12	; 0x0c
   1f4ae:	02 0f       	add	r16, r18
   1f4b0:	11 1d       	adc	r17, r1
   1f4b2:	83 30       	cpi	r24, 0x03	; 3
   1f4b4:	91 05       	cpc	r25, r1
	uint16_t tftpOpcode  = (buffer[8] << 8) + buffer[9];
   1f4b6:	89 f4       	brne	.+34     	; 0x1f4da <processPacket+0x118>
   1f4b8:	09 3f       	cpi	r16, 0xF9	; 249
   1f4ba:	11 05       	cpc	r17, r1
   1f4bc:	60 f4       	brcc	.+24     	; 0x1f4d6 <processPacket+0x114>
   1f4be:	20 91 20 01 	lds	r18, 0x0120
   1f4c2:	30 91 21 01 	lds	r19, 0x0121
	uint16_t tftpBlock   = (buffer[10] << 8) + buffer[11];
   1f4c6:	02 17       	cp	r16, r18
   1f4c8:	13 07       	cpc	r17, r19
   1f4ca:	28 f0       	brcs	.+10     	; 0x1f4d6 <processPacket+0x114>
   1f4cc:	2f 5f       	subi	r18, 0xFF	; 255
   1f4ce:	3f 4f       	sbci	r19, 0xFF	; 255
   1f4d0:	20 17       	cp	r18, r16
		tracenum(tftpOpcode);
		tracePGM(mDebugTftp_DLEN);
		tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
	)

	if((tftpOpcode == TFTP_OPCODE_DATA)
   1f4d2:	31 07       	cpc	r19, r17
   1f4d4:	10 f4       	brcc	.+4      	; 0x1f4da <processPacket+0x118>
   1f4d6:	80 e0       	ldi	r24, 0x00	; 0
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
   1f4d8:	90 e0       	ldi	r25, 0x00	; 0
   1f4da:	25 e0       	ldi	r18, 0x05	; 5
   1f4dc:	e2 16       	cp	r14, r18
   1f4de:	22 e0       	ldi	r18, 0x02	; 2
   1f4e0:	f2 06       	cpc	r15, r18
   1f4e2:	08 f0       	brcs	.+2      	; 0x1f4e6 <processPacket+0x124>
   1f4e4:	dd c0       	rjmp	.+442    	; 0x1f6a0 <processPacket+0x2de>
   1f4e6:	83 30       	cpi	r24, 0x03	; 3
   1f4e8:	91 05       	cpc	r25, r1
   1f4ea:	29 f1       	breq	.+74     	; 0x1f536 <processPacket+0x174>
   1f4ec:	84 30       	cpi	r24, 0x04	; 4
   1f4ee:	91 05       	cpc	r25, r1
   1f4f0:	48 f4       	brcc	.+18     	; 0x1f504 <processPacket+0x142>
   1f4f2:	81 30       	cpi	r24, 0x01	; 1
   1f4f4:	91 05       	cpc	r25, r1
		tftpOpcode = TFTP_OPCODE_UKN;
   1f4f6:	09 f4       	brne	.+2      	; 0x1f4fa <processPacket+0x138>
   1f4f8:	da c0       	rjmp	.+436    	; 0x1f6ae <processPacket+0x2ec>

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   1f4fa:	82 30       	cpi	r24, 0x02	; 2
   1f4fc:	91 05       	cpc	r25, r1
   1f4fe:	09 f0       	breq	.+2      	; 0x1f502 <processPacket+0x140>
   1f500:	cf c0       	rjmp	.+414    	; 0x1f6a0 <processPacket+0x2de>
   1f502:	05 c0       	rjmp	.+10     	; 0x1f50e <processPacket+0x14c>
   1f504:	86 30       	cpi	r24, 0x06	; 6

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   1f506:	91 05       	cpc	r25, r1
   1f508:	08 f0       	brcs	.+2      	; 0x1f50c <processPacket+0x14a>
   1f50a:	ca c0       	rjmp	.+404    	; 0x1f6a0 <processPacket+0x2de>
   1f50c:	d0 c0       	rjmp	.+416    	; 0x1f6ae <processPacket+0x2ec>
   1f50e:	4a d2       	rcall	.+1172   	; 0x1f9a4 <resetTick>
   1f510:	82 e0       	ldi	r24, 0x02	; 2
   1f512:	90 e0       	ldi	r25, 0x00	; 0
   1f514:	6f ef       	ldi	r22, 0xFF	; 255
   1f516:	7b d2       	rcall	.+1270   	; 0x1fa0e <__eewr_byte_m1284p>
   1f518:	80 91 28 01 	lds	r24, 0x0128
   1f51c:	90 91 29 01 	lds	r25, 0x0129
   1f520:	14 df       	rcall	.-472    	; 0x1f34a <sockInit>
   1f522:	10 92 21 01 	sts	0x0121, r1
   1f526:	10 92 20 01 	sts	0x0120, r1
   1f52a:	10 92 23 01 	sts	0x0123, r1
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
   1f52e:	10 92 22 01 	sts	0x0122, r1

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPWRQ);)

			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
   1f532:	02 e0       	ldi	r16, 0x02	; 2
   1f534:	bf c0       	rjmp	.+382    	; 0x1f6b4 <processPacket+0x2f2>
   1f536:	36 d2       	rcall	.+1132   	; 0x1f9a4 <resetTick>
   1f538:	9c ef       	ldi	r25, 0xFC	; 252
   1f53a:	89 2e       	mov	r8, r25

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   1f53c:	9f ef       	ldi	r25, 0xFF	; 255
   1f53e:	99 2e       	mov	r9, r25
   1f540:	8e 0c       	add	r8, r14
   1f542:	9f 1c       	adc	r9, r15
   1f544:	10 93 23 01 	sts	0x0123, r17
#else
				tracenum(tftpTransferPort);
#endif
			)

			lastPacket = highPacket = 0;
   1f548:	00 93 22 01 	sts	0x0122, r16
   1f54c:	01 50       	subi	r16, 0x01	; 1
   1f54e:	10 40       	sbci	r17, 0x00	; 0
   1f550:	68 01       	movw	r12, r16
   1f552:	ee 24       	eor	r14, r14
   1f554:	ff 24       	eor	r15, r15
   1f556:	29 e0       	ldi	r18, 0x09	; 9
			returnCode = ACK; // Send back acknowledge for packet 0
   1f558:	cc 0c       	add	r12, r12
			break;
   1f55a:	dd 1c       	adc	r13, r13

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
   1f55c:	ee 1c       	adc	r14, r14
   1f55e:	ff 1c       	adc	r15, r15

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPDATA);)

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
   1f560:	2a 95       	dec	r18
   1f562:	d1 f7       	brne	.-12     	; 0x1f558 <processPacket+0x196>
   1f564:	8f ef       	ldi	r24, 0xFF	; 255
   1f566:	9f ef       	ldi	r25, 0xFF	; 255
   1f568:	a0 e0       	ldi	r26, 0x00	; 0
   1f56a:	b0 e0       	ldi	r27, 0x00	; 0
			lastPacket = tftpBlock;
   1f56c:	c8 22       	and	r12, r24
   1f56e:	d9 22       	and	r13, r25
   1f570:	ea 22       	and	r14, r26
   1f572:	fb 22       	and	r15, r27
#if defined(RAMPZ)
			writeAddr = (((address_t)((tftpBlock - 1)/0x80) << 16) | ((address_t)((tftpBlock - 1)%0x80) << 9));
   1f574:	00 0f       	add	r16, r16
   1f576:	01 2f       	mov	r16, r17
   1f578:	00 1f       	adc	r16, r16
   1f57a:	11 0b       	sbc	r17, r17
   1f57c:	11 95       	neg	r17
   1f57e:	20 e0       	ldi	r18, 0x00	; 0
   1f580:	30 e0       	ldi	r19, 0x00	; 0
   1f582:	98 01       	movw	r18, r16
   1f584:	11 27       	eor	r17, r17
   1f586:	00 27       	eor	r16, r16
   1f588:	c0 2a       	or	r12, r16
   1f58a:	d1 2a       	or	r13, r17
   1f58c:	e2 2a       	or	r14, r18
   1f58e:	f3 2a       	or	r15, r19
   1f590:	c4 01       	movw	r24, r8
   1f592:	a0 e0       	ldi	r26, 0x00	; 0
   1f594:	b0 e0       	ldi	r27, 0x00	; 0
   1f596:	8c 0d       	add	r24, r12
   1f598:	9d 1d       	adc	r25, r13
   1f59a:	ae 1d       	adc	r26, r14
   1f59c:	bf 1d       	adc	r27, r15
   1f59e:	81 30       	cpi	r24, 0x01	; 1
   1f5a0:	e0 ef       	ldi	r30, 0xF0	; 240
   1f5a2:	9e 07       	cpc	r25, r30
   1f5a4:	e1 e0       	ldi	r30, 0x01	; 1
   1f5a6:	ae 07       	cpc	r26, r30
   1f5a8:	e0 e0       	ldi	r30, 0x00	; 0
   1f5aa:	be 07       	cpc	r27, r30
   1f5ac:	08 f0       	brcs	.+2      	; 0x1f5b0 <processPacket+0x1ee>
   1f5ae:	81 c0       	rjmp	.+258    	; 0x1f6b2 <processPacket+0x2f0>
   1f5b0:	f0 e0       	ldi	r31, 0x00	; 0
   1f5b2:	8f 16       	cp	r8, r31
   1f5b4:	f2 e0       	ldi	r31, 0x02	; 2
   1f5b6:	9f 06       	cpc	r9, r31
#else
			writeAddr = (address_t)((address_t)(tftpBlock - 1) << 9); // Flash write address for this block
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
   1f5b8:	10 f4       	brcc	.+4      	; 0x1f5be <processPacket+0x1fc>
   1f5ba:	04 e0       	ldi	r16, 0x04	; 4
   1f5bc:	05 c0       	rjmp	.+10     	; 0x1f5c8 <processPacket+0x206>
   1f5be:	02 e0       	ldi	r16, 0x02	; 2
   1f5c0:	03 c0       	rjmp	.+6      	; 0x1f5c8 <processPacket+0x206>
   1f5c2:	08 94       	sec
   1f5c4:	81 1c       	adc	r8, r1
   1f5c6:	91 1c       	adc	r9, r1
   1f5c8:	88 20       	and	r8, r8
   1f5ca:	d9 f7       	brne	.-10     	; 0x1f5c2 <processPacket+0x200>
   1f5cc:	c1 14       	cp	r12, r1
   1f5ce:	d1 04       	cpc	r13, r1
   1f5d0:	e1 04       	cpc	r14, r1
   1f5d2:	f1 04       	cpc	r15, r1
   1f5d4:	19 f4       	brne	.+6      	; 0x1f5dc <processPacket+0x21a>
   1f5d6:	ce 01       	movw	r24, r28
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
   1f5d8:	0d 96       	adiw	r24, 0x0d	; 13
   1f5da:	81 d1       	rcall	.+770    	; 0x1f8de <validImage>
   1f5dc:	fe e0       	ldi	r31, 0x0E	; 14
   1f5de:	af 2e       	mov	r10, r31
   1f5e0:	b1 2c       	mov	r11, r1
   1f5e2:	ac 0e       	add	r10, r28
   1f5e4:	bd 1e       	adc	r11, r29
				else returnCode = ACK;
   1f5e6:	20 e0       	ldi	r18, 0x00	; 0
   1f5e8:	30 e0       	ldi	r19, 0x00	; 0

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
   1f5ea:	11 e0       	ldi	r17, 0x01	; 1
   1f5ec:	41 2c       	mov	r4, r1
   1f5ee:	af ef       	ldi	r26, 0xFF	; 255
   1f5f0:	5a 2e       	mov	r5, r26
   1f5f2:	af ef       	ldi	r26, 0xFF	; 255
				DBG_TFTP(
					tracePGMlnTftp(mDebugTftp_PLEN);
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
   1f5f4:	6a 2e       	mov	r6, r26
   1f5f6:	af ef       	ldi	r26, 0xFF	; 255
   1f5f8:	7a 2e       	mov	r7, r26
   1f5fa:	4c 0c       	add	r4, r12
   1f5fc:	5d 1c       	adc	r5, r13
					// First sector - validate
					if(!validImage(pageBase)) {
   1f5fe:	6e 1c       	adc	r6, r14
   1f600:	7f 1c       	adc	r7, r15
   1f602:	b3 e0       	ldi	r27, 0x03	; 3
   1f604:	3b 2e       	mov	r3, r27
   1f606:	85 e0       	ldi	r24, 0x05	; 5
   1f608:	28 2e       	mov	r2, r24
   1f60a:	3f c0       	rjmp	.+126    	; 0x1f68a <processPacket+0x2c8>
   1f60c:	a9 01       	movw	r20, r18
   1f60e:	60 e0       	ldi	r22, 0x00	; 0
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   1f610:	70 e0       	ldi	r23, 0x00	; 0
   1f612:	4c 0d       	add	r20, r12
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   1f614:	5d 1d       	adc	r21, r13
					)

					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   1f616:	6e 1d       	adc	r22, r14
   1f618:	7f 1d       	adc	r23, r15
   1f61a:	d5 01       	movw	r26, r10
   1f61c:	8c 91       	ld	r24, X
   1f61e:	90 e0       	ldi	r25, 0x00	; 0
   1f620:	b8 2f       	mov	r27, r24
   1f622:	aa 27       	eor	r26, r26
   1f624:	f5 01       	movw	r30, r10
   1f626:	31 97       	sbiw	r30, 0x01	; 1
   1f628:	80 81       	ld	r24, Z
   1f62a:	90 e0       	ldi	r25, 0x00	; 0
   1f62c:	a8 2b       	or	r26, r24
   1f62e:	b9 2b       	or	r27, r25
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   1f630:	0d 01       	movw	r0, r26
   1f632:	fa 01       	movw	r30, r20
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   1f634:	60 93 5b 00 	sts	0x005B, r22
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   1f638:	10 93 57 00 	sts	0x0057, r17
   1f63c:	e8 95       	spm
   1f63e:	11 24       	eor	r1, r1
   1f640:	2e 5f       	subi	r18, 0xFE	; 254
   1f642:	3f 4f       	sbci	r19, 0xFF	; 255
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
   1f644:	22 23       	and	r18, r18
   1f646:	e9 f4       	brne	.+58     	; 0x1f682 <processPacket+0x2c0>
   1f648:	c9 01       	movw	r24, r18
   1f64a:	a0 e0       	ldi	r26, 0x00	; 0
   1f64c:	b0 e0       	ldi	r27, 0x00	; 0


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
   1f64e:	84 0d       	add	r24, r4
   1f650:	95 1d       	adc	r25, r5
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
   1f652:	a6 1d       	adc	r26, r6
   1f654:	b7 1d       	adc	r27, r7
   1f656:	fc 01       	movw	r30, r24
   1f658:	a0 93 5b 00 	sts	0x005B, r26
					boot_page_fill(writeAddr + offset, writeValue);
   1f65c:	30 92 57 00 	sts	0x0057, r3
   1f660:	e8 95       	spm
   1f662:	07 b6       	in	r0, 0x37	; 55
   1f664:	00 fc       	sbrc	r0, 0
   1f666:	fd cf       	rjmp	.-6      	; 0x1f662 <processPacket+0x2a0>
   1f668:	fc 01       	movw	r30, r24
							tracePGM(mDebugTftp_OFFSET);
							tracenum(writeAddr + offset);
						}
					)

					offset += 2;
   1f66a:	a0 93 5b 00 	sts	0x005B, r26

					if(offset % SPM_PAGESIZE == 0) {
   1f66e:	20 92 57 00 	sts	0x0057, r2
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   1f672:	e8 95       	spm
   1f674:	07 b6       	in	r0, 0x37	; 55
   1f676:	00 fc       	sbrc	r0, 0
   1f678:	fd cf       	rjmp	.-6      	; 0x1f674 <processPacket+0x2b2>
   1f67a:	b1 e1       	ldi	r27, 0x11	; 17
   1f67c:	b0 93 57 00 	sts	0x0057, r27
   1f680:	e8 95       	spm
   1f682:	e2 e0       	ldi	r30, 0x02	; 2
   1f684:	f0 e0       	ldi	r31, 0x00	; 0
   1f686:	ae 0e       	add	r10, r30
   1f688:	bf 1e       	adc	r11, r31
   1f68a:	28 15       	cp	r18, r8
						boot_spm_busy_wait();
   1f68c:	39 05       	cpc	r19, r9
   1f68e:	08 f4       	brcc	.+2      	; 0x1f692 <processPacket+0x2d0>
   1f690:	bd cf       	rjmp	.-134    	; 0x1f60c <processPacket+0x24a>
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   1f692:	04 30       	cpi	r16, 0x04	; 4
   1f694:	79 f4       	brne	.+30     	; 0x1f6b4 <processPacket+0x2f2>
   1f696:	82 e0       	ldi	r24, 0x02	; 2
   1f698:	90 e0       	ldi	r25, 0x00	; 0
   1f69a:	6e ee       	ldi	r22, 0xEE	; 238
   1f69c:	b8 d1       	rcall	.+880    	; 0x1fa0e <__eewr_byte_m1284p>
						boot_spm_busy_wait();
   1f69e:	0a c0       	rjmp	.+20     	; 0x1f6b4 <processPacket+0x2f2>
   1f6a0:	80 91 28 01 	lds	r24, 0x0128
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   1f6a4:	90 91 29 01 	lds	r25, 0x0129
   1f6a8:	50 de       	rcall	.-864    	; 0x1f34a <sockInit>
   1f6aa:	01 e0       	ldi	r16, 0x01	; 1
   1f6ac:	03 c0       	rjmp	.+6      	; 0x1f6b4 <processPacket+0x2f2>
   1f6ae:	00 e0       	ldi	r16, 0x00	; 0
   1f6b0:	01 c0       	rjmp	.+2      	; 0x1f6b4 <processPacket+0x2f2>
   1f6b2:	03 e0       	ldi	r16, 0x03	; 3
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   1f6b4:	80 2f       	mov	r24, r16
   1f6b6:	c4 5f       	subi	r28, 0xF4	; 244
   1f6b8:	dd 4f       	sbci	r29, 0xFD	; 253
   1f6ba:	de bf       	out	0x3e, r29	; 62
						boot_rww_enable();
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
   1f6bc:	cd bf       	out	0x3d, r28	; 61
   1f6be:	df 91       	pop	r29
					// Hand over to application

					DBG_TFTP(tracePGMlnTftp(mDebugTftp_DONE);)

					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   1f6c0:	cf 91       	pop	r28
   1f6c2:	1f 91       	pop	r17
   1f6c4:	0f 91       	pop	r16
   1f6c6:	ff 90       	pop	r15
   1f6c8:	ef 90       	pop	r14
   1f6ca:	df 90       	pop	r13
			)

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   1f6cc:	cf 90       	pop	r12
   1f6ce:	bf 90       	pop	r11
   1f6d0:	af 90       	pop	r10
   1f6d2:	9f 90       	pop	r9
   1f6d4:	8f 90       	pop	r8
   1f6d6:	7f 90       	pop	r7
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
   1f6d8:	6f 90       	pop	r6
			break;
   1f6da:	5f 90       	pop	r5
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
   1f6dc:	4f 90       	pop	r4
   1f6de:	3f 90       	pop	r3
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.

				DBG_TFTP(tracePGMlnTftp(mDebugTftp_FULL);)

				returnCode = ERROR_FULL;
   1f6e0:	2f 90       	pop	r2
			break;

	}

	return(returnCode);
}
   1f6e2:	08 95       	ret

0001f6e4 <tftpInit>:
   1f6e4:	cf 93       	push	r28
   1f6e6:	85 e4       	ldi	r24, 0x45	; 69
   1f6e8:	90 e0       	ldi	r25, 0x00	; 0
   1f6ea:	2f de       	rcall	.-930    	; 0x1f34a <sockInit>
   1f6ec:	87 e1       	ldi	r24, 0x17	; 23
   1f6ee:	90 e0       	ldi	r25, 0x00	; 0
   1f6f0:	86 d1       	rcall	.+780    	; 0x1f9fe <__eerd_byte_m1284p>
   1f6f2:	8b 3b       	cpi	r24, 0xBB	; 187
   1f6f4:	91 f4       	brne	.+36     	; 0x1f71a <tftpInit+0x36>
   1f6f6:	89 e1       	ldi	r24, 0x19	; 25
   1f6f8:	90 e0       	ldi	r25, 0x00	; 0
   1f6fa:	81 d1       	rcall	.+770    	; 0x1f9fe <__eerd_byte_m1284p>
   1f6fc:	c8 2f       	mov	r28, r24
   1f6fe:	88 e1       	ldi	r24, 0x18	; 24
   1f700:	90 e0       	ldi	r25, 0x00	; 0
   1f702:	7d d1       	rcall	.+762    	; 0x1f9fe <__eerd_byte_m1284p>
   1f704:	2c 2f       	mov	r18, r28
   1f706:	30 e0       	ldi	r19, 0x00	; 0
   1f708:	32 2f       	mov	r19, r18
   1f70a:	22 27       	eor	r18, r18
   1f70c:	28 0f       	add	r18, r24
   1f70e:	31 1d       	adc	r19, r1
   1f710:	30 93 29 01 	sts	0x0129, r19
 * Initializes the network controller
 */
void tftpInit(void)
{
	// Open socket
	sockInit(TFTP_PORT);
   1f714:	20 93 28 01 	sts	0x0128, r18
   1f718:	06 c0       	rjmp	.+12     	; 0x1f726 <tftpInit+0x42>
   1f71a:	89 e7       	ldi	r24, 0x79	; 121

#if defined(RANDOM_TFTP_DATA_PORT)
#else
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
   1f71c:	97 eb       	ldi	r25, 0xB7	; 183
   1f71e:	90 93 29 01 	sts	0x0129, r25
   1f722:	80 93 28 01 	sts	0x0128, r24
   1f726:	cf 91       	pop	r28
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
   1f728:	08 95       	ret

0001f72a <tftpPoll>:
   1f72a:	af 92       	push	r10
   1f72c:	bf 92       	push	r11
   1f72e:	cf 92       	push	r12
   1f730:	df 92       	push	r13
   1f732:	ff 92       	push	r15
   1f734:	0f 93       	push	r16
   1f736:	1f 93       	push	r17
   1f738:	cf 93       	push	r28
   1f73a:	df 93       	push	r29
   1f73c:	cd b7       	in	r28, 0x3d	; 61
   1f73e:	de b7       	in	r29, 0x3e	; 62
   1f740:	c5 56       	subi	r28, 0x65	; 101
   1f742:	d0 40       	sbci	r29, 0x00	; 0
   1f744:	de bf       	out	0x3e, r29	; 62
   1f746:	cd bf       	out	0x3d, r28	; 61
   1f748:	86 e2       	ldi	r24, 0x26	; 38
   1f74a:	93 e4       	ldi	r25, 0x43	; 67
   1f74c:	68 e6       	ldi	r22, 0x68	; 104
   1f74e:	9d dd       	rcall	.-1222   	; 0x1f28a <spiReadWord>
	else
		tftpTransferPort = TFTP_DATA_PORT;
   1f750:	00 97       	sbiw	r24, 0x00	; 0
   1f752:	09 f4       	brne	.+2      	; 0x1f756 <tftpPoll+0x2c>
   1f754:	b5 c0       	rjmp	.+362    	; 0x1f8c0 <tftpPoll+0x196>
   1f756:	81 e0       	ldi	r24, 0x01	; 1
   1f758:	80 93 2b 01 	sts	0x012B, r24
#else
		tracePGMlnTftp(mDebugTftp_PORT);
		tracenum(tftpTransferPort);
#endif
	)
}
   1f75c:	0e c0       	rjmp	.+28     	; 0x1f77a <tftpPoll+0x50>
   1f75e:	82 e0       	ldi	r24, 0x02	; 2

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
   1f760:	93 e4       	ldi	r25, 0x43	; 67
   1f762:	6c e6       	ldi	r22, 0x6C	; 108
   1f764:	44 e0       	ldi	r20, 0x04	; 4
   1f766:	3f dd       	rcall	.-1410   	; 0x1f1e6 <spiWriteReg>
   1f768:	8f ef       	ldi	r24, 0xFF	; 255
   1f76a:	97 e8       	ldi	r25, 0x87	; 135
   1f76c:	a3 e1       	ldi	r26, 0x13	; 19
   1f76e:	81 50       	subi	r24, 0x01	; 1
   1f770:	90 40       	sbci	r25, 0x00	; 0
   1f772:	a0 40       	sbci	r26, 0x00	; 0
   1f774:	e1 f7       	brne	.-8      	; 0x1f76e <tftpPoll+0x44>
   1f776:	00 c0       	rjmp	.+0      	; 0x1f778 <tftpPoll+0x4e>
   1f778:	00 00       	nop
   1f77a:	82 e0       	ldi	r24, 0x02	; 2
   1f77c:	93 e4       	ldi	r25, 0x43	; 67
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = spiReadWord(REG_S3_RX_RSR0, S3_R_CB);
   1f77e:	68 e6       	ldi	r22, 0x68	; 104
   1f780:	66 dd       	rcall	.-1332   	; 0x1f24e <spiReadReg>
   1f782:	82 fd       	sbrc	r24, 2
   1f784:	ec cf       	rjmp	.-40     	; 0x1f75e <tftpPoll+0x34>
   1f786:	1d de       	rcall	.-966    	; 0x1f3c2 <processPacket>
// 			_delay_ms(400);
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
   1f788:	f8 2e       	mov	r15, r24
   1f78a:	84 e2       	ldi	r24, 0x24	; 36
   1f78c:	93 e4       	ldi	r25, 0x43	; 67
		tftpFlashing = TRUE;
   1f78e:	60 e0       	ldi	r22, 0x00	; 0
   1f790:	7c dd       	rcall	.-1288   	; 0x1f28a <spiReadWord>
   1f792:	a1 2c       	mov	r10, r1

		while((spiReadReg(REG_S3_IR, S3_R_CB) & IR_RECV)) {
   1f794:	18 e9       	ldi	r17, 0x98	; 152
			spiWriteReg(REG_S3_IR, S3_W_CB, IR_RECV);
   1f796:	b1 2e       	mov	r11, r17
   1f798:	a8 0e       	add	r10, r24
   1f79a:	b9 1e       	adc	r11, r25
   1f79c:	92 e0       	ldi	r25, 0x02	; 2
   1f79e:	f9 16       	cp	r15, r25
   1f7a0:	09 f4       	brne	.+2      	; 0x1f7a4 <tftpPoll+0x7a>
   1f7a2:	3e c0       	rjmp	.+124    	; 0x1f820 <tftpPoll+0xf6>
   1f7a4:	9f 15       	cp	r25, r15
   1f7a6:	20 f0       	brcs	.+8      	; 0x1f7b0 <tftpPoll+0x86>
   1f7a8:	a1 e0       	ldi	r26, 0x01	; 1
   1f7aa:	fa 16       	cp	r15, r26
   1f7ac:	41 f4       	brne	.+16     	; 0x1f7be <tftpPoll+0x94>
   1f7ae:	1a c0       	rjmp	.+52     	; 0x1f7e4 <tftpPoll+0xba>
   1f7b0:	b3 e0       	ldi	r27, 0x03	; 3
   1f7b2:	fb 16       	cp	r15, r27
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;

		while((spiReadReg(REG_S3_IR, S3_R_CB) & IR_RECV)) {
   1f7b4:	31 f1       	breq	.+76     	; 0x1f802 <tftpPoll+0xd8>
   1f7b6:	e4 e0       	ldi	r30, 0x04	; 4
   1f7b8:	fe 16       	cp	r15, r30
   1f7ba:	09 f4       	brne	.+2      	; 0x1f7be <tftpPoll+0x94>
   1f7bc:	40 c0       	rjmp	.+128    	; 0x1f83e <tftpPoll+0x114>
   1f7be:	44 ea       	ldi	r20, 0xA4	; 164
   1f7c0:	50 ef       	ldi	r21, 0xF0	; 240
		// Process Packet and get TFTP response code
#if (DEBUG_TFTP > 0)
		packetSize = spiReadWord(REG_S3_RX_RSR0, S3_R_CB);
		response = processPacket(packetSize);
#else
		response = processPacket();
   1f7c2:	60 e0       	ldi	r22, 0x00	; 0
   1f7c4:	70 e0       	ldi	r23, 0x00	; 0
   1f7c6:	40 50       	subi	r20, 0x00	; 0
	uint16_t writePointer;
	
#if (W5500 > 0)
	writePointer = spiReadWord(REG_S3_TX_WR0, S3_R_CB);
#else
	writePointer = spiReadWord(REG_S3_TX_WR0, 0) + S3_TX_START;
   1f7c8:	50 40       	sbci	r21, 0x00	; 0
   1f7ca:	6f 4f       	sbci	r22, 0xFF	; 255
   1f7cc:	7f 4f       	sbci	r23, 0xFF	; 255
   1f7ce:	ce 01       	movw	r24, r28
   1f7d0:	01 96       	adiw	r24, 0x01	; 1
   1f7d2:	2a e0       	ldi	r18, 0x0A	; 10
   1f7d4:	30 e0       	ldi	r19, 0x00	; 0
   1f7d6:	0a d1       	rcall	.+532    	; 0x1f9ec <memcpy_PF>
   1f7d8:	2a e0       	ldi	r18, 0x0A	; 10
   1f7da:	6e 01       	movw	r12, r28
#endif


	switch(response) {
   1f7dc:	08 94       	sec
   1f7de:	c1 1c       	adc	r12, r1
   1f7e0:	d1 1c       	adc	r13, r1
   1f7e2:	38 c0       	rjmp	.+112    	; 0x1f854 <tftpPoll+0x12a>
   1f7e4:	49 eb       	ldi	r20, 0xB9	; 185
   1f7e6:	50 ef       	ldi	r21, 0xF0	; 240
   1f7e8:	60 e0       	ldi	r22, 0x00	; 0
   1f7ea:	70 e0       	ldi	r23, 0x00	; 0
   1f7ec:	40 50       	subi	r20, 0x00	; 0
   1f7ee:	50 40       	sbci	r21, 0x00	; 0
   1f7f0:	6f 4f       	sbci	r22, 0xFF	; 255
   1f7f2:	7f 4f       	sbci	r23, 0xFF	; 255
   1f7f4:	ce 01       	movw	r24, r28
   1f7f6:	01 96       	adiw	r24, 0x01	; 1
   1f7f8:	2c e0       	ldi	r18, 0x0C	; 12
   1f7fa:	30 e0       	ldi	r19, 0x00	; 0
   1f7fc:	f7 d0       	rcall	.+494    	; 0x1f9ec <memcpy_PF>

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_unknown_error_packet, packetLength);
   1f7fe:	2c e0       	ldi	r18, 0x0C	; 12
   1f800:	ec cf       	rjmp	.-40     	; 0x1f7da <tftpPoll+0xb0>
   1f802:	4f ea       	ldi	r20, 0xAF	; 175
   1f804:	50 ef       	ldi	r21, 0xF0	; 240
   1f806:	60 e0       	ldi	r22, 0x00	; 0
   1f808:	70 e0       	ldi	r23, 0x00	; 0
   1f80a:	40 50       	subi	r20, 0x00	; 0
   1f80c:	50 40       	sbci	r21, 0x00	; 0
   1f80e:	6f 4f       	sbci	r22, 0xFF	; 255
   1f810:	7f 4f       	sbci	r23, 0xFF	; 255
   1f812:	ce 01       	movw	r24, r28
   1f814:	01 96       	adiw	r24, 0x01	; 1
   1f816:	29 e0       	ldi	r18, 0x09	; 9
   1f818:	30 e0       	ldi	r19, 0x00	; 0
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
   1f81a:	e8 d0       	rcall	.+464    	; 0x1f9ec <memcpy_PF>
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
   1f81c:	29 e0       	ldi	r18, 0x09	; 9
   1f81e:	dd cf       	rjmp	.-70     	; 0x1f7da <tftpPoll+0xb0>
   1f820:	80 91 22 01 	lds	r24, 0x0122
   1f824:	90 91 23 01 	lds	r25, 0x0123

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_opcode_error_packet, packetLength);
   1f828:	20 91 20 01 	lds	r18, 0x0120
   1f82c:	30 91 21 01 	lds	r19, 0x0121
   1f830:	28 17       	cp	r18, r24
   1f832:	39 07       	cpc	r19, r25
   1f834:	20 f4       	brcc	.+8      	; 0x1f83e <tftpPoll+0x114>
   1f836:	90 93 21 01 	sts	0x0121, r25
   1f83a:	80 93 20 01 	sts	0x0120, r24
   1f83e:	19 82       	std	Y+1, r1	; 0x01
   1f840:	84 e0       	ldi	r24, 0x04	; 4
#endif
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
   1f842:	8a 83       	std	Y+2, r24	; 0x02
   1f844:	80 91 22 01 	lds	r24, 0x0122

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_full_error_packet, packetLength);
   1f848:	90 91 23 01 	lds	r25, 0x0123
   1f84c:	9b 83       	std	Y+3, r25	; 0x03
   1f84e:	8c 83       	std	Y+4, r24	; 0x04
   1f850:	24 e0       	ldi	r18, 0x04	; 4
   1f852:	c3 cf       	rjmp	.-122    	; 0x1f7da <tftpPoll+0xb0>
   1f854:	85 01       	movw	r16, r10
   1f856:	0f 5f       	subi	r16, 0xFF	; 255
   1f858:	1f 4f       	sbci	r17, 0xFF	; 255
   1f85a:	d6 01       	movw	r26, r12
   1f85c:	4d 91       	ld	r20, X+
   1f85e:	6d 01       	movw	r12, r26
   1f860:	c5 01       	movw	r24, r10
#endif
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
   1f862:	64 e7       	ldi	r22, 0x74	; 116
   1f864:	a6 96       	adiw	r28, 0x26	; 38
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
#endif
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
   1f866:	2f af       	sts	0x7f, r18
   1f868:	a6 97       	sbiw	r28, 0x26	; 38
   1f86a:	bd dc       	rcall	.-1670   	; 0x1f1e6 <spiWriteReg>
   1f86c:	a6 96       	adiw	r28, 0x26	; 38
   1f86e:	2f ad       	sts	0x6f, r18
   1f870:	a6 97       	sbiw	r28, 0x26	; 38
   1f872:	b0 ea       	ldi	r27, 0xA0	; 160
   1f874:	00 30       	cpi	r16, 0x00	; 0
   1f876:	1b 07       	cpc	r17, r27
   1f878:	11 f0       	breq	.+4      	; 0x1f87e <tftpPoll+0x154>
   1f87a:	58 01       	movw	r10, r16
   1f87c:	03 c0       	rjmp	.+6      	; 0x1f884 <tftpPoll+0x15a>
   1f87e:	a1 2c       	mov	r10, r1
   1f880:	b8 e9       	ldi	r27, 0x98	; 152
   1f882:	bb 2e       	mov	r11, r27
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
   1f884:	21 50       	subi	r18, 0x01	; 1
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
   1f886:	31 f7       	brne	.-52     	; 0x1f854 <tftpPoll+0x12a>
   1f888:	a5 01       	movw	r20, r10
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
   1f88a:	40 50       	subi	r20, 0x00	; 0
   1f88c:	58 49       	sbci	r21, 0x98	; 152
   1f88e:	84 e2       	ldi	r24, 0x24	; 36
   1f890:	93 e4       	ldi	r25, 0x43	; 67
   1f892:	6c e6       	ldi	r22, 0x6C	; 108
			*txPtr = lastPacket & 0xff;
   1f894:	c6 dc       	rcall	.-1652   	; 0x1f222 <spiWriteWord>
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
   1f896:	81 e0       	ldi	r24, 0x01	; 1
   1f898:	93 e4       	ldi	r25, 0x43	; 67
	}

	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, S3_TXBUF_CB, *txPtr++);
   1f89a:	6c e6       	ldi	r22, 0x6C	; 108
   1f89c:	40 e2       	ldi	r20, 0x20	; 32
   1f89e:	a3 dc       	rcall	.-1722   	; 0x1f1e6 <spiWriteReg>
   1f8a0:	81 e0       	ldi	r24, 0x01	; 1
   1f8a2:	93 e4       	ldi	r25, 0x43	; 67
   1f8a4:	68 e6       	ldi	r22, 0x68	; 104
   1f8a6:	d3 dc       	rcall	.-1626   	; 0x1f24e <spiReadReg>
   1f8a8:	88 23       	and	r24, r24
   1f8aa:	d1 f7       	brne	.-12     	; 0x1f8a0 <tftpPoll+0x176>
   1f8ac:	e4 e0       	ldi	r30, 0x04	; 4
   1f8ae:	fe 16       	cp	r15, r30
   1f8b0:	39 f4       	brne	.+14     	; 0x1f8c0 <tftpPoll+0x196>
   1f8b2:	81 e0       	ldi	r24, 0x01	; 1
		if(writePointer == 0xFFFF) writePointer = 0x0000;  //changed 0c0800 to 0xFFFF, fixes a 4th packet retransmit bug. upload speed changed from 500sec to 90sec for 100kb program
	}

	spiWriteWord(REG_S3_TX_WR0, S3_W_CB, writePointer);
#else
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   1f8b4:	93 e4       	ldi	r25, 0x43	; 67
   1f8b6:	6c e6       	ldi	r22, 0x6C	; 108
   1f8b8:	40 e1       	ldi	r20, 0x10	; 16
   1f8ba:	95 dc       	rcall	.-1750   	; 0x1f1e6 <spiWriteReg>
   1f8bc:	80 e0       	ldi	r24, 0x00	; 0
   1f8be:	01 c0       	rjmp	.+2      	; 0x1f8c2 <tftpPoll+0x198>
   1f8c0:	81 e0       	ldi	r24, 0x01	; 1
   1f8c2:	cb 59       	subi	r28, 0x9B	; 155
   1f8c4:	df 4f       	sbci	r29, 0xFF	; 255
   1f8c6:	de bf       	out	0x3e, r29	; 62
   1f8c8:	cd bf       	out	0x3d, r28	; 61
   1f8ca:	df 91       	pop	r29
   1f8cc:	cf 91       	pop	r28
			break;
	}

	txPtr = txBuffer;

	while(packetLength--) {
   1f8ce:	1f 91       	pop	r17
	spiWriteWord(REG_S3_TX_WR0, S3_W_CB, writePointer);
#else
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}

	spiWriteWord(REG_S3_TX_WR0, S3_W_CB, writePointer - S3_TX_START);
   1f8d0:	0f 91       	pop	r16
   1f8d2:	ff 90       	pop	r15
   1f8d4:	df 90       	pop	r13
   1f8d6:	cf 90       	pop	r12
   1f8d8:	bf 90       	pop	r11
   1f8da:	af 90       	pop	r10
   1f8dc:	08 95       	ret

0001f8de <validImage>:
#include "serial.h"
#include "debug.h"
#include "debug_vald.h"

uint8_t validImage(uint8_t* base)
{
   1f8de:	fc 01       	movw	r30, r24
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
   1f8e0:	80 e0       	ldi	r24, 0x00	; 0

		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
   1f8e2:	90 81       	ld	r25, Z
   1f8e4:	9c 30       	cpi	r25, 0x0C	; 12
   1f8e6:	49 f4       	brne	.+18     	; 0x1f8fa <validImage+0x1c>
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
		}
		
		if(base[i + 1] != 0x94) {
   1f8e8:	91 81       	ldd	r25, Z+1	; 0x01
   1f8ea:	94 39       	cpi	r25, 0x94	; 148
   1f8ec:	41 f4       	brne	.+16     	; 0x1f8fe <validImage+0x20>

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
   1f8ee:	8c 5f       	subi	r24, 0xFC	; 252
   1f8f0:	34 96       	adiw	r30, 0x04	; 4
   1f8f2:	84 33       	cpi	r24, 0x34	; 52
   1f8f4:	b1 f7       	brne	.-20     	; 0x1f8e2 <validImage+0x4>
		}
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
   1f8f6:	81 e0       	ldi	r24, 0x01	; 1
   1f8f8:	08 95       	ret
				tracenum(i);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i]);
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
   1f8fa:	80 e0       	ldi	r24, 0x00	; 0
   1f8fc:	08 95       	ret
				tracenum(i + 1);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i + 1]);
				tracePGM(mDebugVald_0x94);
			)
			return(0);
   1f8fe:	80 e0       	ldi	r24, 0x00	; 0
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
}
   1f900:	08 95       	ret

0001f902 <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
   1f902:	82 e0       	ldi	r24, 0x02	; 2
   1f904:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
   1f908:	88 e1       	ldi	r24, 0x18	; 24
   1f90a:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
   1f90e:	86 e0       	ldi	r24, 0x06	; 6
   1f910:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
   1f914:	80 e1       	ldi	r24, 0x10	; 16
   1f916:	80 93 c4 00 	sts	0x00C4, r24

#if (DEBUG > 0)
	DDRD = 0x92;
#endif

}
   1f91a:	08 95       	ret

0001f91c <putch>:


void putch(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
   1f91c:	90 91 c0 00 	lds	r25, 0x00C0
   1f920:	95 ff       	sbrs	r25, 5
   1f922:	fc cf       	rjmp	.-8      	; 0x1f91c <putch>
	UART_DATA_REG = c;
   1f924:	80 93 c6 00 	sts	0x00C6, r24
}
   1f928:	08 95       	ret

0001f92a <puthex>:


void puthex(uint8_t c)
{
	c &= 0xf;
   1f92a:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
   1f92c:	8a 30       	cpi	r24, 0x0A	; 10
   1f92e:	08 f0       	brcs	.+2      	; 0x1f932 <puthex+0x8>
   1f930:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putch(c + '0');
   1f932:	80 5d       	subi	r24, 0xD0	; 208
   1f934:	f3 cf       	rjmp	.-26     	; 0x1f91c <putch>

0001f936 <getch>:
   1f936:	80 91 c0 00 	lds	r24, 0x00C0

uint8_t getch(void)
{
	//uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
   1f93a:	87 ff       	sbrs	r24, 7
   1f93c:	fc cf       	rjmp	.-8      	; 0x1f936 <getch>
   1f93e:	80 91 c0 00 	lds	r24, 0x00C0
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
   1f942:	84 fd       	sbrc	r24, 4
   1f944:	01 c0       	rjmp	.+2      	; 0x1f948 <getch+0x12>
   1f946:	a8 95       	wdr
   1f948:	80 91 c6 00 	lds	r24, 0x00C6
	}

	//ch = UART_DATA_REG;
	//return ch;

	return(UART_DATA_REG);
   1f94c:	08 95       	ret

0001f94e <serialPoll>:
   1f94e:	80 91 c0 00 	lds	r24, 0x00C0
}


uint8_t serialPoll(void)
{
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
   1f952:	87 ff       	sbrs	r24, 7
   1f954:	04 c0       	rjmp	.+8      	; 0x1f95e <serialPoll+0x10>
   1f956:	26 d0       	rcall	.+76     	; 0x1f9a4 <resetTick>
   1f958:	81 e0       	ldi	r24, 0x01	; 1
		resetTick();
   1f95a:	80 93 2a 01 	sts	0x012A, r24
		serialFlashing = TRUE;
   1f95e:	81 e0       	ldi	r24, 0x01	; 1
   1f960:	08 95       	ret

0001f962 <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
   1f962:	80 91 84 00 	lds	r24, 0x0084
   1f966:	90 91 85 00 	lds	r25, 0x0085

	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
   1f96a:	92 ff       	sbrs	r25, 2
   1f96c:	04 c0       	rjmp	.+8      	; 0x1f976 <updateLed+0x14>
   1f96e:	2b b1       	in	r18, 0x0b	; 11
   1f970:	20 58       	subi	r18, 0x80	; 128
   1f972:	2b b9       	out	0x0b, r18	; 11
   1f974:	01 c0       	rjmp	.+2      	; 0x1f978 <updateLed+0x16>
	else LED_PORT &= ~_BV(LED); // Led pin low
   1f976:	5f 98       	cbi	0x0b, 7	; 11

	if(next_timer_1 < last_timer_1) {
   1f978:	20 91 24 01 	lds	r18, 0x0124
   1f97c:	30 91 25 01 	lds	r19, 0x0125
   1f980:	82 17       	cp	r24, r18
   1f982:	93 07       	cpc	r25, r19
   1f984:	50 f4       	brcc	.+20     	; 0x1f99a <updateLed+0x38>
		tick++;
   1f986:	20 91 26 01 	lds	r18, 0x0126
   1f98a:	30 91 27 01 	lds	r19, 0x0127
   1f98e:	2f 5f       	subi	r18, 0xFF	; 255
   1f990:	3f 4f       	sbci	r19, 0xFF	; 255
   1f992:	30 93 27 01 	sts	0x0127, r19
   1f996:	20 93 26 01 	sts	0x0126, r18
		    tracePGMlnUtil(mDebugUtil_LAST);
		    tracenum(last_timer_1);
		)
	}

	last_timer_1 = next_timer_1;
   1f99a:	90 93 25 01 	sts	0x0125, r25
   1f99e:	80 93 24 01 	sts	0x0124, r24
}
   1f9a2:	08 95       	ret

0001f9a4 <resetTick>:

void resetTick(void)
{
	TCNT1 = 0;
   1f9a4:	10 92 85 00 	sts	0x0085, r1
   1f9a8:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
   1f9ac:	10 92 27 01 	sts	0x0127, r1
   1f9b0:	10 92 26 01 	sts	0x0126, r1
}
   1f9b4:	08 95       	ret

0001f9b6 <timedOut>:

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   1f9b6:	80 e0       	ldi	r24, 0x00	; 0
   1f9b8:	90 e0       	ldi	r25, 0x00	; 0
   1f9ba:	dc 01       	movw	r26, r24
   1f9bc:	ab bf       	out	0x3b, r26	; 59
   1f9be:	fc 01       	movw	r30, r24
   1f9c0:	87 91       	elpm	r24, Z+
   1f9c2:	96 91       	elpm	r25, Z
   1f9c4:	2f ef       	ldi	r18, 0xFF	; 255
   1f9c6:	8f 3f       	cpi	r24, 0xFF	; 255
   1f9c8:	92 07       	cpc	r25, r18
   1f9ca:	51 f0       	breq	.+20     	; 0x1f9e0 <timedOut+0x2a>
   1f9cc:	81 e0       	ldi	r24, 0x01	; 1
   1f9ce:	20 91 26 01 	lds	r18, 0x0126
   1f9d2:	30 91 27 01 	lds	r19, 0x0127
   1f9d6:	25 30       	cpi	r18, 0x05	; 5
   1f9d8:	31 05       	cpc	r19, r1
   1f9da:	18 f4       	brcc	.+6      	; 0x1f9e2 <timedOut+0x2c>
   1f9dc:	80 e0       	ldi	r24, 0x00	; 0
   1f9de:	08 95       	ret
   1f9e0:	80 e0       	ldi	r24, 0x00	; 0
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
	else return(0);
}
   1f9e2:	08 95       	ret

0001f9e4 <appStart>:
void appStart(void) {
	__asm__ __volatile__ (
   1f9e4:	ee 27       	eor	r30, r30
   1f9e6:	ff 27       	eor	r31, r31
   1f9e8:	09 94       	ijmp
		"clr	r30		\n\t"
		"clr	r31		\n\t"
		"ijmp	\n\t"
	);
}
   1f9ea:	08 95       	ret

0001f9ec <memcpy_PF>:
   1f9ec:	fa 01       	movw	r30, r20
   1f9ee:	dc 01       	movw	r26, r24
   1f9f0:	02 c0       	rjmp	.+4      	; 0x1f9f6 <memcpy_PF+0xa>
   1f9f2:	05 90       	lpm	r0, Z+
   1f9f4:	0d 92       	st	X+, r0
   1f9f6:	21 50       	subi	r18, 0x01	; 1
   1f9f8:	30 40       	sbci	r19, 0x00	; 0
   1f9fa:	d8 f7       	brcc	.-10     	; 0x1f9f2 <memcpy_PF+0x6>
   1f9fc:	08 95       	ret

0001f9fe <__eerd_byte_m1284p>:
   1f9fe:	f9 99       	sbic	0x1f, 1	; 31
   1fa00:	fe cf       	rjmp	.-4      	; 0x1f9fe <__eerd_byte_m1284p>
   1fa02:	92 bd       	out	0x22, r25	; 34
   1fa04:	81 bd       	out	0x21, r24	; 33
   1fa06:	f8 9a       	sbi	0x1f, 0	; 31
   1fa08:	99 27       	eor	r25, r25
   1fa0a:	80 b5       	in	r24, 0x20	; 32
   1fa0c:	08 95       	ret

0001fa0e <__eewr_byte_m1284p>:
   1fa0e:	26 2f       	mov	r18, r22

0001fa10 <__eewr_r18_m1284p>:
   1fa10:	f9 99       	sbic	0x1f, 1	; 31
   1fa12:	fe cf       	rjmp	.-4      	; 0x1fa10 <__eewr_r18_m1284p>
   1fa14:	1f ba       	out	0x1f, r1	; 31
   1fa16:	92 bd       	out	0x22, r25	; 34
   1fa18:	81 bd       	out	0x21, r24	; 33
   1fa1a:	20 bd       	out	0x20, r18	; 32
   1fa1c:	0f b6       	in	r0, 0x3f	; 63
   1fa1e:	f8 94       	cli
   1fa20:	fa 9a       	sbi	0x1f, 2	; 31
   1fa22:	f9 9a       	sbi	0x1f, 1	; 31
   1fa24:	0f be       	out	0x3f, r0	; 63
   1fa26:	01 96       	adiw	r24, 0x01	; 1
   1fa28:	08 95       	ret

0001fa2a <_exit>:
   1fa2a:	f8 94       	cli

0001fa2c <__stop_program>:
   1fa2c:	ff cf       	rjmp	.-2      	; 0x1fa2c <__stop_program>
