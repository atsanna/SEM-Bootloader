
semboot_atmega1284_w5500.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0001fc26  00000cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c26  0001f000  0001f000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800120  00800120  00000cda  2**0
                  ALLOC
  3 .stab         000008d0  00000000  00000000  00000cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000199  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001748  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154a  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b7  00000000  00000000  00002e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cff  00000000  00000000  000037e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  000044e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000558  00000000  00000000  000048fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014fc  00000000  00000000  00004e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00006350  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
   1f000:	62 c0       	rjmp	.+196    	; 0x1f0c6 <__ctors_end>
   1f002:	00 00       	nop
   1f004:	df c0       	rjmp	.+446    	; 0x1f1c4 <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	dd c0       	rjmp	.+442    	; 0x1f1c4 <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	db c0       	rjmp	.+438    	; 0x1f1c4 <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	d9 c0       	rjmp	.+434    	; 0x1f1c4 <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	d7 c0       	rjmp	.+430    	; 0x1f1c4 <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	d5 c0       	rjmp	.+426    	; 0x1f1c4 <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	d3 c0       	rjmp	.+422    	; 0x1f1c4 <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	d1 c0       	rjmp	.+418    	; 0x1f1c4 <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	cf c0       	rjmp	.+414    	; 0x1f1c4 <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	cd c0       	rjmp	.+410    	; 0x1f1c4 <__bad_interrupt>
   1f02a:	00 00       	nop
   1f02c:	cb c0       	rjmp	.+406    	; 0x1f1c4 <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	c9 c0       	rjmp	.+402    	; 0x1f1c4 <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	c7 c0       	rjmp	.+398    	; 0x1f1c4 <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	c5 c0       	rjmp	.+394    	; 0x1f1c4 <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	c3 c0       	rjmp	.+390    	; 0x1f1c4 <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	c1 c0       	rjmp	.+386    	; 0x1f1c4 <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	bf c0       	rjmp	.+382    	; 0x1f1c4 <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	bd c0       	rjmp	.+378    	; 0x1f1c4 <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	bb c0       	rjmp	.+374    	; 0x1f1c4 <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	b9 c0       	rjmp	.+370    	; 0x1f1c4 <__bad_interrupt>
   1f052:	00 00       	nop
   1f054:	b7 c0       	rjmp	.+366    	; 0x1f1c4 <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	b5 c0       	rjmp	.+362    	; 0x1f1c4 <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	b3 c0       	rjmp	.+358    	; 0x1f1c4 <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	b1 c0       	rjmp	.+354    	; 0x1f1c4 <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	af c0       	rjmp	.+350    	; 0x1f1c4 <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	ad c0       	rjmp	.+346    	; 0x1f1c4 <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	ab c0       	rjmp	.+342    	; 0x1f1c4 <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	a9 c0       	rjmp	.+338    	; 0x1f1c4 <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	a7 c0       	rjmp	.+334    	; 0x1f1c4 <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	a5 c0       	rjmp	.+330    	; 0x1f1c4 <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	a3 c0       	rjmp	.+326    	; 0x1f1c4 <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	a1 c0       	rjmp	.+322    	; 0x1f1c4 <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	9f c0       	rjmp	.+318    	; 0x1f1c4 <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	9d c0       	rjmp	.+314    	; 0x1f1c4 <__bad_interrupt>
	...

0001f08c <tftp_invalid_image_packet>:
   1f08c:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
   1f09c:	67 65 20 66 69 6c 65 00                             ge file.

0001f0a4 <tftp_unknown_error_packet>:
   1f0a4:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0001f0af <tftp_full_error_packet>:
   1f0af:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

0001f0b9 <tftp_opcode_error_packet>:
   1f0b9:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

0001f0c6 <__ctors_end>:
   1f0c6:	11 24       	eor	r1, r1
   1f0c8:	1f be       	out	0x3f, r1	; 63
   1f0ca:	cf ef       	ldi	r28, 0xFF	; 255
   1f0cc:	d0 e4       	ldi	r29, 0x40	; 64
   1f0ce:	de bf       	out	0x3e, r29	; 62
   1f0d0:	cd bf       	out	0x3d, r28	; 61

0001f0d2 <__do_copy_data>:
   1f0d2:	11 e0       	ldi	r17, 0x01	; 1
   1f0d4:	a0 e0       	ldi	r26, 0x00	; 0
   1f0d6:	b1 e0       	ldi	r27, 0x01	; 1
   1f0d8:	e6 e2       	ldi	r30, 0x26	; 38
   1f0da:	fc ef       	ldi	r31, 0xFC	; 252
   1f0dc:	01 e0       	ldi	r16, 0x01	; 1
   1f0de:	0b bf       	out	0x3b, r16	; 59
   1f0e0:	02 c0       	rjmp	.+4      	; 0x1f0e6 <__do_copy_data+0x14>
   1f0e2:	07 90       	elpm	r0, Z+
   1f0e4:	0d 92       	st	X+, r0
   1f0e6:	a0 32       	cpi	r26, 0x20	; 32
   1f0e8:	b1 07       	cpc	r27, r17
   1f0ea:	d9 f7       	brne	.-10     	; 0x1f0e2 <__do_copy_data+0x10>
   1f0ec:	1b be       	out	0x3b, r1	; 59

0001f0ee <__do_clear_bss>:
   1f0ee:	11 e0       	ldi	r17, 0x01	; 1
   1f0f0:	a0 e2       	ldi	r26, 0x20	; 32
   1f0f2:	b1 e0       	ldi	r27, 0x01	; 1
   1f0f4:	01 c0       	rjmp	.+2      	; 0x1f0f8 <.do_clear_bss_start>

0001f0f6 <.do_clear_bss_loop>:
   1f0f6:	1d 92       	st	X+, r1

0001f0f8 <.do_clear_bss_start>:
   1f0f8:	af 32       	cpi	r26, 0x2F	; 47
   1f0fa:	b1 07       	cpc	r27, r17
   1f0fc:	e1 f7       	brne	.-8      	; 0x1f0f6 <.do_clear_bss_loop>
   1f0fe:	01 d0       	rcall	.+2      	; 0x1f102 <main>
   1f100:	90 c5       	rjmp	.+2848   	; 0x1fc22 <_exit>

0001f102 <main>:

int main(void)
{
	/* Disable the watchdog timer to prevent
	 * eternal reset loop of doom and despair */
	uint8_t ch = MCUSR;
   1f102:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
   1f104:	14 be       	out	0x34, r1	; 52
	wdt_disable();
   1f106:	98 e1       	ldi	r25, 0x18	; 24
   1f108:	0f b6       	in	r0, 0x3f	; 63
   1f10a:	f8 94       	cli
   1f10c:	90 93 60 00 	sts	0x0060, r25
   1f110:	10 92 60 00 	sts	0x0060, r1
   1f114:	0f be       	out	0x3f, r0	; 63
	if (!(ch & _BV(EXTRF))) appStart(); //if not external (hard reset) skip bootloader
   1f116:	81 fd       	sbrc	r24, 1
   1f118:	01 c0       	rjmp	.+2      	; 0x1f11c <main+0x1a>
   1f11a:	3f d4       	rcall	.+2174   	; 0x1f99a <appStart>
   1f11c:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   1f11e:	95 ea       	ldi	r25, 0xA5	; 165
   1f120:	ae e0       	ldi	r26, 0x0E	; 14
   1f122:	81 50       	subi	r24, 0x01	; 1
   1f124:	90 40       	sbci	r25, 0x00	; 0
   1f126:	a0 40       	sbci	r26, 0x00	; 0
   1f128:	e1 f7       	brne	.-8      	; 0x1f122 <main+0x20>
   1f12a:	00 c0       	rjmp	.+0      	; 0x1f12c <main+0x2a>
   1f12c:	00 00       	nop
   1f12e:	11 24       	eor	r1, r1
	/* This code makes the following assumptions:
	 * No interrupts will execute
	 * SP points to RAMEND
	 * r1 contains zero */
	//cli();
	asm volatile("clr __zero_reg__");
   1f130:	85 e0       	ldi	r24, 0x05	; 5
	// 0x02 -> ClkIO/8 -> 500ns period, 32ms max
	// 0X03 -> ClkIO/64 -> 4us period, 256ms max
	// 0x04 -> ClkIO/256 -> 16us period, 1024ms max
	// 0x05 -> ClkIO/1024 -> 64us period, 4096ms max
	// Set up Timer 1 as timekeeper for LED flashing
	TCCR1B = _BV(CS12) | _BV(CS10); // Same thing as TCCR1B = 0x05;
   1f132:	80 93 81 00 	sts	0x0081, r24
   1f136:	80 e0       	ldi	r24, 0x00	; 0

	/* Write version information in the EEPROM */
	if(eeprom_read_byte(EEPROM_MAJVER) != ARIADNE_MAJVER)
   1f138:	90 e0       	ldi	r25, 0x00	; 0
   1f13a:	5d d5       	rcall	.+2746   	; 0x1fbf6 <__eerd_byte_m1284p>
   1f13c:	88 23       	and	r24, r24
   1f13e:	21 f0       	breq	.+8      	; 0x1f148 <main+0x46>
   1f140:	80 e0       	ldi	r24, 0x00	; 0
   1f142:	90 e0       	ldi	r25, 0x00	; 0
		eeprom_write_byte(EEPROM_MAJVER, ARIADNE_MAJVER);
   1f144:	60 e0       	ldi	r22, 0x00	; 0
   1f146:	5f d5       	rcall	.+2750   	; 0x1fc06 <__eewr_byte_m1284p>
   1f148:	81 e0       	ldi	r24, 0x01	; 1
   1f14a:	90 e0       	ldi	r25, 0x00	; 0
   1f14c:	54 d5       	rcall	.+2728   	; 0x1fbf6 <__eerd_byte_m1284p>
	if(eeprom_read_byte(EEPROM_MINVER) != ARIADNE_MINVER)
   1f14e:	84 30       	cpi	r24, 0x04	; 4
   1f150:	21 f0       	breq	.+8      	; 0x1f15a <main+0x58>
   1f152:	81 e0       	ldi	r24, 0x01	; 1
   1f154:	90 e0       	ldi	r25, 0x00	; 0
   1f156:	64 e0       	ldi	r22, 0x04	; 4
   1f158:	56 d5       	rcall	.+2732   	; 0x1fc06 <__eewr_byte_m1284p>
		eeprom_write_byte(EEPROM_MINVER, ARIADNE_MINVER);
   1f15a:	ad d3       	rcall	.+1882   	; 0x1f8b6 <serialInit>
   1f15c:	93 d0       	rcall	.+294    	; 0x1f284 <spiInit>
   1f15e:	9b d0       	rcall	.+310    	; 0x1f296 <netInit>
   1f160:	a2 d2       	rcall	.+1348   	; 0x1f6a6 <tftpInit>
   1f162:	10 92 2d 01 	sts	0x012D, r1

	//Initialize UART communication
	serialInit();
   1f166:	10 92 2e 01 	sts	0x012E, r1
		buttonInit();
	)

	/** Initalize SPI communication */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_SPI);)
	spiInit();
   1f16a:	c3 e0       	ldi	r28, 0x03	; 3
	/** Initialize networking */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_NET);)
	netInit();
   1f16c:	cc 24       	eor	r12, r12
   1f16e:	dd 24       	eor	r13, r13

	// Initialize the UDP socket for tftp
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_TFTP);)
	tftpInit();
   1f170:	76 01       	movw	r14, r12
   1f172:	80 91 2d 01 	lds	r24, 0x012D
#if defined(ANNOUNCE)
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_ANN);)
	announceInit();
#endif

	serialFlashing = FALSE;
   1f176:	88 23       	and	r24, r24
	tftpFlashing = FALSE;
   1f178:	19 f4       	brne	.+6      	; 0x1f180 <main+0x7e>
   1f17a:	b8 d2       	rcall	.+1392   	; 0x1f6ec <tftpPoll>
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
				// Delete first page of flash memory
				boot_page_erase(0);
   1f17c:	88 23       	and	r24, r24
   1f17e:	f9 f0       	breq	.+62     	; 0x1f1be <main+0xbc>
   1f180:	80 91 2e 01 	lds	r24, 0x012E
	serialFlashing = FALSE;
	tftpFlashing = FALSE;

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
   1f184:	88 23       	and	r24, r24
   1f186:	19 f4       	brne	.+6      	; 0x1f18e <main+0x8c>
   1f188:	bc d3       	rcall	.+1912   	; 0x1f902 <serialPoll>
   1f18a:	88 23       	and	r24, r24
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
   1f18c:	c1 f0       	breq	.+48     	; 0x1f1be <main+0xbc>
   1f18e:	ee d3       	rcall	.+2012   	; 0x1f96c <timedOut>
   1f190:	88 23       	and	r24, r24
   1f192:	99 f0       	breq	.+38     	; 0x1f1ba <main+0xb8>
				break;

		// If there is no tftp flashing, poll serial
		if(!tftpFlashing)
   1f194:	82 e0       	ldi	r24, 0x02	; 2
   1f196:	90 e0       	ldi	r25, 0x00	; 0
   1f198:	2e d5       	rcall	.+2652   	; 0x1fbf6 <__eerd_byte_m1284p>
   1f19a:	8e 3e       	cpi	r24, 0xEE	; 238
			// If flashing is done exit
			if(serialPoll() == 0)
   1f19c:	81 f0       	breq	.+32     	; 0x1f1be <main+0xbc>
   1f19e:	80 91 2e 01 	lds	r24, 0x012E
   1f1a2:	81 30       	cpi	r24, 0x01	; 1
		/* As explained above this goes out */
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if(timedOut()) {
   1f1a4:	51 f4       	brne	.+20     	; 0x1f1ba <main+0xb8>
   1f1a6:	f6 01       	movw	r30, r12
   1f1a8:	e0 92 5b 00 	sts	0x005B, r14
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;
   1f1ac:	c0 93 57 00 	sts	0x0057, r28
   1f1b0:	e8 95       	spm
   1f1b2:	79 d2       	rcall	.+1266   	; 0x1f6a6 <tftpInit>
   1f1b4:	d2 d3       	rcall	.+1956   	; 0x1f95a <resetTick>
   1f1b6:	10 92 2e 01 	sts	0x012E, r1

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
   1f1ba:	ae d3       	rcall	.+1884   	; 0x1f918 <updateLed>
   1f1bc:	da cf       	rjmp	.-76     	; 0x1f172 <main+0x70>
   1f1be:	ed d3       	rcall	.+2010   	; 0x1f99a <appStart>
				// Delete first page of flash memory
				boot_page_erase(0);
   1f1c0:	80 e0       	ldi	r24, 0x00	; 0
   1f1c2:	90 e0       	ldi	r25, 0x00	; 0

0001f1c4 <__bad_interrupt>:
   1f1c4:	1d cf       	rjmp	.-454    	; 0x1f000 <__vectors>

0001f1c6 <spiWriteReg>:
		tracenum(address);
		tracePGM(mDebugSpi_COMMA);
		tracenum(value);
	)

	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
   1f1c6:	20 e5       	ldi	r18, 0x50	; 80
   1f1c8:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   1f1ca:	2c 98       	cbi	0x05, 4	; 5
	SPDR = 0x01;
	while(!(SPSR & _BV(SPIF)));

#elif (W5500 > 0)

	SPDR = address >> 8;
   1f1cc:	29 2f       	mov	r18, r25
   1f1ce:	33 27       	eor	r19, r19
   1f1d0:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1d2:	0d b4       	in	r0, 0x2d	; 45
   1f1d4:	07 fe       	sbrs	r0, 7
   1f1d6:	fd cf       	rjmp	.-6      	; 0x1f1d2 <spiWriteReg+0xc>

	SPDR = address & 0xff;
   1f1d8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1da:	0d b4       	in	r0, 0x2d	; 45
   1f1dc:	07 fe       	sbrs	r0, 7
   1f1de:	fd cf       	rjmp	.-6      	; 0x1f1da <spiWriteReg+0x14>

	SPDR = cb;  //Socket 3 BSB Write 0x6D Selects Socket 3 Register, write mode, 1 byte data length
   1f1e0:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1e2:	0d b4       	in	r0, 0x2d	; 45
   1f1e4:	07 fe       	sbrs	r0, 7
   1f1e6:	fd cf       	rjmp	.-6      	; 0x1f1e2 <spiWriteReg+0x1c>
	SPDR = address & 0xff;
	while(!(SPSR & _BV(SPIF)));

#endif

	SPDR = value;
   1f1e8:	4e bd       	out	0x2e, r20	; 46
	while(!(SPSR & _BV(SPIF)));
   1f1ea:	0d b4       	in	r0, 0x2d	; 45
   1f1ec:	07 fe       	sbrs	r0, 7
   1f1ee:	fd cf       	rjmp	.-6      	; 0x1f1ea <spiWriteReg+0x24>

	SS_HIGH();
   1f1f0:	2c 9a       	sbi	0x05, 4	; 5
	cb = 0; //prevents compiler whining about unused cb variable
	SPCR = cb; // Turn off SPI	
   1f1f2:	1c bc       	out	0x2c, r1	; 44

}
   1f1f4:	08 95       	ret

0001f1f6 <spiWriteWord>:

void spiWriteWord(uint16_t address, uint8_t cb, uint16_t value)
{
   1f1f6:	ef 92       	push	r14
   1f1f8:	ff 92       	push	r15
   1f1fa:	1f 93       	push	r17
   1f1fc:	cf 93       	push	r28
   1f1fe:	df 93       	push	r29
   1f200:	ec 01       	movw	r28, r24
   1f202:	16 2f       	mov	r17, r22
   1f204:	7a 01       	movw	r14, r20
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, cb, value >> 8);
   1f206:	45 2f       	mov	r20, r21
   1f208:	55 27       	eor	r21, r21
   1f20a:	dd df       	rcall	.-70     	; 0x1f1c6 <spiWriteReg>
   1f20c:	ce 01       	movw	r24, r28
	spiWriteReg(address, cb, value & 0xff);
   1f20e:	01 96       	adiw	r24, 0x01	; 1
   1f210:	61 2f       	mov	r22, r17
   1f212:	4e 2d       	mov	r20, r14
   1f214:	d8 df       	rcall	.-80     	; 0x1f1c6 <spiWriteReg>
   1f216:	df 91       	pop	r29
   1f218:	cf 91       	pop	r28
}
   1f21a:	1f 91       	pop	r17
   1f21c:	ff 90       	pop	r15
   1f21e:	ef 90       	pop	r14
   1f220:	08 95       	ret

0001f222 <spiReadReg>:
   1f222:	20 e5       	ldi	r18, 0x50	; 80
   1f224:	2c bd       	out	0x2c, r18	; 44
	)
	#endif

	uint8_t returnValue;

	SPCR = _BV(SPE) | _BV(MSTR);
   1f226:	2c 98       	cbi	0x05, 4	; 5
   1f228:	29 2f       	mov	r18, r25
	SS_LOW();
   1f22a:	33 27       	eor	r19, r19
	while(!(SPSR & _BV(SPIF)));

#elif (W5500 > 0)
//W5500 code

	SPDR = address >> 8;
   1f22c:	2e bd       	out	0x2e, r18	; 46
   1f22e:	0d b4       	in	r0, 0x2d	; 45
   1f230:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
   1f232:	fd cf       	rjmp	.-6      	; 0x1f22e <spiReadReg+0xc>
   1f234:	8e bd       	out	0x2e, r24	; 46
   1f236:	0d b4       	in	r0, 0x2d	; 45

	SPDR = address & 0xff;
   1f238:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
   1f23a:	fd cf       	rjmp	.-6      	; 0x1f236 <spiReadReg+0x14>
   1f23c:	6e bd       	out	0x2e, r22	; 46
   1f23e:	0d b4       	in	r0, 0x2d	; 45

	SPDR = cb;  //Socket 3 BSB Read 0x69 Selects Socket 3 Register, read mode, 1 byte data length
   1f240:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
   1f242:	fd cf       	rjmp	.-6      	; 0x1f23e <spiReadReg+0x1c>
   1f244:	1e bc       	out	0x2e, r1	; 46
   1f246:	0d b4       	in	r0, 0x2d	; 45
	SPDR = address & 0xff;
	while(!(SPSR & _BV(SPIF)));

#endif

	SPDR = 0;
   1f248:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
   1f24a:	fd cf       	rjmp	.-6      	; 0x1f246 <spiReadReg+0x24>
   1f24c:	2c 9a       	sbi	0x05, 4	; 5
   1f24e:	8e b5       	in	r24, 0x2e	; 46

	SS_HIGH();
   1f250:	1c bc       	out	0x2c, r1	; 44
	returnValue = SPDR;
   1f252:	08 95       	ret

0001f254 <spiReadWord>:

	cb = 0; //prevents compiler whining about unused cb variable
	SPCR = cb; // Turn off SPI
   1f254:	0f 93       	push	r16

	return(returnValue);
}
   1f256:	1f 93       	push	r17

uint16_t spiReadWord(uint16_t address, uint8_t cb)
{
   1f258:	cf 93       	push	r28
   1f25a:	df 93       	push	r29
   1f25c:	ec 01       	movw	r28, r24
   1f25e:	16 2f       	mov	r17, r22
   1f260:	e0 df       	rcall	.-64     	; 0x1f222 <spiReadReg>
   1f262:	08 2f       	mov	r16, r24
	// Read uint16_t from Ethernet controller
	return((spiReadReg(address, cb) << 8) | spiReadReg(address + 1, cb));
   1f264:	ce 01       	movw	r24, r28
   1f266:	01 96       	adiw	r24, 0x01	; 1
   1f268:	61 2f       	mov	r22, r17
   1f26a:	db df       	rcall	.-74     	; 0x1f222 <spiReadReg>
   1f26c:	20 2f       	mov	r18, r16
   1f26e:	30 e0       	ldi	r19, 0x00	; 0
   1f270:	32 2f       	mov	r19, r18
   1f272:	22 27       	eor	r18, r18
   1f274:	90 e0       	ldi	r25, 0x00	; 0
   1f276:	82 2b       	or	r24, r18
   1f278:	93 2b       	or	r25, r19
   1f27a:	df 91       	pop	r29
   1f27c:	cf 91       	pop	r28
}
   1f27e:	1f 91       	pop	r17
   1f280:	0f 91       	pop	r16
   1f282:	08 95       	ret

0001f284 <spiInit>:
   1f284:	80 ef       	ldi	r24, 0xF0	; 240
   1f286:	85 b9       	out	0x05, r24	; 5
   1f288:	80 eb       	ldi	r24, 0xB0	; 176
   1f28a:	84 b9       	out	0x04, r24	; 4
	 * At this stage all pins are set to HIGH. This in fact DISABLES SPI for both Ethernet and SD.
	 * SS pin for ethernet is pulled low just in time for reading or writing data inside those
	 * functions. */

	/** Set SPI pins high */
	SPI_PORT = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
   1f28c:	47 9a       	sbi	0x08, 7	; 8
   1f28e:	3f 9a       	sbi	0x07, 7	; 7
	/** Set SPI pins as output */
	SPI_DDR = _BV(SCK) | _BV(MOSI) | _BV(SS);
   1f290:	81 e0       	ldi	r24, 0x01	; 1
   1f292:	8d bd       	out	0x2d, r24	; 45
	ETH_DDR |= _BV(ETH_SS);
	#endif

	/** Disable SD card */
	/** Set SD SS pin high */
	SD_PORT |= _BV(SD_SS);
   1f294:	08 95       	ret

0001f296 <netInit>:
	0x08,         // RCR Retry Count Register (0x001B)
};


void netInit(void)
{
   1f296:	0f 93       	push	r16
   1f298:	1f 93       	push	r17
   1f29a:	cf 93       	push	r28
   1f29c:	df 93       	push	r29
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
   1f29e:	83 e0       	ldi	r24, 0x03	; 3
   1f2a0:	90 e0       	ldi	r25, 0x00	; 0
   1f2a2:	a9 d4       	rcall	.+2386   	; 0x1fbf6 <__eerd_byte_m1284p>
   1f2a4:	85 35       	cpi	r24, 0x55	; 85
   1f2a6:	91 f4       	brne	.+36     	; 0x1f2cc <netInit+0x36>
   1f2a8:	84 e0       	ldi	r24, 0x04	; 4
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
   1f2aa:	90 e0       	ldi	r25, 0x00	; 0
   1f2ac:	a4 d4       	rcall	.+2376   	; 0x1fbf6 <__eerd_byte_m1284p>
   1f2ae:	8a 3a       	cpi	r24, 0xAA	; 170
   1f2b0:	69 f4       	brne	.+26     	; 0x1f2cc <netInit+0x36>
   1f2b2:	01 e0       	ldi	r16, 0x01	; 1
   1f2b4:	11 e0       	ldi	r17, 0x01	; 1
   1f2b6:	c5 e0       	ldi	r28, 0x05	; 5
   1f2b8:	d0 e0       	ldi	r29, 0x00	; 0
   1f2ba:	ce 01       	movw	r24, r28
   1f2bc:	9c d4       	rcall	.+2360   	; 0x1fbf6 <__eerd_byte_m1284p>

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
   1f2be:	f8 01       	movw	r30, r16
   1f2c0:	81 93       	st	Z+, r24
   1f2c2:	8f 01       	movw	r16, r30
   1f2c4:	21 96       	adiw	r28, 0x01	; 1
   1f2c6:	c7 31       	cpi	r28, 0x17	; 23
   1f2c8:	d1 05       	cpc	r29, r1
   1f2ca:	b9 f7       	brne	.-18     	; 0x1f2ba <netInit+0x24>
	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
   1f2cc:	00 e0       	ldi	r16, 0x00	; 0
   1f2ce:	11 e0       	ldi	r17, 0x01	; 1
   1f2d0:	c0 e0       	ldi	r28, 0x00	; 0
   1f2d2:	d0 e0       	ldi	r29, 0x00	; 0
   1f2d4:	f8 01       	movw	r30, r16
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
   1f2d6:	41 91       	ld	r20, Z+
   1f2d8:	8f 01       	movw	r16, r30
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		spiWriteReg(i, 0x04, registerBuffer[i]);
   1f2da:	ce 01       	movw	r24, r28
   1f2dc:	64 e0       	ldi	r22, 0x04	; 4
   1f2de:	73 df       	rcall	.-282    	; 0x1f1c6 <spiWriteReg>
   1f2e0:	21 96       	adiw	r28, 0x01	; 1
   1f2e2:	cc 31       	cpi	r28, 0x1C	; 28
   1f2e4:	d1 05       	cpc	r29, r1
   1f2e6:	b1 f7       	brne	.-20     	; 0x1f2d4 <netInit+0x3e>
   1f2e8:	c0 e0       	ldi	r28, 0x00	; 0
			if(i != 14) putch(0x2E);
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
   1f2ea:	0c 2f       	mov	r16, r28
   1f2ec:	02 95       	swap	r16
   1f2ee:	00 0f       	add	r16, r16
   1f2f0:	00 7e       	andi	r16, 0xE0	; 224
		spiWriteReg(i, 0x04, registerBuffer[i]);
	
	for (int i=0; i<8; i++) {
        	uint8_t cntl_byte = (0x0C + (i<<5));
   1f2f2:	04 5f       	subi	r16, 0xF4	; 244
   1f2f4:	8e e1       	ldi	r24, 0x1E	; 30
   1f2f6:	90 e0       	ldi	r25, 0x00	; 0
   1f2f8:	60 2f       	mov	r22, r16
   1f2fa:	42 e0       	ldi	r20, 0x02	; 2
        	spiWriteReg(0x1E, cntl_byte, 2);//0x1E - Sn_RXBUF_SIZE
   1f2fc:	64 df       	rcall	.-312    	; 0x1f1c6 <spiWriteReg>
   1f2fe:	8f e1       	ldi	r24, 0x1F	; 31
   1f300:	90 e0       	ldi	r25, 0x00	; 0
   1f302:	60 2f       	mov	r22, r16
   1f304:	42 e0       	ldi	r20, 0x02	; 2
   1f306:	5f df       	rcall	.-322    	; 0x1f1c6 <spiWriteReg>
        	spiWriteReg(0x1F, cntl_byte, 2);//0x1F - Sn_TXBUF_SIZE
   1f308:	cf 5f       	subi	r28, 0xFF	; 255
   1f30a:	c8 30       	cpi	r28, 0x08	; 8
   1f30c:	71 f7       	brne	.-36     	; 0x1f2ea <netInit+0x54>
   1f30e:	df 91       	pop	r29
   1f310:	cf 91       	pop	r28
   1f312:	1f 91       	pop	r17
   1f314:	0f 91       	pop	r16

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		spiWriteReg(i, 0x04, registerBuffer[i]);
	
	for (int i=0; i<8; i++) {
   1f316:	08 95       	ret

0001f318 <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
   1f318:	cf 93       	push	r28
   1f31a:	df 93       	push	r29
   1f31c:	ec 01       	movw	r28, r24
		tracePGMlnTftp(mDebugTftp_SOCK);
		tracenum(port);
	)


	spiWriteReg(REG_S3_CR, S3_W_CB, CR_CLOSE);
   1f31e:	81 e0       	ldi	r24, 0x01	; 1
   1f320:	90 e0       	ldi	r25, 0x00	; 0
   1f322:	6c e6       	ldi	r22, 0x6C	; 108
   1f324:	40 e1       	ldi	r20, 0x10	; 16
   1f326:	4f df       	rcall	.-354    	; 0x1f1c6 <spiWriteReg>
   1f328:	81 e0       	ldi	r24, 0x01	; 1
        while(spiReadReg(REG_S3_CR, S3_R_CB)) {
   1f32a:	90 e0       	ldi	r25, 0x00	; 0
   1f32c:	68 e6       	ldi	r22, 0x68	; 104
   1f32e:	79 df       	rcall	.-270    	; 0x1f222 <spiReadReg>
   1f330:	88 23       	and	r24, r24
   1f332:	d1 f7       	brne	.-12     	; 0x1f328 <sockInit+0x10>
   1f334:	82 e0       	ldi	r24, 0x02	; 2
   1f336:	90 e0       	ldi	r25, 0x00	; 0
        	//wait for command to complete	
        }  
        
	do {
                // Write interrupt
		spiWriteReg(REG_S3_IR, S3_W_CB, 0xFF);
   1f338:	6c e6       	ldi	r22, 0x6C	; 108
   1f33a:	4f ef       	ldi	r20, 0xFF	; 255
   1f33c:	44 df       	rcall	.-376    	; 0x1f1c6 <spiWriteReg>
   1f33e:	80 e0       	ldi	r24, 0x00	; 0
   1f340:	90 e0       	ldi	r25, 0x00	; 0
   1f342:	6c e6       	ldi	r22, 0x6C	; 108
                // Write mode
                spiWriteReg(REG_S3_MR, S3_W_CB, MR_UDP);
   1f344:	42 e0       	ldi	r20, 0x02	; 2
   1f346:	3f df       	rcall	.-386    	; 0x1f1c6 <spiWriteReg>
   1f348:	84 e0       	ldi	r24, 0x04	; 4
   1f34a:	90 e0       	ldi	r25, 0x00	; 0
   1f34c:	6c e6       	ldi	r22, 0x6C	; 108
   1f34e:	ae 01       	movw	r20, r28
                // Write TFTP Port
		spiWriteWord(REG_S3_PORT0, S3_W_CB, port);
   1f350:	52 df       	rcall	.-348    	; 0x1f1f6 <spiWriteWord>
   1f352:	81 e0       	ldi	r24, 0x01	; 1
   1f354:	90 e0       	ldi	r25, 0x00	; 0
   1f356:	6c e6       	ldi	r22, 0x6C	; 108
   1f358:	41 e0       	ldi	r20, 0x01	; 1
   1f35a:	35 df       	rcall	.-406    	; 0x1f1c6 <spiWriteReg>
		// Open Socket
        	spiWriteReg(REG_S3_CR, S3_W_CB, CR_OPEN);
   1f35c:	81 e0       	ldi	r24, 0x01	; 1
   1f35e:	90 e0       	ldi	r25, 0x00	; 0
   1f360:	68 e6       	ldi	r22, 0x68	; 104
   1f362:	5f df       	rcall	.-322    	; 0x1f222 <spiReadReg>
   1f364:	88 23       	and	r24, r24
   1f366:	d1 f7       	brne	.-12     	; 0x1f35c <sockInit+0x44>
        	while(spiReadReg(REG_S3_CR, S3_R_CB)) {
   1f368:	83 e0       	ldi	r24, 0x03	; 3
   1f36a:	90 e0       	ldi	r25, 0x00	; 0
   1f36c:	68 e6       	ldi	r22, 0x68	; 104
   1f36e:	59 df       	rcall	.-334    	; 0x1f222 <spiReadReg>
   1f370:	82 32       	cpi	r24, 0x22	; 34
   1f372:	29 f0       	breq	.+10     	; 0x1f37e <sockInit+0x66>
   1f374:	81 e0       	ldi	r24, 0x01	; 1
        		//wait for command to complete	
 		} 
		// Read Status
		if(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP)
   1f376:	90 e0       	ldi	r25, 0x00	; 0
   1f378:	6c e6       	ldi	r22, 0x6C	; 108
   1f37a:	40 e1       	ldi	r20, 0x10	; 16
   1f37c:	24 df       	rcall	.-440    	; 0x1f1c6 <spiWriteReg>
   1f37e:	83 e0       	ldi	r24, 0x03	; 3
   1f380:	90 e0       	ldi	r25, 0x00	; 0
   1f382:	68 e6       	ldi	r22, 0x68	; 104
			// Close Socket if it wasn't initialized correctly
			spiWriteReg(REG_S3_CR, S3_W_CB, CR_CLOSE);
   1f384:	4e df       	rcall	.-356    	; 0x1f222 <spiReadReg>
   1f386:	82 32       	cpi	r24, 0x22	; 34
   1f388:	a9 f6       	brne	.-86     	; 0x1f334 <sockInit+0x1c>
   1f38a:	df 91       	pop	r29
   1f38c:	cf 91       	pop	r28
   1f38e:	08 95       	ret

0001f390 <processPacket>:


		// If socket correctly opened continue
	} while(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP);
   1f390:	2f 92       	push	r2
   1f392:	3f 92       	push	r3
   1f394:	4f 92       	push	r4
   1f396:	5f 92       	push	r5
   1f398:	6f 92       	push	r6
   1f39a:	7f 92       	push	r7
   1f39c:	8f 92       	push	r8
}
   1f39e:	9f 92       	push	r9
   1f3a0:	af 92       	push	r10
   1f3a2:	bf 92       	push	r11
#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
#endif
{
   1f3a4:	cf 92       	push	r12
   1f3a6:	df 92       	push	r13
   1f3a8:	ef 92       	push	r14
   1f3aa:	ff 92       	push	r15
   1f3ac:	0f 93       	push	r16
   1f3ae:	1f 93       	push	r17
   1f3b0:	cf 93       	push	r28
   1f3b2:	df 93       	push	r29
   1f3b4:	cd b7       	in	r28, 0x3d	; 61
   1f3b6:	de b7       	in	r29, 0x3e	; 62
   1f3b8:	cc 50       	subi	r28, 0x0C	; 12
   1f3ba:	d2 40       	sbci	r29, 0x02	; 2
   1f3bc:	de bf       	out	0x3e, r29	; 62
   1f3be:	cd bf       	out	0x3d, r28	; 61
   1f3c0:	88 e2       	ldi	r24, 0x28	; 40
   1f3c2:	90 e0       	ldi	r25, 0x00	; 0
   1f3c4:	68 e6       	ldi	r22, 0x68	; 104
   1f3c6:	46 df       	rcall	.-372    	; 0x1f254 <spiReadWord>
   1f3c8:	ac 01       	movw	r20, r24
   1f3ca:	fd e0       	ldi	r31, 0x0D	; 13
   1f3cc:	cf 2e       	mov	r12, r31
   1f3ce:	f2 e0       	ldi	r31, 0x02	; 2
   1f3d0:	df 2e       	mov	r13, r31
   1f3d2:	cc 0e       	add	r12, r28

		DBG_BTN(button();)
	)

	// Read data from chip to buffer
	readPointer = spiReadWord(REG_S3_RX_RD0, S3_R_CB);
   1f3d4:	dd 1e       	adc	r13, r29
   1f3d6:	7e 01       	movw	r14, r28
   1f3d8:	08 94       	sec
   1f3da:	e1 1c       	adc	r14, r1
   1f3dc:	f1 1c       	adc	r15, r1
   1f3de:	10 c0       	rjmp	.+32     	; 0x1f400 <processPacket+0x70>


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
   1f3e0:	8a 01       	movw	r16, r20
   1f3e2:	0f 5f       	subi	r16, 0xFF	; 255
   1f3e4:	1f 4f       	sbci	r17, 0xFF	; 255
   1f3e6:	ca 01       	movw	r24, r20
   1f3e8:	68 e7       	ldi	r22, 0x78	; 120
   1f3ea:	1b df       	rcall	.-458    	; 0x1f222 <spiReadReg>
   1f3ec:	d7 01       	movw	r26, r14
   1f3ee:	8d 93       	st	X+, r24
   1f3f0:	7d 01       	movw	r14, r26
   1f3f2:	bf ef       	ldi	r27, 0xFF	; 255
   1f3f4:	0f 3f       	cpi	r16, 0xFF	; 255
			}
		)

#if (W5500 > 0)

		*bufPtr++ = spiReadReg(readPointer++, S3_RXBUF_CB);
   1f3f6:	1b 07       	cpc	r17, r27
   1f3f8:	11 f4       	brne	.+4      	; 0x1f3fe <processPacket+0x6e>
   1f3fa:	00 e0       	ldi	r16, 0x00	; 0
   1f3fc:	10 e0       	ldi	r17, 0x00	; 0
   1f3fe:	a8 01       	movw	r20, r16
   1f400:	ec 14       	cp	r14, r12
   1f402:	fd 04       	cpc	r15, r13
   1f404:	69 f7       	brne	.-38     	; 0x1f3e0 <processPacket+0x50>
   1f406:	88 e2       	ldi	r24, 0x28	; 40
   1f408:	90 e0       	ldi	r25, 0x00	; 0

		if(readPointer == 0xFFFF) readPointer = 0x0000; //changed 0c0800 to 0xFFFF, fixes a 4th packet retransmit bug. upload speed changed from 500sec to 90sec for 100kb program
   1f40a:	6c e6       	ldi	r22, 0x6C	; 108
   1f40c:	f4 de       	rcall	.-536    	; 0x1f1f6 <spiWriteWord>
   1f40e:	81 e0       	ldi	r24, 0x01	; 1
   1f410:	90 e0       	ldi	r25, 0x00	; 0
   1f412:	6c e6       	ldi	r22, 0x6C	; 108
   1f414:	40 e4       	ldi	r20, 0x40	; 64


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
   1f416:	d7 de       	rcall	.-594    	; 0x1f1c6 <spiWriteReg>

	if(readPointer == 0) readPointer += S3_RX_START;

#endif

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
   1f418:	81 e0       	ldi	r24, 0x01	; 1
   1f41a:	90 e0       	ldi	r25, 0x00	; 0
   1f41c:	68 e6       	ldi	r22, 0x68	; 104

#endif

	}

	spiWriteWord(REG_S3_RX_RD0, S3_W_CB, readPointer);     // Write back new pointer
   1f41e:	01 df       	rcall	.-510    	; 0x1f222 <spiReadReg>
   1f420:	88 23       	and	r24, r24
   1f422:	d1 f7       	brne	.-12     	; 0x1f418 <processPacket+0x88>
   1f424:	8e 01       	movw	r16, r28
   1f426:	0f 5f       	subi	r16, 0xFF	; 255
	spiWriteReg(REG_S3_CR, S3_W_CB, CR_RECV);
   1f428:	1f 4f       	sbci	r17, 0xFF	; 255
   1f42a:	ec e0       	ldi	r30, 0x0C	; 12
   1f42c:	ee 2e       	mov	r14, r30
   1f42e:	f1 2c       	mov	r15, r1
   1f430:	f8 01       	movw	r30, r16
   1f432:	41 91       	ld	r20, Z+

	while(spiReadReg(REG_S3_CR, S3_R_CB));
   1f434:	8f 01       	movw	r16, r30
   1f436:	c7 01       	movw	r24, r14
   1f438:	6c e6       	ldi	r22, 0x6C	; 108
   1f43a:	c5 de       	rcall	.-630    	; 0x1f1c6 <spiWriteReg>
   1f43c:	08 94       	sec
   1f43e:	e1 1c       	adc	r14, r1
   1f440:	f1 1c       	adc	r15, r1
   1f442:	f2 e1       	ldi	r31, 0x12	; 18
   1f444:	ef 16       	cp	r14, r31
   1f446:	f1 04       	cpc	r15, r1
   1f448:	99 f7       	brne	.-26     	; 0x1f430 <processPacket+0xa0>
   1f44a:	ef 80       	ldd	r14, Y+7	; 0x07
   1f44c:	ff 24       	eor	r15, r15
	)

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) spiWriteReg(REG_S3_DIPR0 + i, S3_W_CB, buffer[i]);
   1f44e:	fe 2c       	mov	r15, r14
   1f450:	ee 24       	eor	r14, r14
   1f452:	88 85       	ldd	r24, Y+8	; 0x08
   1f454:	e8 0e       	add	r14, r24
   1f456:	f1 1c       	adc	r15, r1
   1f458:	89 85       	ldd	r24, Y+9	; 0x09
   1f45a:	90 e0       	ldi	r25, 0x00	; 0
   1f45c:	98 2f       	mov	r25, r24
   1f45e:	88 27       	eor	r24, r24
   1f460:	2a 85       	ldd	r18, Y+10	; 0x0a
   1f462:	82 0f       	add	r24, r18
   1f464:	91 1d       	adc	r25, r1
   1f466:	0b 85       	ldd	r16, Y+11	; 0x0b
   1f468:	10 e0       	ldi	r17, 0x00	; 0

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RADDR);)

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
   1f46a:	10 2f       	mov	r17, r16
   1f46c:	00 27       	eor	r16, r16
   1f46e:	2c 85       	ldd	r18, Y+12	; 0x0c
   1f470:	02 0f       	add	r16, r18
   1f472:	11 1d       	adc	r17, r1
   1f474:	83 30       	cpi	r24, 0x03	; 3
   1f476:	91 05       	cpc	r25, r1
	uint16_t tftpOpcode  = (buffer[8] << 8) + buffer[9];
   1f478:	89 f4       	brne	.+34     	; 0x1f49c <processPacket+0x10c>
   1f47a:	09 3f       	cpi	r16, 0xF9	; 249
   1f47c:	11 05       	cpc	r17, r1
   1f47e:	60 f4       	brcc	.+24     	; 0x1f498 <processPacket+0x108>
   1f480:	20 91 20 01 	lds	r18, 0x0120
   1f484:	30 91 21 01 	lds	r19, 0x0121
	uint16_t tftpBlock   = (buffer[10] << 8) + buffer[11];
   1f488:	02 17       	cp	r16, r18
   1f48a:	13 07       	cpc	r17, r19
   1f48c:	28 f0       	brcs	.+10     	; 0x1f498 <processPacket+0x108>
   1f48e:	2f 5f       	subi	r18, 0xFF	; 255
   1f490:	3f 4f       	sbci	r19, 0xFF	; 255
   1f492:	20 17       	cp	r18, r16
		tracenum(tftpOpcode);
		tracePGM(mDebugTftp_DLEN);
		tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
	)

	if((tftpOpcode == TFTP_OPCODE_DATA)
   1f494:	31 07       	cpc	r19, r17
   1f496:	10 f4       	brcc	.+4      	; 0x1f49c <processPacket+0x10c>
   1f498:	80 e0       	ldi	r24, 0x00	; 0
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
   1f49a:	90 e0       	ldi	r25, 0x00	; 0
   1f49c:	25 e0       	ldi	r18, 0x05	; 5
   1f49e:	e2 16       	cp	r14, r18
   1f4a0:	22 e0       	ldi	r18, 0x02	; 2
   1f4a2:	f2 06       	cpc	r15, r18
   1f4a4:	08 f0       	brcs	.+2      	; 0x1f4a8 <processPacket+0x118>
   1f4a6:	dd c0       	rjmp	.+442    	; 0x1f662 <processPacket+0x2d2>
   1f4a8:	83 30       	cpi	r24, 0x03	; 3
   1f4aa:	91 05       	cpc	r25, r1
   1f4ac:	29 f1       	breq	.+74     	; 0x1f4f8 <processPacket+0x168>
   1f4ae:	84 30       	cpi	r24, 0x04	; 4
   1f4b0:	91 05       	cpc	r25, r1
   1f4b2:	48 f4       	brcc	.+18     	; 0x1f4c6 <processPacket+0x136>
   1f4b4:	81 30       	cpi	r24, 0x01	; 1
   1f4b6:	91 05       	cpc	r25, r1
		tftpOpcode = TFTP_OPCODE_UKN;
   1f4b8:	09 f4       	brne	.+2      	; 0x1f4bc <processPacket+0x12c>
   1f4ba:	da c0       	rjmp	.+436    	; 0x1f670 <processPacket+0x2e0>

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   1f4bc:	82 30       	cpi	r24, 0x02	; 2
   1f4be:	91 05       	cpc	r25, r1
   1f4c0:	09 f0       	breq	.+2      	; 0x1f4c4 <processPacket+0x134>
   1f4c2:	cf c0       	rjmp	.+414    	; 0x1f662 <processPacket+0x2d2>
   1f4c4:	05 c0       	rjmp	.+10     	; 0x1f4d0 <processPacket+0x140>
   1f4c6:	86 30       	cpi	r24, 0x06	; 6

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   1f4c8:	91 05       	cpc	r25, r1
   1f4ca:	08 f0       	brcs	.+2      	; 0x1f4ce <processPacket+0x13e>
   1f4cc:	ca c0       	rjmp	.+404    	; 0x1f662 <processPacket+0x2d2>
   1f4ce:	d0 c0       	rjmp	.+416    	; 0x1f670 <processPacket+0x2e0>
   1f4d0:	44 d2       	rcall	.+1160   	; 0x1f95a <resetTick>
   1f4d2:	82 e0       	ldi	r24, 0x02	; 2
   1f4d4:	90 e0       	ldi	r25, 0x00	; 0
   1f4d6:	6f ef       	ldi	r22, 0xFF	; 255
   1f4d8:	96 d3       	rcall	.+1836   	; 0x1fc06 <__eewr_byte_m1284p>
   1f4da:	80 91 2b 01 	lds	r24, 0x012B
   1f4de:	90 91 2c 01 	lds	r25, 0x012C
   1f4e2:	1a df       	rcall	.-460    	; 0x1f318 <sockInit>
   1f4e4:	10 92 21 01 	sts	0x0121, r1
   1f4e8:	10 92 20 01 	sts	0x0120, r1
   1f4ec:	10 92 23 01 	sts	0x0123, r1
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
   1f4f0:	10 92 22 01 	sts	0x0122, r1

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPWRQ);)

			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
   1f4f4:	02 e0       	ldi	r16, 0x02	; 2
   1f4f6:	bf c0       	rjmp	.+382    	; 0x1f676 <processPacket+0x2e6>
   1f4f8:	30 d2       	rcall	.+1120   	; 0x1f95a <resetTick>
   1f4fa:	9c ef       	ldi	r25, 0xFC	; 252
   1f4fc:	89 2e       	mov	r8, r25

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   1f4fe:	9f ef       	ldi	r25, 0xFF	; 255
   1f500:	99 2e       	mov	r9, r25
   1f502:	8e 0c       	add	r8, r14
   1f504:	9f 1c       	adc	r9, r15
   1f506:	10 93 23 01 	sts	0x0123, r17
#else
				tracenum(tftpTransferPort);
#endif
			)

			lastPacket = highPacket = 0;
   1f50a:	00 93 22 01 	sts	0x0122, r16
   1f50e:	01 50       	subi	r16, 0x01	; 1
   1f510:	10 40       	sbci	r17, 0x00	; 0
   1f512:	68 01       	movw	r12, r16
   1f514:	ee 24       	eor	r14, r14
   1f516:	ff 24       	eor	r15, r15
   1f518:	29 e0       	ldi	r18, 0x09	; 9
			returnCode = ACK; // Send back acknowledge for packet 0
   1f51a:	cc 0c       	add	r12, r12
			break;
   1f51c:	dd 1c       	adc	r13, r13

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
   1f51e:	ee 1c       	adc	r14, r14
   1f520:	ff 1c       	adc	r15, r15

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPDATA);)

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
   1f522:	2a 95       	dec	r18
   1f524:	d1 f7       	brne	.-12     	; 0x1f51a <processPacket+0x18a>
   1f526:	8f ef       	ldi	r24, 0xFF	; 255
   1f528:	9f ef       	ldi	r25, 0xFF	; 255
   1f52a:	a0 e0       	ldi	r26, 0x00	; 0
   1f52c:	b0 e0       	ldi	r27, 0x00	; 0
			lastPacket = tftpBlock;
   1f52e:	c8 22       	and	r12, r24
   1f530:	d9 22       	and	r13, r25
   1f532:	ea 22       	and	r14, r26
   1f534:	fb 22       	and	r15, r27
#if defined(RAMPZ)
			writeAddr = (((address_t)((tftpBlock - 1)/0x80) << 16) | ((address_t)((tftpBlock - 1)%0x80) << 9));
   1f536:	00 0f       	add	r16, r16
   1f538:	01 2f       	mov	r16, r17
   1f53a:	00 1f       	adc	r16, r16
   1f53c:	11 0b       	sbc	r17, r17
   1f53e:	11 95       	neg	r17
   1f540:	20 e0       	ldi	r18, 0x00	; 0
   1f542:	30 e0       	ldi	r19, 0x00	; 0
   1f544:	98 01       	movw	r18, r16
   1f546:	11 27       	eor	r17, r17
   1f548:	00 27       	eor	r16, r16
   1f54a:	c0 2a       	or	r12, r16
   1f54c:	d1 2a       	or	r13, r17
   1f54e:	e2 2a       	or	r14, r18
   1f550:	f3 2a       	or	r15, r19
   1f552:	c4 01       	movw	r24, r8
   1f554:	a0 e0       	ldi	r26, 0x00	; 0
   1f556:	b0 e0       	ldi	r27, 0x00	; 0
   1f558:	8c 0d       	add	r24, r12
   1f55a:	9d 1d       	adc	r25, r13
   1f55c:	ae 1d       	adc	r26, r14
   1f55e:	bf 1d       	adc	r27, r15
   1f560:	81 30       	cpi	r24, 0x01	; 1
   1f562:	e0 ef       	ldi	r30, 0xF0	; 240
   1f564:	9e 07       	cpc	r25, r30
   1f566:	e1 e0       	ldi	r30, 0x01	; 1
   1f568:	ae 07       	cpc	r26, r30
   1f56a:	e0 e0       	ldi	r30, 0x00	; 0
   1f56c:	be 07       	cpc	r27, r30
   1f56e:	08 f0       	brcs	.+2      	; 0x1f572 <processPacket+0x1e2>
   1f570:	81 c0       	rjmp	.+258    	; 0x1f674 <processPacket+0x2e4>
   1f572:	f0 e0       	ldi	r31, 0x00	; 0
   1f574:	8f 16       	cp	r8, r31
   1f576:	f2 e0       	ldi	r31, 0x02	; 2
   1f578:	9f 06       	cpc	r9, r31
#else
			writeAddr = (address_t)((address_t)(tftpBlock - 1) << 9); // Flash write address for this block
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
   1f57a:	10 f4       	brcc	.+4      	; 0x1f580 <processPacket+0x1f0>
   1f57c:	04 e0       	ldi	r16, 0x04	; 4
   1f57e:	05 c0       	rjmp	.+10     	; 0x1f58a <processPacket+0x1fa>
   1f580:	02 e0       	ldi	r16, 0x02	; 2
   1f582:	03 c0       	rjmp	.+6      	; 0x1f58a <processPacket+0x1fa>
   1f584:	08 94       	sec
   1f586:	81 1c       	adc	r8, r1
   1f588:	91 1c       	adc	r9, r1
   1f58a:	88 20       	and	r8, r8
   1f58c:	d9 f7       	brne	.-10     	; 0x1f584 <processPacket+0x1f4>
   1f58e:	c1 14       	cp	r12, r1
   1f590:	d1 04       	cpc	r13, r1
   1f592:	e1 04       	cpc	r14, r1
   1f594:	f1 04       	cpc	r15, r1
   1f596:	19 f4       	brne	.+6      	; 0x1f59e <processPacket+0x20e>
   1f598:	ce 01       	movw	r24, r28
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
   1f59a:	0d 96       	adiw	r24, 0x0d	; 13
   1f59c:	7a d1       	rcall	.+756    	; 0x1f892 <validImage>
   1f59e:	fe e0       	ldi	r31, 0x0E	; 14
   1f5a0:	af 2e       	mov	r10, r31
   1f5a2:	b1 2c       	mov	r11, r1
   1f5a4:	ac 0e       	add	r10, r28
   1f5a6:	bd 1e       	adc	r11, r29
				else returnCode = ACK;
   1f5a8:	20 e0       	ldi	r18, 0x00	; 0
   1f5aa:	30 e0       	ldi	r19, 0x00	; 0

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
   1f5ac:	11 e0       	ldi	r17, 0x01	; 1
   1f5ae:	41 2c       	mov	r4, r1
   1f5b0:	af ef       	ldi	r26, 0xFF	; 255
   1f5b2:	5a 2e       	mov	r5, r26
   1f5b4:	af ef       	ldi	r26, 0xFF	; 255
				DBG_TFTP(
					tracePGMlnTftp(mDebugTftp_PLEN);
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
   1f5b6:	6a 2e       	mov	r6, r26
   1f5b8:	af ef       	ldi	r26, 0xFF	; 255
   1f5ba:	7a 2e       	mov	r7, r26
   1f5bc:	4c 0c       	add	r4, r12
   1f5be:	5d 1c       	adc	r5, r13
					// First sector - validate
					if(!validImage(pageBase)) {
   1f5c0:	6e 1c       	adc	r6, r14
   1f5c2:	7f 1c       	adc	r7, r15
   1f5c4:	b3 e0       	ldi	r27, 0x03	; 3
   1f5c6:	3b 2e       	mov	r3, r27
   1f5c8:	85 e0       	ldi	r24, 0x05	; 5
   1f5ca:	28 2e       	mov	r2, r24
   1f5cc:	3f c0       	rjmp	.+126    	; 0x1f64c <processPacket+0x2bc>
   1f5ce:	a9 01       	movw	r20, r18
   1f5d0:	60 e0       	ldi	r22, 0x00	; 0
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   1f5d2:	70 e0       	ldi	r23, 0x00	; 0
   1f5d4:	4c 0d       	add	r20, r12
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   1f5d6:	5d 1d       	adc	r21, r13
					)

					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   1f5d8:	6e 1d       	adc	r22, r14
   1f5da:	7f 1d       	adc	r23, r15
   1f5dc:	d5 01       	movw	r26, r10
   1f5de:	8c 91       	ld	r24, X
   1f5e0:	90 e0       	ldi	r25, 0x00	; 0
   1f5e2:	b8 2f       	mov	r27, r24
   1f5e4:	aa 27       	eor	r26, r26
   1f5e6:	f5 01       	movw	r30, r10
   1f5e8:	31 97       	sbiw	r30, 0x01	; 1
   1f5ea:	80 81       	ld	r24, Z
   1f5ec:	90 e0       	ldi	r25, 0x00	; 0
   1f5ee:	a8 2b       	or	r26, r24
   1f5f0:	b9 2b       	or	r27, r25
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   1f5f2:	0d 01       	movw	r0, r26
   1f5f4:	fa 01       	movw	r30, r20
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   1f5f6:	60 93 5b 00 	sts	0x005B, r22
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   1f5fa:	10 93 57 00 	sts	0x0057, r17
   1f5fe:	e8 95       	spm
   1f600:	11 24       	eor	r1, r1
   1f602:	2e 5f       	subi	r18, 0xFE	; 254
   1f604:	3f 4f       	sbci	r19, 0xFF	; 255
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
   1f606:	22 23       	and	r18, r18
   1f608:	e9 f4       	brne	.+58     	; 0x1f644 <processPacket+0x2b4>
   1f60a:	c9 01       	movw	r24, r18
   1f60c:	a0 e0       	ldi	r26, 0x00	; 0
   1f60e:	b0 e0       	ldi	r27, 0x00	; 0


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
   1f610:	84 0d       	add	r24, r4
   1f612:	95 1d       	adc	r25, r5
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
   1f614:	a6 1d       	adc	r26, r6
   1f616:	b7 1d       	adc	r27, r7
   1f618:	fc 01       	movw	r30, r24
   1f61a:	a0 93 5b 00 	sts	0x005B, r26
					boot_page_fill(writeAddr + offset, writeValue);
   1f61e:	30 92 57 00 	sts	0x0057, r3
   1f622:	e8 95       	spm
   1f624:	07 b6       	in	r0, 0x37	; 55
   1f626:	00 fc       	sbrc	r0, 0
   1f628:	fd cf       	rjmp	.-6      	; 0x1f624 <processPacket+0x294>
   1f62a:	fc 01       	movw	r30, r24
							tracePGM(mDebugTftp_OFFSET);
							tracenum(writeAddr + offset);
						}
					)

					offset += 2;
   1f62c:	a0 93 5b 00 	sts	0x005B, r26

					if(offset % SPM_PAGESIZE == 0) {
   1f630:	20 92 57 00 	sts	0x0057, r2
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   1f634:	e8 95       	spm
   1f636:	07 b6       	in	r0, 0x37	; 55
   1f638:	00 fc       	sbrc	r0, 0
   1f63a:	fd cf       	rjmp	.-6      	; 0x1f636 <processPacket+0x2a6>
   1f63c:	b1 e1       	ldi	r27, 0x11	; 17
   1f63e:	b0 93 57 00 	sts	0x0057, r27
   1f642:	e8 95       	spm
   1f644:	e2 e0       	ldi	r30, 0x02	; 2
   1f646:	f0 e0       	ldi	r31, 0x00	; 0
   1f648:	ae 0e       	add	r10, r30
   1f64a:	bf 1e       	adc	r11, r31
   1f64c:	28 15       	cp	r18, r8
						boot_spm_busy_wait();
   1f64e:	39 05       	cpc	r19, r9
   1f650:	08 f4       	brcc	.+2      	; 0x1f654 <processPacket+0x2c4>
   1f652:	bd cf       	rjmp	.-134    	; 0x1f5ce <processPacket+0x23e>
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   1f654:	04 30       	cpi	r16, 0x04	; 4
   1f656:	79 f4       	brne	.+30     	; 0x1f676 <processPacket+0x2e6>
   1f658:	82 e0       	ldi	r24, 0x02	; 2
   1f65a:	90 e0       	ldi	r25, 0x00	; 0
   1f65c:	6e ee       	ldi	r22, 0xEE	; 238
   1f65e:	d3 d2       	rcall	.+1446   	; 0x1fc06 <__eewr_byte_m1284p>
						boot_spm_busy_wait();
   1f660:	0a c0       	rjmp	.+20     	; 0x1f676 <processPacket+0x2e6>
   1f662:	80 91 2b 01 	lds	r24, 0x012B
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   1f666:	90 91 2c 01 	lds	r25, 0x012C
   1f66a:	56 de       	rcall	.-852    	; 0x1f318 <sockInit>
   1f66c:	01 e0       	ldi	r16, 0x01	; 1
   1f66e:	03 c0       	rjmp	.+6      	; 0x1f676 <processPacket+0x2e6>
   1f670:	00 e0       	ldi	r16, 0x00	; 0
   1f672:	01 c0       	rjmp	.+2      	; 0x1f676 <processPacket+0x2e6>
   1f674:	03 e0       	ldi	r16, 0x03	; 3
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
   1f676:	80 2f       	mov	r24, r16
   1f678:	c4 5f       	subi	r28, 0xF4	; 244
   1f67a:	dd 4f       	sbci	r29, 0xFD	; 253
   1f67c:	de bf       	out	0x3e, r29	; 62
						boot_rww_enable();
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
   1f67e:	cd bf       	out	0x3d, r28	; 61
   1f680:	df 91       	pop	r29
					// Hand over to application

					DBG_TFTP(tracePGMlnTftp(mDebugTftp_DONE);)

					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   1f682:	cf 91       	pop	r28
   1f684:	1f 91       	pop	r17
   1f686:	0f 91       	pop	r16
   1f688:	ff 90       	pop	r15
   1f68a:	ef 90       	pop	r14
   1f68c:	df 90       	pop	r13
			)

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   1f68e:	cf 90       	pop	r12
   1f690:	bf 90       	pop	r11
   1f692:	af 90       	pop	r10
   1f694:	9f 90       	pop	r9
   1f696:	8f 90       	pop	r8
   1f698:	7f 90       	pop	r7
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
   1f69a:	6f 90       	pop	r6
			break;
   1f69c:	5f 90       	pop	r5
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
   1f69e:	4f 90       	pop	r4
   1f6a0:	3f 90       	pop	r3
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.

				DBG_TFTP(tracePGMlnTftp(mDebugTftp_FULL);)

				returnCode = ERROR_FULL;
   1f6a2:	2f 90       	pop	r2
			break;

	}

	return(returnCode);
}
   1f6a4:	08 95       	ret

0001f6a6 <tftpInit>:
   1f6a6:	cf 93       	push	r28
   1f6a8:	85 e4       	ldi	r24, 0x45	; 69
   1f6aa:	90 e0       	ldi	r25, 0x00	; 0
   1f6ac:	35 de       	rcall	.-918    	; 0x1f318 <sockInit>
   1f6ae:	87 e1       	ldi	r24, 0x17	; 23
   1f6b0:	90 e0       	ldi	r25, 0x00	; 0
   1f6b2:	a1 d2       	rcall	.+1346   	; 0x1fbf6 <__eerd_byte_m1284p>
   1f6b4:	8b 3b       	cpi	r24, 0xBB	; 187
   1f6b6:	91 f4       	brne	.+36     	; 0x1f6dc <tftpInit+0x36>
   1f6b8:	89 e1       	ldi	r24, 0x19	; 25
   1f6ba:	90 e0       	ldi	r25, 0x00	; 0
   1f6bc:	9c d2       	rcall	.+1336   	; 0x1fbf6 <__eerd_byte_m1284p>
   1f6be:	c8 2f       	mov	r28, r24
   1f6c0:	88 e1       	ldi	r24, 0x18	; 24
   1f6c2:	90 e0       	ldi	r25, 0x00	; 0
   1f6c4:	98 d2       	rcall	.+1328   	; 0x1fbf6 <__eerd_byte_m1284p>
   1f6c6:	2c 2f       	mov	r18, r28
   1f6c8:	30 e0       	ldi	r19, 0x00	; 0
   1f6ca:	32 2f       	mov	r19, r18
   1f6cc:	22 27       	eor	r18, r18
   1f6ce:	28 0f       	add	r18, r24
   1f6d0:	31 1d       	adc	r19, r1
   1f6d2:	30 93 2c 01 	sts	0x012C, r19
 * Initializes the network controller
 */
void tftpInit(void)
{
	// Open socket
	sockInit(TFTP_PORT);
   1f6d6:	20 93 2b 01 	sts	0x012B, r18
   1f6da:	06 c0       	rjmp	.+12     	; 0x1f6e8 <tftpInit+0x42>
   1f6dc:	89 e7       	ldi	r24, 0x79	; 121

#if defined(RANDOM_TFTP_DATA_PORT)
#else
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
   1f6de:	97 eb       	ldi	r25, 0xB7	; 183
   1f6e0:	90 93 2c 01 	sts	0x012C, r25
   1f6e4:	80 93 2b 01 	sts	0x012B, r24
   1f6e8:	cf 91       	pop	r28
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
   1f6ea:	08 95       	ret

0001f6ec <tftpPoll>:
   1f6ec:	af 92       	push	r10
   1f6ee:	bf 92       	push	r11
   1f6f0:	cf 92       	push	r12
   1f6f2:	df 92       	push	r13
   1f6f4:	ff 92       	push	r15
   1f6f6:	0f 93       	push	r16
   1f6f8:	1f 93       	push	r17
   1f6fa:	cf 93       	push	r28
   1f6fc:	df 93       	push	r29
   1f6fe:	cd b7       	in	r28, 0x3d	; 61
   1f700:	de b7       	in	r29, 0x3e	; 62
   1f702:	c5 56       	subi	r28, 0x65	; 101
   1f704:	d0 40       	sbci	r29, 0x00	; 0
   1f706:	de bf       	out	0x3e, r29	; 62
   1f708:	cd bf       	out	0x3d, r28	; 61
   1f70a:	86 e2       	ldi	r24, 0x26	; 38
   1f70c:	90 e0       	ldi	r25, 0x00	; 0
   1f70e:	68 e6       	ldi	r22, 0x68	; 104
   1f710:	a1 dd       	rcall	.-1214   	; 0x1f254 <spiReadWord>
	else
		tftpTransferPort = TFTP_DATA_PORT;
   1f712:	00 97       	sbiw	r24, 0x00	; 0
   1f714:	09 f4       	brne	.+2      	; 0x1f718 <tftpPoll+0x2c>
   1f716:	ae c0       	rjmp	.+348    	; 0x1f874 <tftpPoll+0x188>
   1f718:	81 e0       	ldi	r24, 0x01	; 1
   1f71a:	80 93 2e 01 	sts	0x012E, r24
#else
		tracePGMlnTftp(mDebugTftp_PORT);
		tracenum(tftpTransferPort);
#endif
	)
}
   1f71e:	0e c0       	rjmp	.+28     	; 0x1f73c <tftpPoll+0x50>
   1f720:	82 e0       	ldi	r24, 0x02	; 2

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
   1f722:	90 e0       	ldi	r25, 0x00	; 0
   1f724:	6c e6       	ldi	r22, 0x6C	; 108
   1f726:	44 e0       	ldi	r20, 0x04	; 4
   1f728:	4e dd       	rcall	.-1380   	; 0x1f1c6 <spiWriteReg>
   1f72a:	8f ef       	ldi	r24, 0xFF	; 255
   1f72c:	97 e8       	ldi	r25, 0x87	; 135
   1f72e:	a3 e1       	ldi	r26, 0x13	; 19
   1f730:	81 50       	subi	r24, 0x01	; 1
   1f732:	90 40       	sbci	r25, 0x00	; 0
   1f734:	a0 40       	sbci	r26, 0x00	; 0
   1f736:	e1 f7       	brne	.-8      	; 0x1f730 <tftpPoll+0x44>
   1f738:	00 c0       	rjmp	.+0      	; 0x1f73a <tftpPoll+0x4e>
   1f73a:	00 00       	nop
   1f73c:	82 e0       	ldi	r24, 0x02	; 2
   1f73e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = spiReadWord(REG_S3_RX_RSR0, S3_R_CB);
   1f740:	68 e6       	ldi	r22, 0x68	; 104
   1f742:	6f dd       	rcall	.-1314   	; 0x1f222 <spiReadReg>
   1f744:	82 fd       	sbrc	r24, 2
   1f746:	ec cf       	rjmp	.-40     	; 0x1f720 <tftpPoll+0x34>
   1f748:	23 de       	rcall	.-954    	; 0x1f390 <processPacket>
// 			_delay_ms(400);
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
   1f74a:	f8 2e       	mov	r15, r24
   1f74c:	84 e2       	ldi	r24, 0x24	; 36
   1f74e:	90 e0       	ldi	r25, 0x00	; 0
		tftpFlashing = TRUE;
   1f750:	68 e6       	ldi	r22, 0x68	; 104
   1f752:	80 dd       	rcall	.-1280   	; 0x1f254 <spiReadWord>
   1f754:	5c 01       	movw	r10, r24

		while((spiReadReg(REG_S3_IR, S3_R_CB) & IR_RECV)) {
   1f756:	92 e0       	ldi	r25, 0x02	; 2
			spiWriteReg(REG_S3_IR, S3_W_CB, IR_RECV);
   1f758:	f9 16       	cp	r15, r25
   1f75a:	09 f4       	brne	.+2      	; 0x1f75e <tftpPoll+0x72>
   1f75c:	3e c0       	rjmp	.+124    	; 0x1f7da <tftpPoll+0xee>
   1f75e:	9f 15       	cp	r25, r15
   1f760:	20 f0       	brcs	.+8      	; 0x1f76a <tftpPoll+0x7e>
   1f762:	a1 e0       	ldi	r26, 0x01	; 1
   1f764:	fa 16       	cp	r15, r26
   1f766:	41 f4       	brne	.+16     	; 0x1f778 <tftpPoll+0x8c>
   1f768:	1a c0       	rjmp	.+52     	; 0x1f79e <tftpPoll+0xb2>
   1f76a:	b3 e0       	ldi	r27, 0x03	; 3
   1f76c:	fb 16       	cp	r15, r27
   1f76e:	31 f1       	breq	.+76     	; 0x1f7bc <tftpPoll+0xd0>
   1f770:	e4 e0       	ldi	r30, 0x04	; 4
   1f772:	fe 16       	cp	r15, r30
   1f774:	09 f4       	brne	.+2      	; 0x1f778 <tftpPoll+0x8c>
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;

		while((spiReadReg(REG_S3_IR, S3_R_CB) & IR_RECV)) {
   1f776:	40 c0       	rjmp	.+128    	; 0x1f7f8 <tftpPoll+0x10c>
   1f778:	44 ea       	ldi	r20, 0xA4	; 164
   1f77a:	50 ef       	ldi	r21, 0xF0	; 240
   1f77c:	60 e0       	ldi	r22, 0x00	; 0
   1f77e:	70 e0       	ldi	r23, 0x00	; 0
   1f780:	40 50       	subi	r20, 0x00	; 0
   1f782:	50 40       	sbci	r21, 0x00	; 0
		// Process Packet and get TFTP response code
#if (DEBUG_TFTP > 0)
		packetSize = spiReadWord(REG_S3_RX_RSR0, S3_R_CB);
		response = processPacket(packetSize);
#else
		response = processPacket();
   1f784:	6f 4f       	sbci	r22, 0xFF	; 255
   1f786:	7f 4f       	sbci	r23, 0xFF	; 255
   1f788:	ce 01       	movw	r24, r28
	uint8_t* txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;
	
#if (W5500 > 0)
	writePointer = spiReadWord(REG_S3_TX_WR0, S3_R_CB);
   1f78a:	01 96       	adiw	r24, 0x01	; 1
   1f78c:	2a e0       	ldi	r18, 0x0A	; 10
   1f78e:	30 e0       	ldi	r19, 0x00	; 0
   1f790:	29 d2       	rcall	.+1106   	; 0x1fbe4 <memcpy_PF>
   1f792:	2a e0       	ldi	r18, 0x0A	; 10
   1f794:	6e 01       	movw	r12, r28
#else
	writePointer = spiReadWord(REG_S3_TX_WR0, 0) + S3_TX_START;
#endif


	switch(response) {
   1f796:	08 94       	sec
   1f798:	c1 1c       	adc	r12, r1
   1f79a:	d1 1c       	adc	r13, r1
   1f79c:	38 c0       	rjmp	.+112    	; 0x1f80e <tftpPoll+0x122>
   1f79e:	49 eb       	ldi	r20, 0xB9	; 185
   1f7a0:	50 ef       	ldi	r21, 0xF0	; 240
   1f7a2:	60 e0       	ldi	r22, 0x00	; 0
   1f7a4:	70 e0       	ldi	r23, 0x00	; 0
   1f7a6:	40 50       	subi	r20, 0x00	; 0
   1f7a8:	50 40       	sbci	r21, 0x00	; 0
   1f7aa:	6f 4f       	sbci	r22, 0xFF	; 255
   1f7ac:	7f 4f       	sbci	r23, 0xFF	; 255
   1f7ae:	ce 01       	movw	r24, r28
   1f7b0:	01 96       	adiw	r24, 0x01	; 1
   1f7b2:	2c e0       	ldi	r18, 0x0C	; 12
   1f7b4:	30 e0       	ldi	r19, 0x00	; 0
   1f7b6:	16 d2       	rcall	.+1068   	; 0x1fbe4 <memcpy_PF>

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_unknown_error_packet, packetLength);
   1f7b8:	2c e0       	ldi	r18, 0x0C	; 12
   1f7ba:	ec cf       	rjmp	.-40     	; 0x1f794 <tftpPoll+0xa8>
   1f7bc:	4f ea       	ldi	r20, 0xAF	; 175
   1f7be:	50 ef       	ldi	r21, 0xF0	; 240
   1f7c0:	60 e0       	ldi	r22, 0x00	; 0
   1f7c2:	70 e0       	ldi	r23, 0x00	; 0
   1f7c4:	40 50       	subi	r20, 0x00	; 0
   1f7c6:	50 40       	sbci	r21, 0x00	; 0
   1f7c8:	6f 4f       	sbci	r22, 0xFF	; 255
   1f7ca:	7f 4f       	sbci	r23, 0xFF	; 255
   1f7cc:	ce 01       	movw	r24, r28
   1f7ce:	01 96       	adiw	r24, 0x01	; 1
   1f7d0:	29 e0       	ldi	r18, 0x09	; 9
   1f7d2:	30 e0       	ldi	r19, 0x00	; 0
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
   1f7d4:	07 d2       	rcall	.+1038   	; 0x1fbe4 <memcpy_PF>
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
   1f7d6:	29 e0       	ldi	r18, 0x09	; 9
   1f7d8:	dd cf       	rjmp	.-70     	; 0x1f794 <tftpPoll+0xa8>
   1f7da:	80 91 22 01 	lds	r24, 0x0122
   1f7de:	90 91 23 01 	lds	r25, 0x0123

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_opcode_error_packet, packetLength);
   1f7e2:	20 91 20 01 	lds	r18, 0x0120
   1f7e6:	30 91 21 01 	lds	r19, 0x0121
   1f7ea:	28 17       	cp	r18, r24
   1f7ec:	39 07       	cpc	r19, r25
   1f7ee:	20 f4       	brcc	.+8      	; 0x1f7f8 <tftpPoll+0x10c>
   1f7f0:	90 93 21 01 	sts	0x0121, r25
   1f7f4:	80 93 20 01 	sts	0x0120, r24
   1f7f8:	19 82       	std	Y+1, r1	; 0x01
   1f7fa:	84 e0       	ldi	r24, 0x04	; 4
#endif
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
   1f7fc:	8a 83       	std	Y+2, r24	; 0x02
   1f7fe:	80 91 22 01 	lds	r24, 0x0122

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_full_error_packet, packetLength);
   1f802:	90 91 23 01 	lds	r25, 0x0123
   1f806:	9b 83       	std	Y+3, r25	; 0x03
   1f808:	8c 83       	std	Y+4, r24	; 0x04
   1f80a:	24 e0       	ldi	r18, 0x04	; 4
   1f80c:	c3 cf       	rjmp	.-122    	; 0x1f794 <tftpPoll+0xa8>
   1f80e:	85 01       	movw	r16, r10
   1f810:	0f 5f       	subi	r16, 0xFF	; 255
   1f812:	1f 4f       	sbci	r17, 0xFF	; 255
   1f814:	d6 01       	movw	r26, r12
   1f816:	4d 91       	ld	r20, X+
   1f818:	6d 01       	movw	r12, r26
   1f81a:	c5 01       	movw	r24, r10
#endif
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
   1f81c:	64 e7       	ldi	r22, 0x74	; 116
   1f81e:	a6 96       	adiw	r28, 0x26	; 38
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
#endif
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
   1f820:	2f af       	sts	0x7f, r18
   1f822:	a6 97       	sbiw	r28, 0x26	; 38
   1f824:	d0 dc       	rcall	.-1632   	; 0x1f1c6 <spiWriteReg>
   1f826:	a6 96       	adiw	r28, 0x26	; 38
   1f828:	2f ad       	sts	0x6f, r18
   1f82a:	a6 97       	sbiw	r28, 0x26	; 38
   1f82c:	bf ef       	ldi	r27, 0xFF	; 255
   1f82e:	0f 3f       	cpi	r16, 0xFF	; 255
   1f830:	1b 07       	cpc	r17, r27
   1f832:	11 f0       	breq	.+4      	; 0x1f838 <tftpPoll+0x14c>
   1f834:	58 01       	movw	r10, r16
   1f836:	02 c0       	rjmp	.+4      	; 0x1f83c <tftpPoll+0x150>
   1f838:	aa 24       	eor	r10, r10
   1f83a:	bb 24       	eor	r11, r11
   1f83c:	21 50       	subi	r18, 0x01	; 1
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
   1f83e:	39 f7       	brne	.-50     	; 0x1f80e <tftpPoll+0x122>
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
   1f840:	84 e2       	ldi	r24, 0x24	; 36
   1f842:	90 e0       	ldi	r25, 0x00	; 0
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
   1f844:	6c e6       	ldi	r22, 0x6C	; 108
   1f846:	a5 01       	movw	r20, r10
   1f848:	d6 dc       	rcall	.-1620   	; 0x1f1f6 <spiWriteWord>
   1f84a:	81 e0       	ldi	r24, 0x01	; 1
   1f84c:	90 e0       	ldi	r25, 0x00	; 0
			*txPtr = lastPacket & 0xff;
   1f84e:	6c e6       	ldi	r22, 0x6C	; 108
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
   1f850:	40 e2       	ldi	r20, 0x20	; 32
   1f852:	b9 dc       	rcall	.-1678   	; 0x1f1c6 <spiWriteReg>
	}

	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, S3_TXBUF_CB, *txPtr++);
   1f854:	81 e0       	ldi	r24, 0x01	; 1
   1f856:	90 e0       	ldi	r25, 0x00	; 0
   1f858:	68 e6       	ldi	r22, 0x68	; 104
   1f85a:	e3 dc       	rcall	.-1594   	; 0x1f222 <spiReadReg>
   1f85c:	88 23       	and	r24, r24
   1f85e:	d1 f7       	brne	.-12     	; 0x1f854 <tftpPoll+0x168>
   1f860:	e4 e0       	ldi	r30, 0x04	; 4
   1f862:	fe 16       	cp	r15, r30
   1f864:	39 f4       	brne	.+14     	; 0x1f874 <tftpPoll+0x188>
   1f866:	81 e0       	ldi	r24, 0x01	; 1
   1f868:	90 e0       	ldi	r25, 0x00	; 0
   1f86a:	6c e6       	ldi	r22, 0x6C	; 108
   1f86c:	40 e1       	ldi	r20, 0x10	; 16
#if (W5500 > 0)
		if(writePointer == 0xFFFF) writePointer = 0x0000;  //changed 0c0800 to 0xFFFF, fixes a 4th packet retransmit bug. upload speed changed from 500sec to 90sec for 100kb program
   1f86e:	ab dc       	rcall	.-1706   	; 0x1f1c6 <spiWriteReg>
   1f870:	80 e0       	ldi	r24, 0x00	; 0
   1f872:	01 c0       	rjmp	.+2      	; 0x1f876 <tftpPoll+0x18a>
   1f874:	81 e0       	ldi	r24, 0x01	; 1
   1f876:	cb 59       	subi	r28, 0x9B	; 155
   1f878:	df 4f       	sbci	r29, 0xFF	; 255
   1f87a:	de bf       	out	0x3e, r29	; 62
   1f87c:	cd bf       	out	0x3d, r28	; 61
   1f87e:	df 91       	pop	r29
   1f880:	cf 91       	pop	r28
   1f882:	1f 91       	pop	r17
   1f884:	0f 91       	pop	r16
			break;
	}

	txPtr = txBuffer;

	while(packetLength--) {
   1f886:	ff 90       	pop	r15
		spiWriteReg(writePointer++, S3_TXBUF_CB, *txPtr++);
#if (W5500 > 0)
		if(writePointer == 0xFFFF) writePointer = 0x0000;  //changed 0c0800 to 0xFFFF, fixes a 4th packet retransmit bug. upload speed changed from 500sec to 90sec for 100kb program
	}

	spiWriteWord(REG_S3_TX_WR0, S3_W_CB, writePointer);
   1f888:	df 90       	pop	r13
   1f88a:	cf 90       	pop	r12
   1f88c:	bf 90       	pop	r11
   1f88e:	af 90       	pop	r10
   1f890:	08 95       	ret

0001f892 <validImage>:
#include "serial.h"
#include "debug.h"
#include "debug_vald.h"

uint8_t validImage(uint8_t* base)
{
   1f892:	fc 01       	movw	r30, r24
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
   1f894:	80 e0       	ldi	r24, 0x00	; 0

		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
   1f896:	90 81       	ld	r25, Z
   1f898:	9c 30       	cpi	r25, 0x0C	; 12
   1f89a:	49 f4       	brne	.+18     	; 0x1f8ae <validImage+0x1c>
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
		}
		
		if(base[i + 1] != 0x94) {
   1f89c:	91 81       	ldd	r25, Z+1	; 0x01
   1f89e:	94 39       	cpi	r25, 0x94	; 148
   1f8a0:	41 f4       	brne	.+16     	; 0x1f8b2 <validImage+0x20>

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
   1f8a2:	8c 5f       	subi	r24, 0xFC	; 252
   1f8a4:	34 96       	adiw	r30, 0x04	; 4
   1f8a6:	84 33       	cpi	r24, 0x34	; 52
   1f8a8:	b1 f7       	brne	.-20     	; 0x1f896 <validImage+0x4>
		}
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
   1f8aa:	81 e0       	ldi	r24, 0x01	; 1
   1f8ac:	08 95       	ret
				tracenum(i);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i]);
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
   1f8ae:	80 e0       	ldi	r24, 0x00	; 0
   1f8b0:	08 95       	ret
				tracenum(i + 1);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i + 1]);
				tracePGM(mDebugVald_0x94);
			)
			return(0);
   1f8b2:	80 e0       	ldi	r24, 0x00	; 0
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
}
   1f8b4:	08 95       	ret

0001f8b6 <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
   1f8b6:	82 e0       	ldi	r24, 0x02	; 2
   1f8b8:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
   1f8bc:	88 e1       	ldi	r24, 0x18	; 24
   1f8be:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
   1f8c2:	86 e0       	ldi	r24, 0x06	; 6
   1f8c4:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
   1f8c8:	80 e1       	ldi	r24, 0x10	; 16
   1f8ca:	80 93 c4 00 	sts	0x00C4, r24

#if (DEBUG > 0)
	DDRD = 0x92;
#endif

}
   1f8ce:	08 95       	ret

0001f8d0 <putch>:


void putch(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
   1f8d0:	90 91 c0 00 	lds	r25, 0x00C0
   1f8d4:	95 ff       	sbrs	r25, 5
   1f8d6:	fc cf       	rjmp	.-8      	; 0x1f8d0 <putch>
	UART_DATA_REG = c;
   1f8d8:	80 93 c6 00 	sts	0x00C6, r24
}
   1f8dc:	08 95       	ret

0001f8de <puthex>:


void puthex(uint8_t c)
{
	c &= 0xf;
   1f8de:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
   1f8e0:	8a 30       	cpi	r24, 0x0A	; 10
   1f8e2:	08 f0       	brcs	.+2      	; 0x1f8e6 <puthex+0x8>
   1f8e4:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putch(c + '0');
   1f8e6:	80 5d       	subi	r24, 0xD0	; 208
   1f8e8:	f3 cf       	rjmp	.-26     	; 0x1f8d0 <putch>

0001f8ea <getch>:
   1f8ea:	80 91 c0 00 	lds	r24, 0x00C0

uint8_t getch(void)
{
	//uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
   1f8ee:	87 ff       	sbrs	r24, 7
   1f8f0:	fc cf       	rjmp	.-8      	; 0x1f8ea <getch>
   1f8f2:	80 91 c0 00 	lds	r24, 0x00C0
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
   1f8f6:	84 fd       	sbrc	r24, 4
   1f8f8:	01 c0       	rjmp	.+2      	; 0x1f8fc <getch+0x12>
   1f8fa:	a8 95       	wdr
   1f8fc:	80 91 c6 00 	lds	r24, 0x00C6
	}

	//ch = UART_DATA_REG;
	//return ch;

	return(UART_DATA_REG);
   1f900:	08 95       	ret

0001f902 <serialPoll>:
   1f902:	80 91 c0 00 	lds	r24, 0x00C0
}


uint8_t serialPoll(void)
{
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
   1f906:	87 ff       	sbrs	r24, 7
   1f908:	05 c0       	rjmp	.+10     	; 0x1f914 <serialPoll+0x12>
   1f90a:	27 d0       	rcall	.+78     	; 0x1f95a <resetTick>
   1f90c:	81 e0       	ldi	r24, 0x01	; 1
		resetTick();
   1f90e:	80 93 2d 01 	sts	0x012D, r24
		serialFlashing = TRUE;
   1f912:	5b c0       	rjmp	.+182    	; 0x1f9ca <processOptiboot>
   1f914:	81 e0       	ldi	r24, 0x01	; 1
   1f916:	08 95       	ret

0001f918 <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
   1f918:	80 91 84 00 	lds	r24, 0x0084
   1f91c:	90 91 85 00 	lds	r25, 0x0085

	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
   1f920:	92 ff       	sbrs	r25, 2
   1f922:	04 c0       	rjmp	.+8      	; 0x1f92c <updateLed+0x14>
   1f924:	2b b1       	in	r18, 0x0b	; 11
   1f926:	20 58       	subi	r18, 0x80	; 128
   1f928:	2b b9       	out	0x0b, r18	; 11
   1f92a:	01 c0       	rjmp	.+2      	; 0x1f92e <updateLed+0x16>
	else LED_PORT &= ~_BV(LED); // Led pin low
   1f92c:	5f 98       	cbi	0x0b, 7	; 11

	if(next_timer_1 < last_timer_1) {
   1f92e:	20 91 24 01 	lds	r18, 0x0124
   1f932:	30 91 25 01 	lds	r19, 0x0125
   1f936:	82 17       	cp	r24, r18
   1f938:	93 07       	cpc	r25, r19
   1f93a:	50 f4       	brcc	.+20     	; 0x1f950 <updateLed+0x38>
		tick++;
   1f93c:	20 91 26 01 	lds	r18, 0x0126
   1f940:	30 91 27 01 	lds	r19, 0x0127
   1f944:	2f 5f       	subi	r18, 0xFF	; 255
   1f946:	3f 4f       	sbci	r19, 0xFF	; 255
   1f948:	30 93 27 01 	sts	0x0127, r19
   1f94c:	20 93 26 01 	sts	0x0126, r18
		    tracePGMlnUtil(mDebugUtil_LAST);
		    tracenum(last_timer_1);
		)
	}

	last_timer_1 = next_timer_1;
   1f950:	90 93 25 01 	sts	0x0125, r25
   1f954:	80 93 24 01 	sts	0x0124, r24
}
   1f958:	08 95       	ret

0001f95a <resetTick>:

void resetTick(void)
{
	TCNT1 = 0;
   1f95a:	10 92 85 00 	sts	0x0085, r1
   1f95e:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
   1f962:	10 92 27 01 	sts	0x0127, r1
   1f966:	10 92 26 01 	sts	0x0126, r1
}
   1f96a:	08 95       	ret

0001f96c <timedOut>:

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   1f96c:	80 e0       	ldi	r24, 0x00	; 0
   1f96e:	90 e0       	ldi	r25, 0x00	; 0
   1f970:	dc 01       	movw	r26, r24
   1f972:	ab bf       	out	0x3b, r26	; 59
   1f974:	fc 01       	movw	r30, r24
   1f976:	87 91       	elpm	r24, Z+
   1f978:	96 91       	elpm	r25, Z
   1f97a:	2f ef       	ldi	r18, 0xFF	; 255
   1f97c:	8f 3f       	cpi	r24, 0xFF	; 255
   1f97e:	92 07       	cpc	r25, r18
   1f980:	51 f0       	breq	.+20     	; 0x1f996 <timedOut+0x2a>
   1f982:	81 e0       	ldi	r24, 0x01	; 1
   1f984:	20 91 26 01 	lds	r18, 0x0126
   1f988:	30 91 27 01 	lds	r19, 0x0127
   1f98c:	25 30       	cpi	r18, 0x05	; 5
   1f98e:	31 05       	cpc	r19, r1
   1f990:	18 f4       	brcc	.+6      	; 0x1f998 <timedOut+0x2c>
   1f992:	80 e0       	ldi	r24, 0x00	; 0
   1f994:	08 95       	ret
   1f996:	80 e0       	ldi	r24, 0x00	; 0
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
	else return(0);
}
   1f998:	08 95       	ret

0001f99a <appStart>:
void appStart(void) {
	__asm__ __volatile__ (
   1f99a:	ee 27       	eor	r30, r30
   1f99c:	ff 27       	eor	r31, r31
   1f99e:	09 94       	ijmp
		"clr	r30		\n\t"
		"clr	r31		\n\t"
		"ijmp	\n\t"
	);
}
   1f9a0:	08 95       	ret

0001f9a2 <verifySpace>:
static uint16_t address = 0;
static uint8_t  length;

static void verifySpace(void)
{
	if(getch() != CRC_EOP) {
   1f9a2:	a3 df       	rcall	.-186    	; 0x1f8ea <getch>
   1f9a4:	80 32       	cpi	r24, 0x20	; 32
   1f9a6:	39 f0       	breq	.+14     	; 0x1f9b6 <verifySpace+0x14>
   1f9a8:	88 e1       	ldi	r24, 0x18	; 24
		WDTCSR = _BV(WDCE) | _BV(WDE);
   1f9aa:	80 93 60 00 	sts	0x0060, r24
   1f9ae:	88 e0       	ldi	r24, 0x08	; 8
		WDTCSR = WATCHDOG_16MS;	// shorten WD timeout
   1f9b0:	80 93 60 00 	sts	0x0060, r24
   1f9b4:	ff cf       	rjmp	.-2      	; 0x1f9b4 <verifySpace+0x12>
   1f9b6:	84 e1       	ldi	r24, 0x14	; 20
		while(1)				// and busy-loop so that WD causes
			;					// a reset and app start.
	}
	putch(STK_INSYNC);
   1f9b8:	8b cf       	rjmp	.-234    	; 0x1f8d0 <putch>

0001f9ba <getNch>:
   1f9ba:	cf 93       	push	r28
   1f9bc:	c8 2f       	mov	r28, r24
}
   1f9be:	95 df       	rcall	.-214    	; 0x1f8ea <getch>


static void getNch(uint8_t count)
{
   1f9c0:	c1 50       	subi	r28, 0x01	; 1
   1f9c2:	e9 f7       	brne	.-6      	; 0x1f9be <getNch+0x4>
	do getch();
   1f9c4:	ee df       	rcall	.-36     	; 0x1f9a2 <verifySpace>
   1f9c6:	cf 91       	pop	r28
	while(--count);
   1f9c8:	08 95       	ret

0001f9ca <processOptiboot>:
   1f9ca:	af 92       	push	r10
	verifySpace();
   1f9cc:	bf 92       	push	r11
   1f9ce:	cf 92       	push	r12
}
   1f9d0:	df 92       	push	r13
   1f9d2:	ef 92       	push	r14


uint8_t processOptiboot(void)
{
   1f9d4:	ff 92       	push	r15
   1f9d6:	0f 93       	push	r16
   1f9d8:	1f 93       	push	r17
   1f9da:	cf 93       	push	r28
   1f9dc:	df 93       	push	r29
   1f9de:	cd b7       	in	r28, 0x3d	; 61
   1f9e0:	de b7       	in	r29, 0x3e	; 62
   1f9e2:	c1 50       	subi	r28, 0x01	; 1
   1f9e4:	d1 40       	sbci	r29, 0x01	; 1
   1f9e6:	de bf       	out	0x3e, r29	; 62
   1f9e8:	cd bf       	out	0x3d, r28	; 61
   1f9ea:	7f df       	rcall	.-258    	; 0x1f8ea <getch>
   1f9ec:	81 34       	cpi	r24, 0x41	; 65
   1f9ee:	a9 f4       	brne	.+42     	; 0x1fa1a <processOptiboot+0x50>
   1f9f0:	7c df       	rcall	.-264    	; 0x1f8ea <getch>
   1f9f2:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t ch;

	ch = getch();
   1f9f4:	de 4f       	sbci	r29, 0xFE	; 254
   1f9f6:	88 83       	st	Y, r24

	if(ch == STK_GET_PARAMETER) {
   1f9f8:	c1 50       	subi	r28, 0x01	; 1
   1f9fa:	d1 40       	sbci	r29, 0x01	; 1
		unsigned char which = getch();
   1f9fc:	d2 df       	rcall	.-92     	; 0x1f9a2 <verifySpace>
   1f9fe:	cf 5f       	subi	r28, 0xFF	; 255
		verifySpace();
   1fa00:	de 4f       	sbci	r29, 0xFE	; 254
   1fa02:	88 81       	ld	r24, Y
   1fa04:	c1 50       	subi	r28, 0x01	; 1
   1fa06:	d1 40       	sbci	r29, 0x01	; 1
   1fa08:	82 38       	cpi	r24, 0x82	; 130
   1fa0a:	11 f4       	brne	.+4      	; 0x1fa10 <processOptiboot+0x46>
   1fa0c:	84 e0       	ldi	r24, 0x04	; 4
		if(which == 0x82) {
   1fa0e:	03 c0       	rjmp	.+6      	; 0x1fa16 <processOptiboot+0x4c>
   1fa10:	81 38       	cpi	r24, 0x81	; 129
   1fa12:	39 f1       	breq	.+78     	; 0x1fa62 <processOptiboot+0x98>
   1fa14:	83 e0       	ldi	r24, 0x03	; 3
   1fa16:	5c df       	rcall	.-328    	; 0x1f8d0 <putch>
   1fa18:	d3 c0       	rjmp	.+422    	; 0x1fbc0 <processOptiboot+0x1f6>
   1fa1a:	82 34       	cpi	r24, 0x42	; 66
			/*
			 * Send tftpboot version as "minor SW version"
			 */
			putch(ARIADNE_MINVER);
   1fa1c:	11 f4       	brne	.+4      	; 0x1fa22 <processOptiboot+0x58>
   1fa1e:	84 e1       	ldi	r24, 0x14	; 20
		} else if(which == 0x81) {
   1fa20:	03 c0       	rjmp	.+6      	; 0x1fa28 <processOptiboot+0x5e>
   1fa22:	85 34       	cpi	r24, 0x45	; 69
		} else {
			/*
			 * GET PARAMETER returns a generic 0x03 reply for
			 * other parameters - enough to keep Avrdude happy
			 */
			putch(0x03);
   1fa24:	19 f4       	brne	.+6      	; 0x1fa2c <processOptiboot+0x62>
   1fa26:	84 e0       	ldi	r24, 0x04	; 4
   1fa28:	c8 df       	rcall	.-112    	; 0x1f9ba <getNch>
   1fa2a:	ca c0       	rjmp	.+404    	; 0x1fbc0 <processOptiboot+0x1f6>
		}
	} else if(ch == STK_SET_DEVICE) {
   1fa2c:	85 35       	cpi	r24, 0x55	; 85
   1fa2e:	a9 f4       	brne	.+42     	; 0x1fa5a <processOptiboot+0x90>
		// SET DEVICE is ignored
		getNch(20);
   1fa30:	5c df       	rcall	.-328    	; 0x1f8ea <getch>
   1fa32:	08 2f       	mov	r16, r24
	} else if(ch == STK_SET_DEVICE_EXT) {
   1fa34:	10 e0       	ldi	r17, 0x00	; 0
   1fa36:	59 df       	rcall	.-334    	; 0x1f8ea <getch>
		// SET DEVICE EXT is ignored
		getNch(4);
   1fa38:	90 e0       	ldi	r25, 0x00	; 0
   1fa3a:	98 2f       	mov	r25, r24
   1fa3c:	88 27       	eor	r24, r24
   1fa3e:	80 2b       	or	r24, r16
	} else if(ch == STK_LOAD_ADDRESS) {
   1fa40:	91 2b       	or	r25, r17
   1fa42:	29 2f       	mov	r18, r25
		// LOAD ADDRESS
		uint16_t newAddress;
		newAddress = getch();
   1fa44:	22 1f       	adc	r18, r18
   1fa46:	22 27       	eor	r18, r18
   1fa48:	22 1f       	adc	r18, r18
   1fa4a:	2b bf       	out	0x3b, r18	; 59
		newAddress = (newAddress & 0xff) | (getch() << 8);
   1fa4c:	88 0f       	add	r24, r24
   1fa4e:	99 1f       	adc	r25, r25
   1fa50:	90 93 29 01 	sts	0x0129, r25
   1fa54:	80 93 28 01 	sts	0x0128, r24
   1fa58:	b2 c0       	rjmp	.+356    	; 0x1fbbe <processOptiboot+0x1f4>

#ifdef RAMPZ
		// Transfer top bit to RAMPZ
		RAMPZ = (newAddress & 0x8000) ? 1 : 0;
   1fa5a:	86 35       	cpi	r24, 0x56	; 86
   1fa5c:	21 f4       	brne	.+8      	; 0x1fa66 <processOptiboot+0x9c>
   1fa5e:	84 e0       	ldi	r24, 0x04	; 4
   1fa60:	ac df       	rcall	.-168    	; 0x1f9ba <getNch>
   1fa62:	80 e0       	ldi	r24, 0x00	; 0
#endif

		newAddress += newAddress; // Convert from word address to byte address
   1fa64:	d8 cf       	rjmp	.-80     	; 0x1fa16 <processOptiboot+0x4c>
   1fa66:	84 36       	cpi	r24, 0x64	; 100
		address = newAddress;
   1fa68:	09 f0       	breq	.+2      	; 0x1fa6c <processOptiboot+0xa2>
   1fa6a:	76 c0       	rjmp	.+236    	; 0x1fb58 <processOptiboot+0x18e>
   1fa6c:	3e df       	rcall	.-388    	; 0x1f8ea <getch>
   1fa6e:	3d df       	rcall	.-390    	; 0x1f8ea <getch>
   1fa70:	80 93 2a 01 	sts	0x012A, r24
		verifySpace();
	} else if(ch == STK_UNIVERSAL) {
   1fa74:	3a df       	rcall	.-396    	; 0x1f8ea <getch>
		// UNIVERSAL command is ignored
		getNch(4);
   1fa76:	80 91 28 01 	lds	r24, 0x0128
   1fa7a:	90 91 29 01 	lds	r25, 0x0129
		putch(0x00);
   1fa7e:	20 ee       	ldi	r18, 0xE0	; 224
	}
	/* Write memory, length is big endian and is in bytes */
	else if(ch == STK_PROG_PAGE) {
   1fa80:	80 30       	cpi	r24, 0x00	; 0
   1fa82:	92 07       	cpc	r25, r18
   1fa84:	48 f4       	brcc	.+18     	; 0x1fa98 <processOptiboot+0xce>
		// PROGRAM PAGE - we support flash programming only, not EEPROM
		uint8_t  buff[256];
		uint8_t* bufPtr;
		uint16_t addrPtr;

		getch();			/* getlen() */
   1fa86:	a0 e0       	ldi	r26, 0x00	; 0
   1fa88:	b0 e0       	ldi	r27, 0x00	; 0
		length = getch();
   1fa8a:	23 e0       	ldi	r18, 0x03	; 3
   1fa8c:	fc 01       	movw	r30, r24
   1fa8e:	a0 93 5b 00 	sts	0x005B, r26
		getch();
   1fa92:	20 93 57 00 	sts	0x0057, r18

		// If we are in RWW section, immediately start page erase
		if(address < NRWWSTART) boot_page_erase((uint16_t)(void*)address);
   1fa96:	e8 95       	spm
   1fa98:	8e 01       	movw	r16, r28
   1fa9a:	0f 5f       	subi	r16, 0xFF	; 255
   1fa9c:	1f 4f       	sbci	r17, 0xFF	; 255
   1fa9e:	25 df       	rcall	.-438    	; 0x1f8ea <getch>
   1faa0:	f8 01       	movw	r30, r16
   1faa2:	81 93       	st	Z+, r24
   1faa4:	8f 01       	movw	r16, r30
   1faa6:	80 91 2a 01 	lds	r24, 0x012A
   1faaa:	81 50       	subi	r24, 0x01	; 1
   1faac:	80 93 2a 01 	sts	0x012A, r24
   1fab0:	88 23       	and	r24, r24
   1fab2:	a9 f7       	brne	.-22     	; 0x1fa9e <processOptiboot+0xd4>
   1fab4:	80 91 28 01 	lds	r24, 0x0128
   1fab8:	90 91 29 01 	lds	r25, 0x0129
   1fabc:	f0 ee       	ldi	r31, 0xE0	; 224

		// While that is going on, read in page contents
		bufPtr = buff;
		do* bufPtr++ = getch();
   1fabe:	80 30       	cpi	r24, 0x00	; 0
   1fac0:	9f 07       	cpc	r25, r31
   1fac2:	48 f0       	brcs	.+18     	; 0x1fad6 <processOptiboot+0x10c>
   1fac4:	a0 e0       	ldi	r26, 0x00	; 0
   1fac6:	b0 e0       	ldi	r27, 0x00	; 0
		while(--length);
   1fac8:	23 e0       	ldi	r18, 0x03	; 3
   1faca:	fc 01       	movw	r30, r24
   1facc:	a0 93 5b 00 	sts	0x005B, r26
   1fad0:	20 93 57 00 	sts	0x0057, r18
   1fad4:	e8 95       	spm

		// If we are in NRWW section, page erase has to be delayed until now.
		// Todo: Take RAMPZ into account
		if(address >= NRWWSTART) boot_page_erase((uint16_t)(void*)address);
   1fad6:	65 df       	rcall	.-310    	; 0x1f9a2 <verifySpace>
   1fad8:	07 b6       	in	r0, 0x37	; 55
   1fada:	00 fc       	sbrc	r0, 0
   1fadc:	fd cf       	rjmp	.-6      	; 0x1fad8 <processOptiboot+0x10e>
   1fade:	a0 91 28 01 	lds	r26, 0x0128
   1fae2:	b0 91 29 01 	lds	r27, 0x0129
   1fae6:	89 81       	ldd	r24, Y+1	; 0x01
   1fae8:	9d 01       	movw	r18, r26
   1faea:	60 e8       	ldi	r22, 0x80	; 128
   1faec:	71 e0       	ldi	r23, 0x01	; 1
   1faee:	ae 01       	movw	r20, r28
   1faf0:	4f 5f       	subi	r20, 0xFF	; 255
   1faf2:	5f 4f       	sbci	r21, 0xFF	; 255
   1faf4:	4a 1b       	sub	r20, r26
   1faf6:	5b 0b       	sbc	r21, r27

		// Read command terminator, start reply
		verifySpace();
   1faf8:	a8 2e       	mov	r10, r24
   1fafa:	bb 24       	eor	r11, r11

		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();
   1fafc:	69 01       	movw	r12, r18
   1fafe:	ee 24       	eor	r14, r14
   1fb00:	ff 24       	eor	r15, r15

		// Copy buffer into programming buffer
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
   1fb02:	8a 01       	movw	r16, r20
   1fb04:	02 0f       	add	r16, r18
   1fb06:	13 1f       	adc	r17, r19
   1fb08:	f8 01       	movw	r30, r16
		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();

		// Copy buffer into programming buffer
		bufPtr = buff;
   1fb0a:	81 81       	ldd	r24, Z+1	; 0x01
   1fb0c:	90 e0       	ldi	r25, 0x00	; 0
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
   1fb0e:	98 2f       	mov	r25, r24
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			boot_page_fill((uint16_t)(void*)addrPtr, a);
   1fb10:	88 27       	eor	r24, r24
	while(--count);
	verifySpace();
}


uint8_t processOptiboot(void)
   1fb12:	8a 29       	or	r24, r10
   1fb14:	9b 29       	or	r25, r11
   1fb16:	0c 01       	movw	r0, r24
   1fb18:	f6 01       	movw	r30, r12
   1fb1a:	e0 92 5b 00 	sts	0x005B, r14
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
   1fb1e:	70 93 57 00 	sts	0x0057, r23
			a |= (*bufPtr++) << 8;
			boot_page_fill((uint16_t)(void*)addrPtr, a);
   1fb22:	e8 95       	spm
   1fb24:	11 24       	eor	r1, r1
	while(--count);
	verifySpace();
}


uint8_t processOptiboot(void)
   1fb26:	61 50       	subi	r22, 0x01	; 1
   1fb28:	29 f0       	breq	.+10     	; 0x1fb34 <processOptiboot+0x16a>
   1fb2a:	f8 01       	movw	r30, r16
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
   1fb2c:	82 81       	ldd	r24, Z+2	; 0x02
   1fb2e:	2e 5f       	subi	r18, 0xFE	; 254
   1fb30:	3f 4f       	sbci	r19, 0xFF	; 255
   1fb32:	e2 cf       	rjmp	.-60     	; 0x1faf8 <processOptiboot+0x12e>
   1fb34:	cd 01       	movw	r24, r26
   1fb36:	a0 e0       	ldi	r26, 0x00	; 0
   1fb38:	b0 e0       	ldi	r27, 0x00	; 0
			boot_page_fill((uint16_t)(void*)addrPtr, a);
   1fb3a:	25 e0       	ldi	r18, 0x05	; 5
   1fb3c:	fc 01       	movw	r30, r24
   1fb3e:	a0 93 5b 00 	sts	0x005B, r26
   1fb42:	20 93 57 00 	sts	0x0057, r18
   1fb46:	e8 95       	spm
   1fb48:	07 b6       	in	r0, 0x37	; 55
			addrPtr += 2;
		} while(--ch);
   1fb4a:	00 fc       	sbrc	r0, 0
   1fb4c:	fd cf       	rjmp	.-6      	; 0x1fb48 <processOptiboot+0x17e>
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
   1fb4e:	81 e1       	ldi	r24, 0x11	; 17
   1fb50:	80 93 57 00 	sts	0x0057, r24
   1fb54:	e8 95       	spm
   1fb56:	34 c0       	rjmp	.+104    	; 0x1fbc0 <processOptiboot+0x1f6>
			boot_page_fill((uint16_t)(void*)addrPtr, a);
			addrPtr += 2;
		} while(--ch);

		// Write from programming buffer
		boot_page_write((uint16_t)(void*)address);
   1fb58:	84 37       	cpi	r24, 0x74	; 116
   1fb5a:	e9 f4       	brne	.+58     	; 0x1fb96 <processOptiboot+0x1cc>
   1fb5c:	c6 de       	rcall	.-628    	; 0x1f8ea <getch>
   1fb5e:	c5 de       	rcall	.-630    	; 0x1f8ea <getch>
   1fb60:	80 93 2a 01 	sts	0x012A, r24
   1fb64:	c2 de       	rcall	.-636    	; 0x1f8ea <getch>
   1fb66:	1d df       	rcall	.-454    	; 0x1f9a2 <verifySpace>
   1fb68:	e0 91 28 01 	lds	r30, 0x0128
		boot_spm_busy_wait();
   1fb6c:	f0 91 29 01 	lds	r31, 0x0129
   1fb70:	86 91       	elpm	r24, Z

#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
   1fb72:	ae de       	rcall	.-676    	; 0x1f8d0 <putch>
   1fb74:	80 91 28 01 	lds	r24, 0x0128
   1fb78:	90 91 29 01 	lds	r25, 0x0129
#endif
	}
	/* Read memory block mode, length is big endian.  */
	else if(ch == STK_READ_PAGE) {
   1fb7c:	01 96       	adiw	r24, 0x01	; 1
   1fb7e:	90 93 29 01 	sts	0x0129, r25
		// READ PAGE - we only read flash
		getch();			/* getlen() */
   1fb82:	80 93 28 01 	sts	0x0128, r24
		length = getch();
   1fb86:	80 91 2a 01 	lds	r24, 0x012A
   1fb8a:	81 50       	subi	r24, 0x01	; 1
		getch();
   1fb8c:	80 93 2a 01 	sts	0x012A, r24

		verifySpace();
   1fb90:	88 23       	and	r24, r24
   1fb92:	51 f7       	brne	.-44     	; 0x1fb68 <processOptiboot+0x19e>
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560) || defined(__AVR_ATmega1284P__)
		//      do putch(pgm_read_byte_near(address++));
		//      while (--length);
		do {
			uint8_t result;
			__asm__("elpm %0,Z\n":"=r"(result):"z"(address));
   1fb94:	15 c0       	rjmp	.+42     	; 0x1fbc0 <processOptiboot+0x1f6>
   1fb96:	85 37       	cpi	r24, 0x75	; 117
   1fb98:	39 f4       	brne	.+14     	; 0x1fba8 <processOptiboot+0x1de>
   1fb9a:	03 df       	rcall	.-506    	; 0x1f9a2 <verifySpace>
   1fb9c:	8e e1       	ldi	r24, 0x1E	; 30
			putch(result);
   1fb9e:	98 de       	rcall	.-720    	; 0x1f8d0 <putch>
   1fba0:	87 e9       	ldi	r24, 0x97	; 151
			address++;
   1fba2:	96 de       	rcall	.-724    	; 0x1f8d0 <putch>
   1fba4:	85 e0       	ldi	r24, 0x05	; 5
   1fba6:	37 cf       	rjmp	.-402    	; 0x1fa16 <processOptiboot+0x4c>
   1fba8:	81 35       	cpi	r24, 0x51	; 81
   1fbaa:	49 f4       	brne	.+18     	; 0x1fbbe <processOptiboot+0x1f4>
   1fbac:	fa de       	rcall	.-524    	; 0x1f9a2 <verifySpace>
   1fbae:	82 e0       	ldi	r24, 0x02	; 2
   1fbb0:	90 e0       	ldi	r25, 0x00	; 0
   1fbb2:	6e ee       	ldi	r22, 0xEE	; 238
		} while(--length);
   1fbb4:	28 d0       	rcall	.+80     	; 0x1fc06 <__eewr_byte_m1284p>
   1fbb6:	80 e1       	ldi	r24, 0x10	; 16
   1fbb8:	8b de       	rcall	.-746    	; 0x1f8d0 <putch>
   1fbba:	80 e0       	ldi	r24, 0x00	; 0
   1fbbc:	04 c0       	rjmp	.+8      	; 0x1fbc6 <processOptiboot+0x1fc>
   1fbbe:	f1 de       	rcall	.-542    	; 0x1f9a2 <verifySpace>
   1fbc0:	80 e1       	ldi	r24, 0x10	; 16
   1fbc2:	86 de       	rcall	.-756    	; 0x1f8d0 <putch>
		do putch(pgm_read_byte_near(address++));
		while(--length);
#endif
	}
	/* Get device signature bytes  */
	else if(ch == STK_READ_SIGN) {
   1fbc4:	81 e0       	ldi	r24, 0x01	; 1
   1fbc6:	cf 5f       	subi	r28, 0xFF	; 255
		// READ SIGN - return what Avrdude wants to hear
		verifySpace();
   1fbc8:	de 4f       	sbci	r29, 0xFE	; 254
   1fbca:	de bf       	out	0x3e, r29	; 62
		putch(SIGNATURE_0);
   1fbcc:	cd bf       	out	0x3d, r28	; 61
   1fbce:	df 91       	pop	r29
   1fbd0:	cf 91       	pop	r28
		putch(SIGNATURE_1);
   1fbd2:	1f 91       	pop	r17
   1fbd4:	0f 91       	pop	r16
   1fbd6:	ff 90       	pop	r15
		putch(SIGNATURE_2);
   1fbd8:	ef 90       	pop	r14
   1fbda:	df 90       	pop	r13
	} else if(ch == STK_LEAVE_PROGMODE) {
   1fbdc:	cf 90       	pop	r12
   1fbde:	bf 90       	pop	r11
		// Adaboot no-wait mod
		//watchdogConfig(WATCHDOG_16MS);
		verifySpace();
   1fbe0:	af 90       	pop	r10
   1fbe2:	08 95       	ret

0001fbe4 <memcpy_PF>:
		eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   1fbe4:	fa 01       	movw	r30, r20
   1fbe6:	dc 01       	movw	r26, r24
   1fbe8:	02 c0       	rjmp	.+4      	; 0x1fbee <memcpy_PF+0xa>
   1fbea:	05 90       	lpm	r0, Z+
   1fbec:	0d 92       	st	X+, r0
		putch(STK_OK);
   1fbee:	21 50       	subi	r18, 0x01	; 1
   1fbf0:	30 40       	sbci	r19, 0x00	; 0
   1fbf2:	d8 f7       	brcc	.-10     	; 0x1fbea <memcpy_PF+0x6>
		return(0);
   1fbf4:	08 95       	ret

0001fbf6 <__eerd_byte_m1284p>:
   1fbf6:	f9 99       	sbic	0x1f, 1	; 31
	} else {
		// This covers the response to commands like STK_ENTER_PROGMODE
		verifySpace();
   1fbf8:	fe cf       	rjmp	.-4      	; 0x1fbf6 <__eerd_byte_m1284p>
   1fbfa:	92 bd       	out	0x22, r25	; 34
	}
	putch(STK_OK);
   1fbfc:	81 bd       	out	0x21, r24	; 33
   1fbfe:	f8 9a       	sbi	0x1f, 0	; 31
   1fc00:	99 27       	eor	r25, r25
	return(1);
   1fc02:	80 b5       	in	r24, 0x20	; 32
}
   1fc04:	08 95       	ret

0001fc06 <__eewr_byte_m1284p>:
   1fc06:	26 2f       	mov	r18, r22

0001fc08 <__eewr_r18_m1284p>:
   1fc08:	f9 99       	sbic	0x1f, 1	; 31
   1fc0a:	fe cf       	rjmp	.-4      	; 0x1fc08 <__eewr_r18_m1284p>
   1fc0c:	1f ba       	out	0x1f, r1	; 31
   1fc0e:	92 bd       	out	0x22, r25	; 34
   1fc10:	81 bd       	out	0x21, r24	; 33
   1fc12:	20 bd       	out	0x20, r18	; 32
   1fc14:	0f b6       	in	r0, 0x3f	; 63
   1fc16:	f8 94       	cli
   1fc18:	fa 9a       	sbi	0x1f, 2	; 31
   1fc1a:	f9 9a       	sbi	0x1f, 1	; 31
   1fc1c:	0f be       	out	0x3f, r0	; 63
   1fc1e:	01 96       	adiw	r24, 0x01	; 1
   1fc20:	08 95       	ret

0001fc22 <_exit>:
   1fc22:	f8 94       	cli

0001fc24 <__stop_program>:
   1fc24:	ff cf       	rjmp	.-2      	; 0x1fc24 <__stop_program>
