
semboot_atmega328_w5100.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00007ad4  00000b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ad4  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800120  00800120  00000b88  2**0
                  ALLOC
  3 .stab         000008c4  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000198  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000015e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001508  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098a  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cdd  00000000  00000000  0000361a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  000042f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054e  00000000  00000000  000046c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000141a  00000000  00000000  00004c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000602c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	50 c0       	rjmp	.+160    	; 0x70a2 <__ctors_end>
    7002:	00 00       	nop
    7004:	c7 c0       	rjmp	.+398    	; 0x7194 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	c5 c0       	rjmp	.+394    	; 0x7194 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	c3 c0       	rjmp	.+390    	; 0x7194 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	c1 c0       	rjmp	.+386    	; 0x7194 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	bf c0       	rjmp	.+382    	; 0x7194 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	bd c0       	rjmp	.+378    	; 0x7194 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	bb c0       	rjmp	.+374    	; 0x7194 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	b9 c0       	rjmp	.+370    	; 0x7194 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	b7 c0       	rjmp	.+366    	; 0x7194 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	b5 c0       	rjmp	.+362    	; 0x7194 <__bad_interrupt>
    702a:	00 00       	nop
    702c:	b3 c0       	rjmp	.+358    	; 0x7194 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	b1 c0       	rjmp	.+354    	; 0x7194 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	af c0       	rjmp	.+350    	; 0x7194 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	ad c0       	rjmp	.+346    	; 0x7194 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	ab c0       	rjmp	.+342    	; 0x7194 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	a9 c0       	rjmp	.+338    	; 0x7194 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	a7 c0       	rjmp	.+334    	; 0x7194 <__bad_interrupt>
    7046:	00 00       	nop
    7048:	a5 c0       	rjmp	.+330    	; 0x7194 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	a3 c0       	rjmp	.+326    	; 0x7194 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	a1 c0       	rjmp	.+322    	; 0x7194 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	9f c0       	rjmp	.+318    	; 0x7194 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	9d c0       	rjmp	.+314    	; 0x7194 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	9b c0       	rjmp	.+310    	; 0x7194 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	99 c0       	rjmp	.+306    	; 0x7194 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	97 c0       	rjmp	.+302    	; 0x7194 <__bad_interrupt>
	...

00007068 <tftp_invalid_image_packet>:
    7068:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
    7078:	67 65 20 66 69 6c 65 00                             ge file.

00007080 <tftp_unknown_error_packet>:
    7080:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0000708b <tftp_full_error_packet>:
    708b:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

00007095 <tftp_opcode_error_packet>:
    7095:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

000070a2 <__ctors_end>:
    70a2:	11 24       	eor	r1, r1
    70a4:	1f be       	out	0x3f, r1	; 63
    70a6:	cf ef       	ldi	r28, 0xFF	; 255
    70a8:	d8 e0       	ldi	r29, 0x08	; 8
    70aa:	de bf       	out	0x3e, r29	; 62
    70ac:	cd bf       	out	0x3d, r28	; 61

000070ae <__do_copy_data>:
    70ae:	11 e0       	ldi	r17, 0x01	; 1
    70b0:	a0 e0       	ldi	r26, 0x00	; 0
    70b2:	b1 e0       	ldi	r27, 0x01	; 1
    70b4:	e4 ed       	ldi	r30, 0xD4	; 212
    70b6:	fa e7       	ldi	r31, 0x7A	; 122
    70b8:	02 c0       	rjmp	.+4      	; 0x70be <__do_copy_data+0x10>
    70ba:	05 90       	lpm	r0, Z+
    70bc:	0d 92       	st	X+, r0
    70be:	a0 32       	cpi	r26, 0x20	; 32
    70c0:	b1 07       	cpc	r27, r17
    70c2:	d9 f7       	brne	.-10     	; 0x70ba <__do_copy_data+0xc>

000070c4 <__do_clear_bss>:
    70c4:	11 e0       	ldi	r17, 0x01	; 1
    70c6:	a0 e2       	ldi	r26, 0x20	; 32
    70c8:	b1 e0       	ldi	r27, 0x01	; 1
    70ca:	01 c0       	rjmp	.+2      	; 0x70ce <.do_clear_bss_start>

000070cc <.do_clear_bss_loop>:
    70cc:	1d 92       	st	X+, r1

000070ce <.do_clear_bss_start>:
    70ce:	af 32       	cpi	r26, 0x2F	; 47
    70d0:	b1 07       	cpc	r27, r17
    70d2:	e1 f7       	brne	.-8      	; 0x70cc <.do_clear_bss_loop>
    70d4:	01 d0       	rcall	.+2      	; 0x70d8 <main>
    70d6:	fc c4       	rjmp	.+2552   	; 0x7ad0 <_exit>

000070d8 <main>:

int main(void)
{
	/* Disable the watchdog timer to prevent
	 * eternal reset loop of doom and despair */
	uint8_t ch = MCUSR;
    70d8:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
    70da:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    70dc:	98 e1       	ldi	r25, 0x18	; 24
    70de:	0f b6       	in	r0, 0x3f	; 63
    70e0:	f8 94       	cli
    70e2:	90 93 60 00 	sts	0x0060, r25
    70e6:	10 92 60 00 	sts	0x0060, r1
    70ea:	0f be       	out	0x3f, r0	; 63
	if (!(ch & _BV(EXTRF))) appStart(); //if not external (hard reset) skip bootloader
    70ec:	81 fd       	sbrc	r24, 1
    70ee:	01 c0       	rjmp	.+2      	; 0x70f2 <main+0x1a>
    70f0:	d4 d3       	rcall	.+1960   	; 0x789a <appStart>
    70f2:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    70f4:	95 ea       	ldi	r25, 0xA5	; 165
    70f6:	ae e0       	ldi	r26, 0x0E	; 14
    70f8:	81 50       	subi	r24, 0x01	; 1
    70fa:	90 40       	sbci	r25, 0x00	; 0
    70fc:	a0 40       	sbci	r26, 0x00	; 0
    70fe:	e1 f7       	brne	.-8      	; 0x70f8 <main+0x20>
    7100:	00 c0       	rjmp	.+0      	; 0x7102 <main+0x2a>
    7102:	00 00       	nop
    7104:	11 24       	eor	r1, r1
	/* This code makes the following assumptions:
	 * No interrupts will execute
	 * SP points to RAMEND
	 * r1 contains zero */
	//cli();
	asm volatile("clr __zero_reg__");
    7106:	85 e0       	ldi	r24, 0x05	; 5
	// 0x02 -> ClkIO/8 -> 500ns period, 32ms max
	// 0X03 -> ClkIO/64 -> 4us period, 256ms max
	// 0x04 -> ClkIO/256 -> 16us period, 1024ms max
	// 0x05 -> ClkIO/1024 -> 64us period, 4096ms max
	// Set up Timer 1 as timekeeper for LED flashing
	TCCR1B = _BV(CS12) | _BV(CS10); // Same thing as TCCR1B = 0x05;
    7108:	80 93 81 00 	sts	0x0081, r24
    710c:	80 e0       	ldi	r24, 0x00	; 0

	/* Write version information in the EEPROM */
	if(eeprom_read_byte(EEPROM_MAJVER) != ARIADNE_MAJVER)
    710e:	90 e0       	ldi	r25, 0x00	; 0
    7110:	c9 d4       	rcall	.+2450   	; 0x7aa4 <__eerd_byte_m328p>
    7112:	88 23       	and	r24, r24
    7114:	21 f0       	breq	.+8      	; 0x711e <main+0x46>
    7116:	80 e0       	ldi	r24, 0x00	; 0
    7118:	90 e0       	ldi	r25, 0x00	; 0
		eeprom_write_byte(EEPROM_MAJVER, ARIADNE_MAJVER);
    711a:	60 e0       	ldi	r22, 0x00	; 0
    711c:	cb d4       	rcall	.+2454   	; 0x7ab4 <__eewr_byte_m328p>
    711e:	81 e0       	ldi	r24, 0x01	; 1
    7120:	90 e0       	ldi	r25, 0x00	; 0
    7122:	c0 d4       	rcall	.+2432   	; 0x7aa4 <__eerd_byte_m328p>
	if(eeprom_read_byte(EEPROM_MINVER) != ARIADNE_MINVER)
    7124:	84 30       	cpi	r24, 0x04	; 4
    7126:	21 f0       	breq	.+8      	; 0x7130 <main+0x58>
    7128:	81 e0       	ldi	r24, 0x01	; 1
    712a:	90 e0       	ldi	r25, 0x00	; 0
    712c:	64 e0       	ldi	r22, 0x04	; 4
    712e:	c2 d4       	rcall	.+2436   	; 0x7ab4 <__eewr_byte_m328p>
		eeprom_write_byte(EEPROM_MINVER, ARIADNE_MINVER);
    7130:	44 d3       	rcall	.+1672   	; 0x77ba <serialInit>
    7132:	92 d0       	rcall	.+292    	; 0x7258 <spiInit>
    7134:	9c d0       	rcall	.+312    	; 0x726e <netInit>
    7136:	46 d2       	rcall	.+1164   	; 0x75c4 <tftpInit>
    7138:	10 92 2d 01 	sts	0x012D, r1

	//Initialize UART communication
	serialInit();
    713c:	10 92 2e 01 	sts	0x012E, r1
		buttonInit();
	)

	/** Initalize SPI communication */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_SPI);)
	spiInit();
    7140:	13 e0       	ldi	r17, 0x03	; 3
	/** Initialize networking */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_NET);)
	netInit();
    7142:	c0 e0       	ldi	r28, 0x00	; 0
    7144:	d0 e0       	ldi	r29, 0x00	; 0

	// Initialize the UDP socket for tftp
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_TFTP);)
	tftpInit();
    7146:	80 91 2d 01 	lds	r24, 0x012D
#if defined(ANNOUNCE)
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_ANN);)
	announceInit();
#endif

	serialFlashing = FALSE;
    714a:	88 23       	and	r24, r24
    714c:	19 f4       	brne	.+6      	; 0x7154 <main+0x7c>
	tftpFlashing = FALSE;
    714e:	5d d2       	rcall	.+1210   	; 0x760a <tftpPoll>
    7150:	88 23       	and	r24, r24
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
				// Delete first page of flash memory
				boot_page_erase(0);
    7152:	e9 f0       	breq	.+58     	; 0x718e <main+0xb6>
    7154:	80 91 2e 01 	lds	r24, 0x012E
	serialFlashing = FALSE;
	tftpFlashing = FALSE;

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
    7158:	88 23       	and	r24, r24
    715a:	19 f4       	brne	.+6      	; 0x7162 <main+0x8a>
    715c:	54 d3       	rcall	.+1704   	; 0x7806 <serialPoll>
    715e:	88 23       	and	r24, r24
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
    7160:	b1 f0       	breq	.+44     	; 0x718e <main+0xb6>
    7162:	87 d3       	rcall	.+1806   	; 0x7872 <timedOut>
    7164:	88 23       	and	r24, r24
    7166:	89 f0       	breq	.+34     	; 0x718a <main+0xb2>
				break;

		// If there is no tftp flashing, poll serial
		if(!tftpFlashing)
    7168:	82 e0       	ldi	r24, 0x02	; 2
    716a:	90 e0       	ldi	r25, 0x00	; 0
    716c:	9b d4       	rcall	.+2358   	; 0x7aa4 <__eerd_byte_m328p>
    716e:	8e 3e       	cpi	r24, 0xEE	; 238
			// If flashing is done exit
			if(serialPoll() == 0)
    7170:	71 f0       	breq	.+28     	; 0x718e <main+0xb6>
    7172:	80 91 2e 01 	lds	r24, 0x012E
    7176:	81 30       	cpi	r24, 0x01	; 1
		/* As explained above this goes out */
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if(timedOut()) {
    7178:	41 f4       	brne	.+16     	; 0x718a <main+0xb2>
    717a:	fe 01       	movw	r30, r28
    717c:	10 93 57 00 	sts	0x0057, r17
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;
    7180:	e8 95       	spm
    7182:	20 d2       	rcall	.+1088   	; 0x75c4 <tftpInit>
    7184:	6d d3       	rcall	.+1754   	; 0x7860 <resetTick>
    7186:	10 92 2e 01 	sts	0x012E, r1
    718a:	48 d3       	rcall	.+1680   	; 0x781c <updateLed>

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
    718c:	dc cf       	rjmp	.-72     	; 0x7146 <main+0x6e>
    718e:	85 d3       	rcall	.+1802   	; 0x789a <appStart>
    7190:	80 e0       	ldi	r24, 0x00	; 0
    7192:	90 e0       	ldi	r25, 0x00	; 0

00007194 <__bad_interrupt>:
				// Delete first page of flash memory
				boot_page_erase(0);
    7194:	35 cf       	rjmp	.-406    	; 0x7000 <__vectors>

00007196 <spiWriteReg>:
		tracePGM(mDebugSpi_COMMA);
		tracenum(value);
	)

	
	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
    7196:	20 e5       	ldi	r18, 0x50	; 80
    7198:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    719a:	2a 98       	cbi	0x05, 2	; 5
	SPDR = cb;  //Socket 3 BSB Write 0x6D Selects Socket 3 Register, write mode, 1 byte data length
	while(!(SPSR & _BV(SPIF)));

#else //Standard W5100 Code

	SPDR = SPI_WRITE;
    719c:	20 ef       	ldi	r18, 0xF0	; 240
    719e:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71a0:	0d b4       	in	r0, 0x2d	; 45
    71a2:	07 fe       	sbrs	r0, 7
    71a4:	fd cf       	rjmp	.-6      	; 0x71a0 <spiWriteReg+0xa>

	SPDR = address >> 8;
    71a6:	29 2f       	mov	r18, r25
    71a8:	33 27       	eor	r19, r19
    71aa:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71ac:	0d b4       	in	r0, 0x2d	; 45
    71ae:	07 fe       	sbrs	r0, 7
    71b0:	fd cf       	rjmp	.-6      	; 0x71ac <spiWriteReg+0x16>

	SPDR = address & 0xff;
    71b2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    71b4:	0d b4       	in	r0, 0x2d	; 45
    71b6:	07 fe       	sbrs	r0, 7
    71b8:	fd cf       	rjmp	.-6      	; 0x71b4 <spiWriteReg+0x1e>

#endif

	SPDR = value;
    71ba:	4e bd       	out	0x2e, r20	; 46
	while(!(SPSR & _BV(SPIF)));
    71bc:	0d b4       	in	r0, 0x2d	; 45
    71be:	07 fe       	sbrs	r0, 7
    71c0:	fd cf       	rjmp	.-6      	; 0x71bc <spiWriteReg+0x26>

	SS_HIGH();
    71c2:	2a 9a       	sbi	0x05, 2	; 5
	
	cb = 0; //prevents compiler whining about unused cb variable
	SPCR = cb; // Turn off SPI
    71c4:	1c bc       	out	0x2c, r1	; 44
}
    71c6:	08 95       	ret

000071c8 <spiWriteWord>:

void spiWriteWord(uint16_t address, uint8_t cb, uint16_t value)
{
    71c8:	ef 92       	push	r14
    71ca:	ff 92       	push	r15
    71cc:	1f 93       	push	r17
    71ce:	cf 93       	push	r28
    71d0:	df 93       	push	r29
    71d2:	ec 01       	movw	r28, r24
    71d4:	16 2f       	mov	r17, r22
    71d6:	7a 01       	movw	r14, r20
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, cb, value >> 8);
    71d8:	45 2f       	mov	r20, r21
    71da:	55 27       	eor	r21, r21
    71dc:	dc df       	rcall	.-72     	; 0x7196 <spiWriteReg>
    71de:	ce 01       	movw	r24, r28
	spiWriteReg(address, cb, value & 0xff);
    71e0:	01 96       	adiw	r24, 0x01	; 1
    71e2:	61 2f       	mov	r22, r17
    71e4:	4e 2d       	mov	r20, r14
    71e6:	d7 df       	rcall	.-82     	; 0x7196 <spiWriteReg>
    71e8:	df 91       	pop	r29
    71ea:	cf 91       	pop	r28
}
    71ec:	1f 91       	pop	r17
    71ee:	ff 90       	pop	r15
    71f0:	ef 90       	pop	r14
    71f2:	08 95       	ret

000071f4 <spiReadReg>:
    71f4:	20 e5       	ldi	r18, 0x50	; 80
    71f6:	2c bd       	out	0x2c, r18	; 44
	)
	//#endif

	uint8_t returnValue;

	SPCR = _BV(SPE) | _BV(MSTR);
    71f8:	2a 98       	cbi	0x05, 2	; 5
    71fa:	2f e0       	ldi	r18, 0x0F	; 15
	SS_LOW();
    71fc:	2e bd       	out	0x2e, r18	; 46
	SPDR = cb;  //Socket 3 BSB Read 0x69 Selects Socket 3 Register, read mode, 1 byte data length
	while(!(SPSR & _BV(SPIF)));

#else //Standard W5100 Code

	SPDR = SPI_READ;
    71fe:	0d b4       	in	r0, 0x2d	; 45
    7200:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
    7202:	fd cf       	rjmp	.-6      	; 0x71fe <spiReadReg+0xa>
    7204:	29 2f       	mov	r18, r25
    7206:	33 27       	eor	r19, r19

	SPDR = address >> 8;
    7208:	2e bd       	out	0x2e, r18	; 46
    720a:	0d b4       	in	r0, 0x2d	; 45
    720c:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
    720e:	fd cf       	rjmp	.-6      	; 0x720a <spiReadReg+0x16>
    7210:	8e bd       	out	0x2e, r24	; 46
    7212:	0d b4       	in	r0, 0x2d	; 45

	SPDR = address & 0xff;
    7214:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
    7216:	fd cf       	rjmp	.-6      	; 0x7212 <spiReadReg+0x1e>
    7218:	1e bc       	out	0x2e, r1	; 46
    721a:	0d b4       	in	r0, 0x2d	; 45

#endif

	SPDR = 0;
    721c:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
    721e:	fd cf       	rjmp	.-6      	; 0x721a <spiReadReg+0x26>
    7220:	2a 9a       	sbi	0x05, 2	; 5
    7222:	8e b5       	in	r24, 0x2e	; 46

	SS_HIGH();
    7224:	1c bc       	out	0x2c, r1	; 44
	returnValue = SPDR;
    7226:	08 95       	ret

00007228 <spiReadWord>:
	
	cb = 0; //prevents compiler whining about unused cb variable
	SPCR = cb; // Turn off SPI
    7228:	0f 93       	push	r16
		tracePGM(mDebugSpi_COMMA);
		tracenum(returnValue);
	)
	return(returnValue);
	
}
    722a:	1f 93       	push	r17

uint16_t spiReadWord(uint16_t address, uint8_t cb)
{
    722c:	cf 93       	push	r28
    722e:	df 93       	push	r29
    7230:	ec 01       	movw	r28, r24
    7232:	16 2f       	mov	r17, r22
    7234:	df df       	rcall	.-66     	; 0x71f4 <spiReadReg>
    7236:	08 2f       	mov	r16, r24
	// Read uint16_t from Ethernet controller
	return((spiReadReg(address, cb) << 8) | spiReadReg(address + 1, cb));
    7238:	ce 01       	movw	r24, r28
    723a:	01 96       	adiw	r24, 0x01	; 1
    723c:	61 2f       	mov	r22, r17
    723e:	da df       	rcall	.-76     	; 0x71f4 <spiReadReg>
    7240:	20 2f       	mov	r18, r16
    7242:	30 e0       	ldi	r19, 0x00	; 0
    7244:	32 2f       	mov	r19, r18
    7246:	22 27       	eor	r18, r18
    7248:	90 e0       	ldi	r25, 0x00	; 0
    724a:	82 2b       	or	r24, r18
    724c:	93 2b       	or	r25, r19
    724e:	df 91       	pop	r29
    7250:	cf 91       	pop	r28
}
    7252:	1f 91       	pop	r17
    7254:	0f 91       	pop	r16
    7256:	08 95       	ret

00007258 <spiInit>:
    7258:	8c e2       	ldi	r24, 0x2C	; 44
    725a:	85 b9       	out	0x05, r24	; 5
    725c:	84 b9       	out	0x04, r24	; 4
    725e:	24 98       	cbi	0x04, 4	; 4
	 * At this stage all pins are set to HIGH. This in fact DISABLES SPI for both Ethernet and SD.
	 * SS pin for ethernet is pulled low just in time for reading or writing data inside those
	 * functions. */

	/** Set SPI pins high */
	SPI_PORT = _BV(SCK) | _BV(MOSI) | _BV(SS);
    7260:	5c 9a       	sbi	0x0b, 4	; 11
    7262:	54 9a       	sbi	0x0a, 4	; 10
	//SPI_PORT |= _BV(SS);
	/** Set SPI pins as output */
	SPI_DDR = _BV(SCK) | _BV(MOSI) | _BV(SS);
    7264:	81 e5       	ldi	r24, 0x51	; 81
	//SPI_DDR |= _BV(SS);
	
	//MISO as input
	SPI_DDR &= ~_BV(MISO);
    7266:	8c bd       	out	0x2c, r24	; 44
	ETH_DDR |= _BV(ETH_SS);
	#endif

	/** Disable SD card */
	/** Set SD SS pin high */
	SD_PORT |= _BV(SD_SS);
    7268:	81 e0       	ldi	r24, 0x01	; 1
	/** Set SD SS pin as output */
	SD_DDR |= _BV(SD_SS);
    726a:	8d bd       	out	0x2d, r24	; 45
	/** Set led pin as output */
	LED_DDR |= _BV(LED);
	#endif

	//Set as Master
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );
    726c:	08 95       	ret

0000726e <netInit>:
	0x55          // TMSR Tx Memory Size Register, 2K per socket
};


void netInit(void)
{
    726e:	0f 93       	push	r16
    7270:	1f 93       	push	r17
    7272:	cf 93       	push	r28
    7274:	df 93       	push	r29
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
    7276:	83 e0       	ldi	r24, 0x03	; 3
    7278:	90 e0       	ldi	r25, 0x00	; 0
    727a:	14 d4       	rcall	.+2088   	; 0x7aa4 <__eerd_byte_m328p>
    727c:	85 35       	cpi	r24, 0x55	; 85
    727e:	91 f4       	brne	.+36     	; 0x72a4 <netInit+0x36>
    7280:	84 e0       	ldi	r24, 0x04	; 4
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	0f d4       	rcall	.+2078   	; 0x7aa4 <__eerd_byte_m328p>
    7286:	8a 3a       	cpi	r24, 0xAA	; 170
    7288:	69 f4       	brne	.+26     	; 0x72a4 <netInit+0x36>
    728a:	01 e0       	ldi	r16, 0x01	; 1
    728c:	11 e0       	ldi	r17, 0x01	; 1
    728e:	c5 e0       	ldi	r28, 0x05	; 5
    7290:	d0 e0       	ldi	r29, 0x00	; 0
    7292:	ce 01       	movw	r24, r28
    7294:	07 d4       	rcall	.+2062   	; 0x7aa4 <__eerd_byte_m328p>

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
    7296:	f8 01       	movw	r30, r16
    7298:	81 93       	st	Z+, r24
    729a:	8f 01       	movw	r16, r30
    729c:	21 96       	adiw	r28, 0x01	; 1
    729e:	c7 31       	cpi	r28, 0x17	; 23
    72a0:	d1 05       	cpc	r29, r1
    72a2:	b9 f7       	brne	.-18     	; 0x7292 <netInit+0x24>
	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
    72a4:	00 e0       	ldi	r16, 0x00	; 0
    72a6:	11 e0       	ldi	r17, 0x01	; 1
    72a8:	c0 e0       	ldi	r28, 0x00	; 0
    72aa:	d0 e0       	ldi	r29, 0x00	; 0
    72ac:	f8 01       	movw	r30, r16
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
    72ae:	41 91       	ld	r20, Z+
    72b0:	8f 01       	movw	r16, r30
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		spiWriteReg(i, 0, registerBuffer[i]);
    72b2:	ce 01       	movw	r24, r28
    72b4:	60 e0       	ldi	r22, 0x00	; 0
    72b6:	6f df       	rcall	.-290    	; 0x7196 <spiWriteReg>
    72b8:	21 96       	adiw	r28, 0x01	; 1
    72ba:	cc 31       	cpi	r28, 0x1C	; 28
    72bc:	d1 05       	cpc	r29, r1
    72be:	b1 f7       	brne	.-20     	; 0x72ac <netInit+0x3e>
    72c0:	df 91       	pop	r29
			if(i != 14) putch(0x2E);
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
    72c2:	cf 91       	pop	r28
    72c4:	1f 91       	pop	r17
    72c6:	0f 91       	pop	r16
		spiWriteReg(i, 0, registerBuffer[i]);


	DBG_NET(tracePGMlnNet(mDebugNet_DONE);)
}
    72c8:	08 95       	ret

000072ca <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
    72ca:	cf 93       	push	r28
    72cc:	df 93       	push	r29
    72ce:	ec 01       	movw	r28, r24
		tracePGMlnTftp(mDebugTftp_SOCK);
		tracenum(port);
	)


	spiWriteReg(REG_S3_CR, S3_W_CB, CR_CLOSE);
    72d0:	81 e0       	ldi	r24, 0x01	; 1
    72d2:	97 e0       	ldi	r25, 0x07	; 7
    72d4:	6c e6       	ldi	r22, 0x6C	; 108
    72d6:	40 e1       	ldi	r20, 0x10	; 16
    72d8:	5e df       	rcall	.-324    	; 0x7196 <spiWriteReg>
    72da:	81 e0       	ldi	r24, 0x01	; 1
        while(spiReadReg(REG_S3_CR, S3_R_CB)) {
    72dc:	97 e0       	ldi	r25, 0x07	; 7
    72de:	68 e6       	ldi	r22, 0x68	; 104
    72e0:	89 df       	rcall	.-238    	; 0x71f4 <spiReadReg>
    72e2:	88 23       	and	r24, r24
    72e4:	d1 f7       	brne	.-12     	; 0x72da <sockInit+0x10>
    72e6:	82 e0       	ldi	r24, 0x02	; 2
    72e8:	97 e0       	ldi	r25, 0x07	; 7
        	//wait for command to complete	
        }  
        
	do {
                // Write interrupt
		spiWriteReg(REG_S3_IR, S3_W_CB, 0xFF);
    72ea:	6c e6       	ldi	r22, 0x6C	; 108
    72ec:	4f ef       	ldi	r20, 0xFF	; 255
    72ee:	53 df       	rcall	.-346    	; 0x7196 <spiWriteReg>
    72f0:	80 e0       	ldi	r24, 0x00	; 0
    72f2:	97 e0       	ldi	r25, 0x07	; 7
    72f4:	6c e6       	ldi	r22, 0x6C	; 108
                // Write mode
                spiWriteReg(REG_S3_MR, S3_W_CB, MR_UDP);
    72f6:	42 e0       	ldi	r20, 0x02	; 2
    72f8:	4e df       	rcall	.-356    	; 0x7196 <spiWriteReg>
    72fa:	84 e0       	ldi	r24, 0x04	; 4
    72fc:	97 e0       	ldi	r25, 0x07	; 7
    72fe:	6c e6       	ldi	r22, 0x6C	; 108
    7300:	ae 01       	movw	r20, r28
                // Write TFTP Port
		spiWriteWord(REG_S3_PORT0, S3_W_CB, port);
    7302:	62 df       	rcall	.-316    	; 0x71c8 <spiWriteWord>
    7304:	81 e0       	ldi	r24, 0x01	; 1
    7306:	97 e0       	ldi	r25, 0x07	; 7
    7308:	6c e6       	ldi	r22, 0x6C	; 108
    730a:	41 e0       	ldi	r20, 0x01	; 1
    730c:	44 df       	rcall	.-376    	; 0x7196 <spiWriteReg>
		// Open Socket
        	spiWriteReg(REG_S3_CR, S3_W_CB, CR_OPEN);
    730e:	81 e0       	ldi	r24, 0x01	; 1
    7310:	97 e0       	ldi	r25, 0x07	; 7
    7312:	68 e6       	ldi	r22, 0x68	; 104
    7314:	6f df       	rcall	.-290    	; 0x71f4 <spiReadReg>
    7316:	88 23       	and	r24, r24
    7318:	d1 f7       	brne	.-12     	; 0x730e <sockInit+0x44>
        	while(spiReadReg(REG_S3_CR, S3_R_CB)) {
    731a:	83 e0       	ldi	r24, 0x03	; 3
    731c:	97 e0       	ldi	r25, 0x07	; 7
    731e:	68 e6       	ldi	r22, 0x68	; 104
    7320:	69 df       	rcall	.-302    	; 0x71f4 <spiReadReg>
    7322:	82 32       	cpi	r24, 0x22	; 34
    7324:	29 f0       	breq	.+10     	; 0x7330 <sockInit+0x66>
    7326:	81 e0       	ldi	r24, 0x01	; 1
        		//wait for command to complete	
 		} 
		// Read Status
		if(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP)
    7328:	97 e0       	ldi	r25, 0x07	; 7
    732a:	6c e6       	ldi	r22, 0x6C	; 108
    732c:	40 e1       	ldi	r20, 0x10	; 16
    732e:	33 df       	rcall	.-410    	; 0x7196 <spiWriteReg>
    7330:	83 e0       	ldi	r24, 0x03	; 3
    7332:	97 e0       	ldi	r25, 0x07	; 7
    7334:	68 e6       	ldi	r22, 0x68	; 104
			// Close Socket if it wasn't initialized correctly
			spiWriteReg(REG_S3_CR, S3_W_CB, CR_CLOSE);
    7336:	5e df       	rcall	.-324    	; 0x71f4 <spiReadReg>
    7338:	82 32       	cpi	r24, 0x22	; 34
    733a:	a9 f6       	brne	.-86     	; 0x72e6 <sockInit+0x1c>
    733c:	df 91       	pop	r29
    733e:	cf 91       	pop	r28
    7340:	08 95       	ret

00007342 <processPacket>:


		// If socket correctly opened continue
	} while(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP);
    7342:	bf 92       	push	r11
    7344:	cf 92       	push	r12
    7346:	df 92       	push	r13
    7348:	ef 92       	push	r14
    734a:	ff 92       	push	r15
    734c:	0f 93       	push	r16
    734e:	1f 93       	push	r17
}
    7350:	cf 93       	push	r28
    7352:	df 93       	push	r29
    7354:	cd b7       	in	r28, 0x3d	; 61
#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
#endif
{
    7356:	de b7       	in	r29, 0x3e	; 62
    7358:	cc 50       	subi	r28, 0x0C	; 12
    735a:	d2 40       	sbci	r29, 0x02	; 2
    735c:	de bf       	out	0x3e, r29	; 62
    735e:	cd bf       	out	0x3d, r28	; 61
    7360:	88 e2       	ldi	r24, 0x28	; 40
    7362:	97 e0       	ldi	r25, 0x07	; 7
    7364:	68 e6       	ldi	r22, 0x68	; 104
    7366:	60 df       	rcall	.-320    	; 0x7228 <spiReadWord>
    7368:	ac 01       	movw	r20, r24
    736a:	00 97       	sbiw	r24, 0x00	; 0
    736c:	11 f4       	brne	.+4      	; 0x7372 <processPacket+0x30>
    736e:	40 e0       	ldi	r20, 0x00	; 0
    7370:	58 e7       	ldi	r21, 0x78	; 120
    7372:	ad e0       	ldi	r26, 0x0D	; 13

		DBG_BTN(button();)
	)

	// Read data from chip to buffer
	readPointer = spiReadWord(REG_S3_RX_RD0, S3_R_CB);
    7374:	ca 2e       	mov	r12, r26
    7376:	a2 e0       	ldi	r26, 0x02	; 2
    7378:	da 2e       	mov	r13, r26
    737a:	cc 0e       	add	r12, r28
    737c:	dd 1e       	adc	r13, r29
    737e:	7e 01       	movw	r14, r28

	if(readPointer == 0) readPointer = 0x0000;

#else

	if(readPointer == 0) readPointer += S3_RX_START;
    7380:	08 94       	sec
    7382:	e1 1c       	adc	r14, r1
    7384:	f1 1c       	adc	r15, r1
    7386:	10 c0       	rjmp	.+32     	; 0x73a8 <processPacket+0x66>


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
    7388:	8a 01       	movw	r16, r20
    738a:	0f 5f       	subi	r16, 0xFF	; 255
    738c:	1f 4f       	sbci	r17, 0xFF	; 255
    738e:	ca 01       	movw	r24, r20
    7390:	60 e0       	ldi	r22, 0x00	; 0
    7392:	30 df       	rcall	.-416    	; 0x71f4 <spiReadReg>
    7394:	f7 01       	movw	r30, r14
    7396:	81 93       	st	Z+, r24
    7398:	7f 01       	movw	r14, r30
    739a:	f0 e8       	ldi	r31, 0x80	; 128
    739c:	00 30       	cpi	r16, 0x00	; 0
		*bufPtr++ = spiReadReg(readPointer++, S3_RXBUF_CB);

		if(readPointer == 0xFFFF) readPointer = 0x0000; //changed 0c0800 to 0xFFFF, fixes a 4th packet retransmit bug. upload speed changed from 500sec to 90sec for 100kb program
#else

		*bufPtr++ = spiReadReg(readPointer++, 0);
    739e:	1f 07       	cpc	r17, r31
    73a0:	11 f4       	brne	.+4      	; 0x73a6 <processPacket+0x64>
    73a2:	00 e0       	ldi	r16, 0x00	; 0
    73a4:	18 e7       	ldi	r17, 0x78	; 120
    73a6:	a8 01       	movw	r20, r16
    73a8:	ec 14       	cp	r14, r12
    73aa:	fd 04       	cpc	r15, r13
    73ac:	69 f7       	brne	.-38     	; 0x7388 <processPacket+0x46>
    73ae:	88 e2       	ldi	r24, 0x28	; 40
    73b0:	97 e0       	ldi	r25, 0x07	; 7

		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
    73b2:	6c e6       	ldi	r22, 0x6C	; 108
    73b4:	09 df       	rcall	.-494    	; 0x71c8 <spiWriteWord>
    73b6:	81 e0       	ldi	r24, 0x01	; 1
    73b8:	97 e0       	ldi	r25, 0x07	; 7
    73ba:	6c e6       	ldi	r22, 0x6C	; 108
    73bc:	40 e4       	ldi	r20, 0x40	; 64


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
    73be:	eb de       	rcall	.-554    	; 0x7196 <spiWriteReg>

	if(readPointer == 0) readPointer += S3_RX_START;

#endif

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
    73c0:	81 e0       	ldi	r24, 0x01	; 1
    73c2:	97 e0       	ldi	r25, 0x07	; 7
    73c4:	68 e6       	ldi	r22, 0x68	; 104

#endif

	}

	spiWriteWord(REG_S3_RX_RD0, S3_W_CB, readPointer);     // Write back new pointer
    73c6:	16 df       	rcall	.-468    	; 0x71f4 <spiReadReg>
    73c8:	88 23       	and	r24, r24
    73ca:	d1 f7       	brne	.-12     	; 0x73c0 <processPacket+0x7e>
    73cc:	8e 01       	movw	r16, r28
    73ce:	0f 5f       	subi	r16, 0xFF	; 255
	spiWriteReg(REG_S3_CR, S3_W_CB, CR_RECV);
    73d0:	1f 4f       	sbci	r17, 0xFF	; 255
    73d2:	fc e0       	ldi	r31, 0x0C	; 12
    73d4:	ef 2e       	mov	r14, r31
    73d6:	f7 e0       	ldi	r31, 0x07	; 7
    73d8:	ff 2e       	mov	r15, r31
    73da:	f8 01       	movw	r30, r16

	while(spiReadReg(REG_S3_CR, S3_R_CB));
    73dc:	41 91       	ld	r20, Z+
    73de:	8f 01       	movw	r16, r30
    73e0:	c7 01       	movw	r24, r14
    73e2:	6c e6       	ldi	r22, 0x6C	; 108
    73e4:	d8 de       	rcall	.-592    	; 0x7196 <spiWriteReg>
    73e6:	08 94       	sec
    73e8:	e1 1c       	adc	r14, r1
    73ea:	f1 1c       	adc	r15, r1
    73ec:	f2 e1       	ldi	r31, 0x12	; 18
    73ee:	ef 16       	cp	r14, r31
    73f0:	f7 e0       	ldi	r31, 0x07	; 7
    73f2:	ff 06       	cpc	r15, r31
    73f4:	91 f7       	brne	.-28     	; 0x73da <processPacket+0x98>
    73f6:	ef 80       	ldd	r14, Y+7	; 0x07
	)

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) spiWriteReg(REG_S3_DIPR0 + i, S3_W_CB, buffer[i]);
    73f8:	ff 24       	eor	r15, r15
    73fa:	fe 2c       	mov	r15, r14
    73fc:	ee 24       	eor	r14, r14
    73fe:	88 85       	ldd	r24, Y+8	; 0x08
    7400:	e8 0e       	add	r14, r24
    7402:	f1 1c       	adc	r15, r1
    7404:	89 85       	ldd	r24, Y+9	; 0x09
    7406:	90 e0       	ldi	r25, 0x00	; 0
    7408:	98 2f       	mov	r25, r24
    740a:	88 27       	eor	r24, r24
    740c:	2a 85       	ldd	r18, Y+10	; 0x0a
    740e:	82 0f       	add	r24, r18
    7410:	91 1d       	adc	r25, r1
    7412:	0b 85       	ldd	r16, Y+11	; 0x0b
    7414:	10 e0       	ldi	r17, 0x00	; 0

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RADDR);)

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
    7416:	10 2f       	mov	r17, r16
    7418:	00 27       	eor	r16, r16
    741a:	2c 85       	ldd	r18, Y+12	; 0x0c
    741c:	02 0f       	add	r16, r18
    741e:	11 1d       	adc	r17, r1
    7420:	83 30       	cpi	r24, 0x03	; 3
    7422:	91 05       	cpc	r25, r1
	uint16_t tftpOpcode  = (buffer[8] << 8) + buffer[9];
    7424:	89 f4       	brne	.+34     	; 0x7448 <processPacket+0x106>
    7426:	09 33       	cpi	r16, 0x39	; 57
    7428:	11 05       	cpc	r17, r1
    742a:	60 f4       	brcc	.+24     	; 0x7444 <processPacket+0x102>
    742c:	20 91 20 01 	lds	r18, 0x0120
    7430:	30 91 21 01 	lds	r19, 0x0121
	uint16_t tftpBlock   = (buffer[10] << 8) + buffer[11];
    7434:	02 17       	cp	r16, r18
    7436:	13 07       	cpc	r17, r19
    7438:	28 f0       	brcs	.+10     	; 0x7444 <processPacket+0x102>
    743a:	2f 5f       	subi	r18, 0xFF	; 255
    743c:	3f 4f       	sbci	r19, 0xFF	; 255
    743e:	20 17       	cp	r18, r16
		tracenum(tftpOpcode);
		tracePGM(mDebugTftp_DLEN);
		tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
	)

	if((tftpOpcode == TFTP_OPCODE_DATA)
    7440:	31 07       	cpc	r19, r17
    7442:	10 f4       	brcc	.+4      	; 0x7448 <processPacket+0x106>
    7444:	80 e0       	ldi	r24, 0x00	; 0
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
    7446:	90 e0       	ldi	r25, 0x00	; 0
    7448:	25 e0       	ldi	r18, 0x05	; 5
    744a:	e2 16       	cp	r14, r18
    744c:	22 e0       	ldi	r18, 0x02	; 2
    744e:	f2 06       	cpc	r15, r18
    7450:	08 f0       	brcs	.+2      	; 0x7454 <processPacket+0x112>
    7452:	9d c0       	rjmp	.+314    	; 0x758e <processPacket+0x24c>
    7454:	83 30       	cpi	r24, 0x03	; 3
    7456:	91 05       	cpc	r25, r1
    7458:	29 f1       	breq	.+74     	; 0x74a4 <processPacket+0x162>
    745a:	84 30       	cpi	r24, 0x04	; 4
    745c:	91 05       	cpc	r25, r1
    745e:	48 f4       	brcc	.+18     	; 0x7472 <processPacket+0x130>
    7460:	81 30       	cpi	r24, 0x01	; 1
    7462:	91 05       	cpc	r25, r1
		tftpOpcode = TFTP_OPCODE_UKN;
    7464:	09 f4       	brne	.+2      	; 0x7468 <processPacket+0x126>
    7466:	9a c0       	rjmp	.+308    	; 0x759c <processPacket+0x25a>

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
    7468:	82 30       	cpi	r24, 0x02	; 2
    746a:	91 05       	cpc	r25, r1
    746c:	09 f0       	breq	.+2      	; 0x7470 <processPacket+0x12e>
    746e:	8f c0       	rjmp	.+286    	; 0x758e <processPacket+0x24c>
    7470:	05 c0       	rjmp	.+10     	; 0x747c <processPacket+0x13a>
    7472:	86 30       	cpi	r24, 0x06	; 6

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
    7474:	91 05       	cpc	r25, r1
    7476:	08 f0       	brcs	.+2      	; 0x747a <processPacket+0x138>
    7478:	8a c0       	rjmp	.+276    	; 0x758e <processPacket+0x24c>
    747a:	90 c0       	rjmp	.+288    	; 0x759c <processPacket+0x25a>
    747c:	f1 d1       	rcall	.+994    	; 0x7860 <resetTick>
    747e:	82 e0       	ldi	r24, 0x02	; 2
    7480:	90 e0       	ldi	r25, 0x00	; 0
    7482:	6f ef       	ldi	r22, 0xFF	; 255
    7484:	17 d3       	rcall	.+1582   	; 0x7ab4 <__eewr_byte_m328p>
    7486:	80 91 2b 01 	lds	r24, 0x012B
    748a:	90 91 2c 01 	lds	r25, 0x012C
    748e:	1d df       	rcall	.-454    	; 0x72ca <sockInit>
    7490:	10 92 21 01 	sts	0x0121, r1
    7494:	10 92 20 01 	sts	0x0120, r1
    7498:	10 92 23 01 	sts	0x0123, r1
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
    749c:	10 92 22 01 	sts	0x0122, r1

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPWRQ);)

			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
    74a0:	02 e0       	ldi	r16, 0x02	; 2
    74a2:	81 c0       	rjmp	.+258    	; 0x75a6 <processPacket+0x264>
    74a4:	dd d1       	rcall	.+954    	; 0x7860 <resetTick>
    74a6:	4c ef       	ldi	r20, 0xFC	; 252
    74a8:	c4 2e       	mov	r12, r20

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    74aa:	4f ef       	ldi	r20, 0xFF	; 255
    74ac:	d4 2e       	mov	r13, r20
    74ae:	ce 0c       	add	r12, r14
    74b0:	df 1c       	adc	r13, r15
    74b2:	10 93 23 01 	sts	0x0123, r17
#else
				tracenum(tftpTransferPort);
#endif
			)

			lastPacket = highPacket = 0;
    74b6:	00 93 22 01 	sts	0x0122, r16
    74ba:	78 01       	movw	r14, r16
    74bc:	08 94       	sec
    74be:	e1 08       	sbc	r14, r1
    74c0:	f1 08       	sbc	r15, r1
    74c2:	fe 2c       	mov	r15, r14
    74c4:	ee 24       	eor	r14, r14
			returnCode = ACK; // Send back acknowledge for packet 0
    74c6:	ff 0c       	add	r15, r15
			break;
    74c8:	c7 01       	movw	r24, r14

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
    74ca:	8c 0d       	add	r24, r12
    74cc:	9d 1d       	adc	r25, r13

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPDATA);)

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
    74ce:	e0 e7       	ldi	r30, 0x70	; 112
    74d0:	81 30       	cpi	r24, 0x01	; 1
    74d2:	9e 07       	cpc	r25, r30
    74d4:	08 f0       	brcs	.+2      	; 0x74d8 <processPacket+0x196>
    74d6:	64 c0       	rjmp	.+200    	; 0x75a0 <processPacket+0x25e>
    74d8:	f0 e0       	ldi	r31, 0x00	; 0
			lastPacket = tftpBlock;
    74da:	cf 16       	cp	r12, r31
    74dc:	f2 e0       	ldi	r31, 0x02	; 2
    74de:	df 06       	cpc	r13, r31
    74e0:	10 f4       	brcc	.+4      	; 0x74e6 <processPacket+0x1a4>
#if defined(RAMPZ)
			writeAddr = (((address_t)((tftpBlock - 1)/0x80) << 16) | ((address_t)((tftpBlock - 1)%0x80) << 9));
#else
			writeAddr = (address_t)((address_t)(tftpBlock - 1) << 9); // Flash write address for this block
    74e2:	04 e0       	ldi	r16, 0x04	; 4
    74e4:	05 c0       	rjmp	.+10     	; 0x74f0 <processPacket+0x1ae>
    74e6:	02 e0       	ldi	r16, 0x02	; 2
    74e8:	03 c0       	rjmp	.+6      	; 0x74f0 <processPacket+0x1ae>
    74ea:	08 94       	sec
    74ec:	c1 1c       	adc	r12, r1
    74ee:	d1 1c       	adc	r13, r1
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
    74f0:	c6 01       	movw	r24, r12
    74f2:	8f 77       	andi	r24, 0x7F	; 127
    74f4:	90 70       	andi	r25, 0x00	; 0
    74f6:	00 97       	sbiw	r24, 0x00	; 0
    74f8:	c1 f7       	brne	.-16     	; 0x74ea <processPacket+0x1a8>
    74fa:	e1 14       	cp	r14, r1
    74fc:	f1 04       	cpc	r15, r1
    74fe:	31 f4       	brne	.+12     	; 0x750c <processPacket+0x1ca>
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
    7500:	ce 01       	movw	r24, r28
    7502:	0d 96       	adiw	r24, 0x0d	; 13
    7504:	48 d1       	rcall	.+656    	; 0x7796 <validImage>
    7506:	88 23       	and	r24, r24
    7508:	09 f4       	brne	.+2      	; 0x750c <processPacket+0x1ca>
    750a:	4c c0       	rjmp	.+152    	; 0x75a4 <processPacket+0x262>
    750c:	de 01       	movw	r26, r28
				else returnCode = ACK;
    750e:	1e 96       	adiw	r26, 0x0e	; 14
    7510:	40 e0       	ldi	r20, 0x00	; 0

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
    7512:	50 e0       	ldi	r21, 0x00	; 0
    7514:	61 e0       	ldi	r22, 0x01	; 1
    7516:	73 e0       	ldi	r23, 0x03	; 3
    7518:	15 e0       	ldi	r17, 0x05	; 5
    751a:	31 e1       	ldi	r19, 0x11	; 17
    751c:	b3 2e       	mov	r11, r19
    751e:	2d c0       	rjmp	.+90     	; 0x757a <processPacket+0x238>
    7520:	8c 91       	ld	r24, X
				DBG_TFTP(
					tracePGMlnTftp(mDebugTftp_PLEN);
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
    7522:	90 e0       	ldi	r25, 0x00	; 0
    7524:	38 2f       	mov	r19, r24
    7526:	22 27       	eor	r18, r18
					// First sector - validate
					if(!validImage(pageBase)) {
    7528:	fd 01       	movw	r30, r26
    752a:	31 97       	sbiw	r30, 0x01	; 1
    752c:	80 81       	ld	r24, Z
    752e:	90 e0       	ldi	r25, 0x00	; 0
    7530:	28 2b       	or	r18, r24
    7532:	39 2b       	or	r19, r25
    7534:	f7 01       	movw	r30, r14
    7536:	09 01       	movw	r0, r18
    7538:	60 93 57 00 	sts	0x0057, r22
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
    753c:	e8 95       	spm
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
    753e:	11 24       	eor	r1, r1
					)

					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    7540:	4e 5f       	subi	r20, 0xFE	; 254
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    7542:	5f 4f       	sbci	r21, 0xFF	; 255
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    7544:	ca 01       	movw	r24, r20
    7546:	8f 77       	andi	r24, 0x7F	; 127
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
    7548:	90 70       	andi	r25, 0x00	; 0
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
    754a:	00 97       	sbiw	r24, 0x00	; 0
    754c:	89 f4       	brne	.+34     	; 0x7570 <processPacket+0x22e>
    754e:	ee 57       	subi	r30, 0x7E	; 126
    7550:	f0 40       	sbci	r31, 0x00	; 0


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
    7552:	70 93 57 00 	sts	0x0057, r23
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
    7556:	e8 95       	spm
    7558:	07 b6       	in	r0, 0x37	; 55
    755a:	00 fc       	sbrc	r0, 0
    755c:	fd cf       	rjmp	.-6      	; 0x7558 <processPacket+0x216>
					boot_page_fill(writeAddr + offset, writeValue);
    755e:	10 93 57 00 	sts	0x0057, r17
    7562:	e8 95       	spm
    7564:	07 b6       	in	r0, 0x37	; 55
    7566:	00 fc       	sbrc	r0, 0
    7568:	fd cf       	rjmp	.-6      	; 0x7564 <processPacket+0x222>
							tracePGM(mDebugTftp_OFFSET);
							tracenum(writeAddr + offset);
						}
					)

					offset += 2;
    756a:	b0 92 57 00 	sts	0x0057, r11

					if(offset % SPM_PAGESIZE == 0) {
    756e:	e8 95       	spm
    7570:	12 96       	adiw	r26, 0x02	; 2
    7572:	82 e0       	ldi	r24, 0x02	; 2
    7574:	90 e0       	ldi	r25, 0x00	; 0
    7576:	e8 0e       	add	r14, r24
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    7578:	f9 1e       	adc	r15, r25
    757a:	4c 15       	cp	r20, r12
    757c:	5d 05       	cpc	r21, r13
    757e:	80 f2       	brcs	.-96     	; 0x7520 <processPacket+0x1de>
    7580:	04 30       	cpi	r16, 0x04	; 4
						boot_spm_busy_wait();
    7582:	89 f4       	brne	.+34     	; 0x75a6 <processPacket+0x264>
    7584:	82 e0       	ldi	r24, 0x02	; 2
    7586:	90 e0       	ldi	r25, 0x00	; 0
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    7588:	6e ee       	ldi	r22, 0xEE	; 238
    758a:	94 d2       	rcall	.+1320   	; 0x7ab4 <__eewr_byte_m328p>
    758c:	0c c0       	rjmp	.+24     	; 0x75a6 <processPacket+0x264>
						boot_spm_busy_wait();
    758e:	80 91 2b 01 	lds	r24, 0x012B
    7592:	90 91 2c 01 	lds	r25, 0x012C
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    7596:	99 de       	rcall	.-718    	; 0x72ca <sockInit>
    7598:	01 e0       	ldi	r16, 0x01	; 1
    759a:	05 c0       	rjmp	.+10     	; 0x75a6 <processPacket+0x264>
    759c:	00 e0       	ldi	r16, 0x00	; 0
    759e:	03 c0       	rjmp	.+6      	; 0x75a6 <processPacket+0x264>
    75a0:	03 e0       	ldi	r16, 0x03	; 3
    75a2:	01 c0       	rjmp	.+2      	; 0x75a6 <processPacket+0x264>
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
    75a4:	05 e0       	ldi	r16, 0x05	; 5
    75a6:	80 2f       	mov	r24, r16
    75a8:	c4 5f       	subi	r28, 0xF4	; 244
						boot_rww_enable();
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
    75aa:	dd 4f       	sbci	r29, 0xFD	; 253
    75ac:	de bf       	out	0x3e, r29	; 62
					// Hand over to application

					DBG_TFTP(tracePGMlnTftp(mDebugTftp_DONE);)

					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    75ae:	cd bf       	out	0x3d, r28	; 61
    75b0:	df 91       	pop	r29
    75b2:	cf 91       	pop	r28
    75b4:	1f 91       	pop	r17
    75b6:	0f 91       	pop	r16
    75b8:	ff 90       	pop	r15
			)

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    75ba:	ef 90       	pop	r14
    75bc:	df 90       	pop	r13
    75be:	cf 90       	pop	r12
    75c0:	bf 90       	pop	r11
    75c2:	08 95       	ret

000075c4 <tftpInit>:
    75c4:	cf 93       	push	r28
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
    75c6:	85 e4       	ldi	r24, 0x45	; 69
			break;
    75c8:	90 e0       	ldi	r25, 0x00	; 0
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
    75ca:	7f de       	rcall	.-770    	; 0x72ca <sockInit>
    75cc:	87 e1       	ldi	r24, 0x17	; 23
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.

				DBG_TFTP(tracePGMlnTftp(mDebugTftp_FULL);)

				returnCode = ERROR_FULL;
    75ce:	90 e0       	ldi	r25, 0x00	; 0
    75d0:	69 d2       	rcall	.+1234   	; 0x7aa4 <__eerd_byte_m328p>

#if defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
						/* FIXME: Validity checks. Small programms (under 512 bytes?) don't
						 * have the the JMP sections and that is why app.bin was failing.
						 * When flashing big binaries is fixed, uncomment the break below.*/
						returnCode = INVALID_IMAGE;
    75d2:	8b 3b       	cpi	r24, 0xBB	; 187
			break;

	}

	return(returnCode);
}
    75d4:	91 f4       	brne	.+36     	; 0x75fa <tftpInit+0x36>
    75d6:	89 e1       	ldi	r24, 0x19	; 25
    75d8:	90 e0       	ldi	r25, 0x00	; 0
    75da:	64 d2       	rcall	.+1224   	; 0x7aa4 <__eerd_byte_m328p>
    75dc:	c8 2f       	mov	r28, r24
    75de:	88 e1       	ldi	r24, 0x18	; 24
    75e0:	90 e0       	ldi	r25, 0x00	; 0
    75e2:	60 d2       	rcall	.+1216   	; 0x7aa4 <__eerd_byte_m328p>
    75e4:	2c 2f       	mov	r18, r28
    75e6:	30 e0       	ldi	r19, 0x00	; 0
    75e8:	32 2f       	mov	r19, r18
    75ea:	22 27       	eor	r18, r18
    75ec:	28 0f       	add	r18, r24
    75ee:	31 1d       	adc	r19, r1
    75f0:	30 93 2c 01 	sts	0x012C, r19
 * Initializes the network controller
 */
void tftpInit(void)
{
	// Open socket
	sockInit(TFTP_PORT);
    75f4:	20 93 2b 01 	sts	0x012B, r18
    75f8:	06 c0       	rjmp	.+12     	; 0x7606 <tftpInit+0x42>
    75fa:	89 e7       	ldi	r24, 0x79	; 121

#if defined(RANDOM_TFTP_DATA_PORT)
#else
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
    75fc:	97 eb       	ldi	r25, 0xB7	; 183
    75fe:	90 93 2c 01 	sts	0x012C, r25
    7602:	80 93 2b 01 	sts	0x012B, r24
    7606:	cf 91       	pop	r28
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
    7608:	08 95       	ret

0000760a <tftpPoll>:
    760a:	af 92       	push	r10
    760c:	bf 92       	push	r11
    760e:	cf 92       	push	r12
    7610:	df 92       	push	r13
    7612:	ff 92       	push	r15
    7614:	0f 93       	push	r16
    7616:	1f 93       	push	r17
    7618:	cf 93       	push	r28
    761a:	df 93       	push	r29
    761c:	cd b7       	in	r28, 0x3d	; 61
    761e:	de b7       	in	r29, 0x3e	; 62
    7620:	c5 56       	subi	r28, 0x65	; 101
    7622:	d0 40       	sbci	r29, 0x00	; 0
    7624:	de bf       	out	0x3e, r29	; 62
    7626:	cd bf       	out	0x3d, r28	; 61
    7628:	86 e2       	ldi	r24, 0x26	; 38
    762a:	97 e0       	ldi	r25, 0x07	; 7
    762c:	68 e6       	ldi	r22, 0x68	; 104
    762e:	fc dd       	rcall	.-1032   	; 0x7228 <spiReadWord>
	else
		tftpTransferPort = TFTP_DATA_PORT;
    7630:	00 97       	sbiw	r24, 0x00	; 0
    7632:	09 f4       	brne	.+2      	; 0x7636 <tftpPoll+0x2c>
    7634:	a1 c0       	rjmp	.+322    	; 0x7778 <tftpPoll+0x16e>
    7636:	81 e0       	ldi	r24, 0x01	; 1
    7638:	80 93 2e 01 	sts	0x012E, r24
#else
		tracePGMlnTftp(mDebugTftp_PORT);
		tracenum(tftpTransferPort);
#endif
	)
}
    763c:	0e c0       	rjmp	.+28     	; 0x765a <tftpPoll+0x50>
    763e:	82 e0       	ldi	r24, 0x02	; 2

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
    7640:	97 e0       	ldi	r25, 0x07	; 7
    7642:	6c e6       	ldi	r22, 0x6C	; 108
    7644:	44 e0       	ldi	r20, 0x04	; 4
    7646:	a7 dd       	rcall	.-1202   	; 0x7196 <spiWriteReg>
    7648:	8f ef       	ldi	r24, 0xFF	; 255
    764a:	97 e8       	ldi	r25, 0x87	; 135
    764c:	a3 e1       	ldi	r26, 0x13	; 19
    764e:	81 50       	subi	r24, 0x01	; 1
    7650:	90 40       	sbci	r25, 0x00	; 0
    7652:	a0 40       	sbci	r26, 0x00	; 0
    7654:	e1 f7       	brne	.-8      	; 0x764e <tftpPoll+0x44>
    7656:	00 c0       	rjmp	.+0      	; 0x7658 <tftpPoll+0x4e>
    7658:	00 00       	nop
    765a:	82 e0       	ldi	r24, 0x02	; 2
    765c:	97 e0       	ldi	r25, 0x07	; 7
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = spiReadWord(REG_S3_RX_RSR0, S3_R_CB);
    765e:	68 e6       	ldi	r22, 0x68	; 104
    7660:	c9 dd       	rcall	.-1134   	; 0x71f4 <spiReadReg>
    7662:	82 fd       	sbrc	r24, 2
    7664:	ec cf       	rjmp	.-40     	; 0x763e <tftpPoll+0x34>
    7666:	6d de       	rcall	.-806    	; 0x7342 <processPacket>
// 			_delay_ms(400);
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
    7668:	f8 2e       	mov	r15, r24
    766a:	84 e2       	ldi	r24, 0x24	; 36
    766c:	97 e0       	ldi	r25, 0x07	; 7
		tftpFlashing = TRUE;
    766e:	60 e0       	ldi	r22, 0x00	; 0
    7670:	db dd       	rcall	.-1098   	; 0x7228 <spiReadWord>
    7672:	c1 2c       	mov	r12, r1

		while((spiReadReg(REG_S3_IR, S3_R_CB) & IR_RECV)) {
    7674:	08 e5       	ldi	r16, 0x58	; 88
			spiWriteReg(REG_S3_IR, S3_W_CB, IR_RECV);
    7676:	d0 2e       	mov	r13, r16
    7678:	c8 0e       	add	r12, r24
    767a:	d9 1e       	adc	r13, r25
    767c:	92 e0       	ldi	r25, 0x02	; 2
    767e:	f9 16       	cp	r15, r25
    7680:	59 f1       	breq	.+86     	; 0x76d8 <tftpPoll+0xce>
    7682:	9f 15       	cp	r25, r15
    7684:	20 f0       	brcs	.+8      	; 0x768e <tftpPoll+0x84>
    7686:	a1 e0       	ldi	r26, 0x01	; 1
    7688:	fa 16       	cp	r15, r26
    768a:	39 f4       	brne	.+14     	; 0x769a <tftpPoll+0x90>
    768c:	13 c0       	rjmp	.+38     	; 0x76b4 <tftpPoll+0xaa>
    768e:	b3 e0       	ldi	r27, 0x03	; 3
    7690:	fb 16       	cp	r15, r27
    7692:	c9 f0       	breq	.+50     	; 0x76c6 <tftpPoll+0xbc>
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;

		while((spiReadReg(REG_S3_IR, S3_R_CB) & IR_RECV)) {
    7694:	e4 e0       	ldi	r30, 0x04	; 4
    7696:	fe 16       	cp	r15, r30
    7698:	71 f1       	breq	.+92     	; 0x76f6 <tftpPoll+0xec>
    769a:	ce 01       	movw	r24, r28
    769c:	01 96       	adiw	r24, 0x01	; 1
    769e:	60 e8       	ldi	r22, 0x80	; 128
    76a0:	70 e7       	ldi	r23, 0x70	; 112
		// Process Packet and get TFTP response code
#if (DEBUG_TFTP > 0)
		packetSize = spiReadWord(REG_S3_RX_RSR0, S3_R_CB);
		response = processPacket(packetSize);
#else
		response = processPacket();
    76a2:	4a e0       	ldi	r20, 0x0A	; 10
    76a4:	50 e0       	ldi	r21, 0x00	; 0
    76a6:	f5 d1       	rcall	.+1002   	; 0x7a92 <memcpy_P>
	uint16_t writePointer;
	
#if (W5500 > 0)
	writePointer = spiReadWord(REG_S3_TX_WR0, S3_R_CB);
#else
	writePointer = spiReadWord(REG_S3_TX_WR0, 0) + S3_TX_START;
    76a8:	2a e0       	ldi	r18, 0x0A	; 10
    76aa:	5e 01       	movw	r10, r28
    76ac:	08 94       	sec
    76ae:	a1 1c       	adc	r10, r1
    76b0:	b1 1c       	adc	r11, r1
    76b2:	2c c0       	rjmp	.+88     	; 0x770c <tftpPoll+0x102>
    76b4:	ce 01       	movw	r24, r28
    76b6:	01 96       	adiw	r24, 0x01	; 1
    76b8:	65 e9       	ldi	r22, 0x95	; 149
    76ba:	70 e7       	ldi	r23, 0x70	; 112
#endif


	switch(response) {
    76bc:	4c e0       	ldi	r20, 0x0C	; 12
    76be:	50 e0       	ldi	r21, 0x00	; 0
    76c0:	e8 d1       	rcall	.+976    	; 0x7a92 <memcpy_P>
    76c2:	2c e0       	ldi	r18, 0x0C	; 12
    76c4:	f2 cf       	rjmp	.-28     	; 0x76aa <tftpPoll+0xa0>
    76c6:	ce 01       	movw	r24, r28
    76c8:	01 96       	adiw	r24, 0x01	; 1
    76ca:	6b e8       	ldi	r22, 0x8B	; 139
    76cc:	70 e7       	ldi	r23, 0x70	; 112
    76ce:	49 e0       	ldi	r20, 0x09	; 9
    76d0:	50 e0       	ldi	r21, 0x00	; 0
    76d2:	df d1       	rcall	.+958    	; 0x7a92 <memcpy_P>
    76d4:	29 e0       	ldi	r18, 0x09	; 9
    76d6:	e9 cf       	rjmp	.-46     	; 0x76aa <tftpPoll+0xa0>
    76d8:	80 91 22 01 	lds	r24, 0x0122
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_unknown_error_packet, packetLength);
#else
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
    76dc:	90 91 23 01 	lds	r25, 0x0123
    76e0:	20 91 20 01 	lds	r18, 0x0120
    76e4:	30 91 21 01 	lds	r19, 0x0121
    76e8:	28 17       	cp	r18, r24
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
    76ea:	39 07       	cpc	r19, r25
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
    76ec:	20 f4       	brcc	.+8      	; 0x76f6 <tftpPoll+0xec>
    76ee:	90 93 21 01 	sts	0x0121, r25
    76f2:	80 93 20 01 	sts	0x0120, r24
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_opcode_error_packet, packetLength);
#else
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
    76f6:	19 82       	std	Y+1, r1	; 0x01
    76f8:	84 e0       	ldi	r24, 0x04	; 4
    76fa:	8a 83       	std	Y+2, r24	; 0x02
    76fc:	80 91 22 01 	lds	r24, 0x0122
    7700:	90 91 23 01 	lds	r25, 0x0123
    7704:	9b 83       	std	Y+3, r25	; 0x03
#endif
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
    7706:	8c 83       	std	Y+4, r24	; 0x04
    7708:	24 e0       	ldi	r18, 0x04	; 4
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_full_error_packet, packetLength);
#else
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
    770a:	cf cf       	rjmp	.-98     	; 0x76aa <tftpPoll+0xa0>
    770c:	86 01       	movw	r16, r12
    770e:	0f 5f       	subi	r16, 0xFF	; 255
    7710:	1f 4f       	sbci	r17, 0xFF	; 255
    7712:	d5 01       	movw	r26, r10
    7714:	4d 91       	ld	r20, X+
    7716:	5d 01       	movw	r10, r26
    7718:	c6 01       	movw	r24, r12
#endif
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
    771a:	64 e7       	ldi	r22, 0x74	; 116
    771c:	a6 96       	adiw	r28, 0x26	; 38
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
#endif
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
    771e:	2f af       	sts	0x7f, r18
    7720:	a6 97       	sbiw	r28, 0x26	; 38
    7722:	39 dd       	rcall	.-1422   	; 0x7196 <spiWriteReg>
    7724:	a6 96       	adiw	r28, 0x26	; 38
    7726:	2f ad       	sts	0x6f, r18
    7728:	a6 97       	sbiw	r28, 0x26	; 38
    772a:	b0 e6       	ldi	r27, 0x60	; 96
    772c:	00 30       	cpi	r16, 0x00	; 0
    772e:	1b 07       	cpc	r17, r27
    7730:	11 f0       	breq	.+4      	; 0x7736 <tftpPoll+0x12c>
    7732:	68 01       	movw	r12, r16
    7734:	03 c0       	rjmp	.+6      	; 0x773c <tftpPoll+0x132>
    7736:	c1 2c       	mov	r12, r1
    7738:	18 e5       	ldi	r17, 0x58	; 88
    773a:	d1 2e       	mov	r13, r17
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
    773c:	21 50       	subi	r18, 0x01	; 1
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
    773e:	31 f7       	brne	.-52     	; 0x770c <tftpPoll+0x102>
    7740:	a6 01       	movw	r20, r12
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
    7742:	40 50       	subi	r20, 0x00	; 0
    7744:	58 45       	sbci	r21, 0x58	; 88
    7746:	84 e2       	ldi	r24, 0x24	; 36
    7748:	97 e0       	ldi	r25, 0x07	; 7
    774a:	6c e6       	ldi	r22, 0x6C	; 108
			*txPtr = lastPacket & 0xff;
    774c:	3d dd       	rcall	.-1414   	; 0x71c8 <spiWriteWord>
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
    774e:	81 e0       	ldi	r24, 0x01	; 1
    7750:	97 e0       	ldi	r25, 0x07	; 7
	}

	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, S3_TXBUF_CB, *txPtr++);
    7752:	6c e6       	ldi	r22, 0x6C	; 108
    7754:	40 e2       	ldi	r20, 0x20	; 32
    7756:	1f dd       	rcall	.-1474   	; 0x7196 <spiWriteReg>
    7758:	81 e0       	ldi	r24, 0x01	; 1
    775a:	97 e0       	ldi	r25, 0x07	; 7
    775c:	68 e6       	ldi	r22, 0x68	; 104
    775e:	4a dd       	rcall	.-1388   	; 0x71f4 <spiReadReg>
    7760:	88 23       	and	r24, r24
    7762:	d1 f7       	brne	.-12     	; 0x7758 <tftpPoll+0x14e>
    7764:	e4 e0       	ldi	r30, 0x04	; 4
    7766:	fe 16       	cp	r15, r30
    7768:	39 f4       	brne	.+14     	; 0x7778 <tftpPoll+0x16e>
    776a:	81 e0       	ldi	r24, 0x01	; 1
		if(writePointer == 0xFFFF) writePointer = 0x0000;  //changed 0c0800 to 0xFFFF, fixes a 4th packet retransmit bug. upload speed changed from 500sec to 90sec for 100kb program
	}

	spiWriteWord(REG_S3_TX_WR0, S3_W_CB, writePointer);
#else
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    776c:	97 e0       	ldi	r25, 0x07	; 7
    776e:	6c e6       	ldi	r22, 0x6C	; 108
    7770:	40 e1       	ldi	r20, 0x10	; 16
    7772:	11 dd       	rcall	.-1502   	; 0x7196 <spiWriteReg>
    7774:	80 e0       	ldi	r24, 0x00	; 0
    7776:	01 c0       	rjmp	.+2      	; 0x777a <tftpPoll+0x170>
    7778:	81 e0       	ldi	r24, 0x01	; 1
    777a:	cb 59       	subi	r28, 0x9B	; 155
    777c:	df 4f       	sbci	r29, 0xFF	; 255
    777e:	de bf       	out	0x3e, r29	; 62
    7780:	cd bf       	out	0x3d, r28	; 61
    7782:	df 91       	pop	r29
    7784:	cf 91       	pop	r28
			break;
	}

	txPtr = txBuffer;

	while(packetLength--) {
    7786:	1f 91       	pop	r17
	spiWriteWord(REG_S3_TX_WR0, S3_W_CB, writePointer);
#else
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}

	spiWriteWord(REG_S3_TX_WR0, S3_W_CB, writePointer - S3_TX_START);
    7788:	0f 91       	pop	r16
    778a:	ff 90       	pop	r15
    778c:	df 90       	pop	r13
    778e:	cf 90       	pop	r12
    7790:	bf 90       	pop	r11
    7792:	af 90       	pop	r10
    7794:	08 95       	ret

00007796 <validImage>:
#include "serial.h"
#include "debug.h"
#include "debug_vald.h"

uint8_t validImage(uint8_t* base)
{
    7796:	fc 01       	movw	r30, r24
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
    7798:	80 e0       	ldi	r24, 0x00	; 0

		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
    779a:	90 81       	ld	r25, Z
    779c:	9c 30       	cpi	r25, 0x0C	; 12
    779e:	49 f4       	brne	.+18     	; 0x77b2 <validImage+0x1c>
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
		}
		
		if(base[i + 1] != 0x94) {
    77a0:	91 81       	ldd	r25, Z+1	; 0x01
    77a2:	94 39       	cpi	r25, 0x94	; 148
    77a4:	41 f4       	brne	.+16     	; 0x77b6 <validImage+0x20>

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
    77a6:	8c 5f       	subi	r24, 0xFC	; 252
    77a8:	34 96       	adiw	r30, 0x04	; 4
    77aa:	84 33       	cpi	r24, 0x34	; 52
    77ac:	b1 f7       	brne	.-20     	; 0x779a <validImage+0x4>
		}
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
    77ae:	81 e0       	ldi	r24, 0x01	; 1
    77b0:	08 95       	ret
				tracenum(i);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i]);
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
    77b2:	80 e0       	ldi	r24, 0x00	; 0
    77b4:	08 95       	ret
				tracenum(i + 1);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i + 1]);
				tracePGM(mDebugVald_0x94);
			)
			return(0);
    77b6:	80 e0       	ldi	r24, 0x00	; 0
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
}
    77b8:	08 95       	ret

000077ba <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
    77ba:	82 e0       	ldi	r24, 0x02	; 2
    77bc:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
    77c0:	88 e1       	ldi	r24, 0x18	; 24
    77c2:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
    77c6:	86 e0       	ldi	r24, 0x06	; 6
    77c8:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
    77cc:	80 e1       	ldi	r24, 0x10	; 16
    77ce:	80 93 c4 00 	sts	0x00C4, r24

#if (DEBUG > 0)
	DDRD = 0x92;
#endif

}
    77d2:	08 95       	ret

000077d4 <putch>:


void putch(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
    77d4:	90 91 c0 00 	lds	r25, 0x00C0
    77d8:	95 ff       	sbrs	r25, 5
    77da:	fc cf       	rjmp	.-8      	; 0x77d4 <putch>
	UART_DATA_REG = c;
    77dc:	80 93 c6 00 	sts	0x00C6, r24
}
    77e0:	08 95       	ret

000077e2 <puthex>:


void puthex(uint8_t c)
{
	c &= 0xf;
    77e2:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
    77e4:	8a 30       	cpi	r24, 0x0A	; 10
    77e6:	08 f0       	brcs	.+2      	; 0x77ea <puthex+0x8>
    77e8:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putch(c + '0');
    77ea:	80 5d       	subi	r24, 0xD0	; 208
    77ec:	f3 cf       	rjmp	.-26     	; 0x77d4 <putch>

000077ee <getch>:
    77ee:	80 91 c0 00 	lds	r24, 0x00C0

uint8_t getch(void)
{
	//uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
    77f2:	87 ff       	sbrs	r24, 7
    77f4:	fc cf       	rjmp	.-8      	; 0x77ee <getch>
    77f6:	80 91 c0 00 	lds	r24, 0x00C0
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
    77fa:	84 fd       	sbrc	r24, 4
    77fc:	01 c0       	rjmp	.+2      	; 0x7800 <getch+0x12>
    77fe:	a8 95       	wdr
    7800:	80 91 c6 00 	lds	r24, 0x00C6
	}

	//ch = UART_DATA_REG;
	//return ch;

	return(UART_DATA_REG);
    7804:	08 95       	ret

00007806 <serialPoll>:
    7806:	80 91 c0 00 	lds	r24, 0x00C0
}


uint8_t serialPoll(void)
{
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
    780a:	87 ff       	sbrs	r24, 7
    780c:	05 c0       	rjmp	.+10     	; 0x7818 <serialPoll+0x12>
    780e:	28 d0       	rcall	.+80     	; 0x7860 <resetTick>
    7810:	81 e0       	ldi	r24, 0x01	; 1
		resetTick();
    7812:	80 93 2d 01 	sts	0x012D, r24
		serialFlashing = TRUE;
    7816:	59 c0       	rjmp	.+178    	; 0x78ca <processOptiboot>
    7818:	81 e0       	ldi	r24, 0x01	; 1
    781a:	08 95       	ret

0000781c <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
    781c:	80 91 84 00 	lds	r24, 0x0084
    7820:	90 91 85 00 	lds	r25, 0x0085

	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
    7824:	92 ff       	sbrs	r25, 2
    7826:	05 c0       	rjmp	.+10     	; 0x7832 <updateLed+0x16>
    7828:	25 b1       	in	r18, 0x05	; 5
    782a:	30 e2       	ldi	r19, 0x20	; 32
    782c:	23 27       	eor	r18, r19
    782e:	25 b9       	out	0x05, r18	; 5
    7830:	01 c0       	rjmp	.+2      	; 0x7834 <updateLed+0x18>
	else LED_PORT &= ~_BV(LED); // Led pin low
    7832:	2d 98       	cbi	0x05, 5	; 5

	if(next_timer_1 < last_timer_1) {
    7834:	20 91 24 01 	lds	r18, 0x0124
    7838:	30 91 25 01 	lds	r19, 0x0125
    783c:	82 17       	cp	r24, r18
    783e:	93 07       	cpc	r25, r19
    7840:	50 f4       	brcc	.+20     	; 0x7856 <updateLed+0x3a>
		tick++;
    7842:	20 91 26 01 	lds	r18, 0x0126
    7846:	30 91 27 01 	lds	r19, 0x0127
    784a:	2f 5f       	subi	r18, 0xFF	; 255
    784c:	3f 4f       	sbci	r19, 0xFF	; 255
    784e:	30 93 27 01 	sts	0x0127, r19
    7852:	20 93 26 01 	sts	0x0126, r18
		    tracePGMlnUtil(mDebugUtil_LAST);
		    tracenum(last_timer_1);
		)
	}

	last_timer_1 = next_timer_1;
    7856:	90 93 25 01 	sts	0x0125, r25
    785a:	80 93 24 01 	sts	0x0124, r24
}
    785e:	08 95       	ret

00007860 <resetTick>:

void resetTick(void)
{
	TCNT1 = 0;
    7860:	10 92 85 00 	sts	0x0085, r1
    7864:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
    7868:	10 92 27 01 	sts	0x0127, r1
    786c:	10 92 26 01 	sts	0x0126, r1
}
    7870:	08 95       	ret

00007872 <timedOut>:
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
#else
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
    7872:	e0 e0       	ldi	r30, 0x00	; 0
    7874:	f0 e0       	ldi	r31, 0x00	; 0
    7876:	85 91       	lpm	r24, Z+
    7878:	94 91       	lpm	r25, Z
    787a:	2f ef       	ldi	r18, 0xFF	; 255
    787c:	8f 3f       	cpi	r24, 0xFF	; 255
    787e:	92 07       	cpc	r25, r18
    7880:	51 f0       	breq	.+20     	; 0x7896 <timedOut+0x24>
    7882:	81 e0       	ldi	r24, 0x01	; 1
    7884:	20 91 26 01 	lds	r18, 0x0126
    7888:	30 91 27 01 	lds	r19, 0x0127
    788c:	25 30       	cpi	r18, 0x05	; 5
    788e:	31 05       	cpc	r19, r1
    7890:	18 f4       	brcc	.+6      	; 0x7898 <timedOut+0x26>
    7892:	80 e0       	ldi	r24, 0x00	; 0
    7894:	08 95       	ret
    7896:	80 e0       	ldi	r24, 0x00	; 0
#endif

	if(tick > TIMEOUT) return(1);
	else return(0);
}
    7898:	08 95       	ret

0000789a <appStart>:
void appStart(void) {
	__asm__ __volatile__ (
    789a:	ee 27       	eor	r30, r30
    789c:	ff 27       	eor	r31, r31
    789e:	09 94       	ijmp
		"clr	r30		\n\t"
		"clr	r31		\n\t"
		"ijmp	\n\t"
	);
}
    78a0:	08 95       	ret

000078a2 <verifySpace>:
static uint16_t address = 0;
static uint8_t  length;

static void verifySpace(void)
{
	if(getch() != CRC_EOP) {
    78a2:	a5 df       	rcall	.-182    	; 0x77ee <getch>
    78a4:	80 32       	cpi	r24, 0x20	; 32
    78a6:	39 f0       	breq	.+14     	; 0x78b6 <verifySpace+0x14>
    78a8:	88 e1       	ldi	r24, 0x18	; 24
		WDTCSR = _BV(WDCE) | _BV(WDE);
    78aa:	80 93 60 00 	sts	0x0060, r24
    78ae:	88 e0       	ldi	r24, 0x08	; 8
		WDTCSR = WATCHDOG_16MS;	// shorten WD timeout
    78b0:	80 93 60 00 	sts	0x0060, r24
    78b4:	ff cf       	rjmp	.-2      	; 0x78b4 <verifySpace+0x12>
    78b6:	84 e1       	ldi	r24, 0x14	; 20
		while(1)				// and busy-loop so that WD causes
			;					// a reset and app start.
	}
	putch(STK_INSYNC);
    78b8:	8d cf       	rjmp	.-230    	; 0x77d4 <putch>

000078ba <getNch>:
    78ba:	cf 93       	push	r28
    78bc:	c8 2f       	mov	r28, r24
}
    78be:	97 df       	rcall	.-210    	; 0x77ee <getch>


static void getNch(uint8_t count)
{
    78c0:	c1 50       	subi	r28, 0x01	; 1
    78c2:	e9 f7       	brne	.-6      	; 0x78be <getNch+0x4>
	do getch();
    78c4:	ee df       	rcall	.-36     	; 0x78a2 <verifySpace>
    78c6:	cf 91       	pop	r28
	while(--count);
    78c8:	08 95       	ret

000078ca <processOptiboot>:
    78ca:	0f 93       	push	r16
	verifySpace();
    78cc:	1f 93       	push	r17
    78ce:	cf 93       	push	r28
}
    78d0:	df 93       	push	r29
    78d2:	cd b7       	in	r28, 0x3d	; 61


uint8_t processOptiboot(void)
{
    78d4:	de b7       	in	r29, 0x3e	; 62
    78d6:	c1 50       	subi	r28, 0x01	; 1
    78d8:	d1 40       	sbci	r29, 0x01	; 1
    78da:	de bf       	out	0x3e, r29	; 62
    78dc:	cd bf       	out	0x3d, r28	; 61
    78de:	87 df       	rcall	.-242    	; 0x77ee <getch>
    78e0:	81 34       	cpi	r24, 0x41	; 65
    78e2:	a9 f4       	brne	.+42     	; 0x790e <processOptiboot+0x44>
    78e4:	84 df       	rcall	.-248    	; 0x77ee <getch>
    78e6:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t ch;

	ch = getch();
    78e8:	de 4f       	sbci	r29, 0xFE	; 254
    78ea:	88 83       	st	Y, r24

	if(ch == STK_GET_PARAMETER) {
    78ec:	c1 50       	subi	r28, 0x01	; 1
    78ee:	d1 40       	sbci	r29, 0x01	; 1
		unsigned char which = getch();
    78f0:	d8 df       	rcall	.-80     	; 0x78a2 <verifySpace>
    78f2:	cf 5f       	subi	r28, 0xFF	; 255
		verifySpace();
    78f4:	de 4f       	sbci	r29, 0xFE	; 254
    78f6:	88 81       	ld	r24, Y
    78f8:	c1 50       	subi	r28, 0x01	; 1
    78fa:	d1 40       	sbci	r29, 0x01	; 1
    78fc:	82 38       	cpi	r24, 0x82	; 130
    78fe:	11 f4       	brne	.+4      	; 0x7904 <processOptiboot+0x3a>
    7900:	84 e0       	ldi	r24, 0x04	; 4
		if(which == 0x82) {
    7902:	03 c0       	rjmp	.+6      	; 0x790a <processOptiboot+0x40>
    7904:	81 38       	cpi	r24, 0x81	; 129
    7906:	11 f1       	breq	.+68     	; 0x794c <processOptiboot+0x82>
    7908:	83 e0       	ldi	r24, 0x03	; 3
    790a:	64 df       	rcall	.-312    	; 0x77d4 <putch>
    790c:	b6 c0       	rjmp	.+364    	; 0x7a7a <processOptiboot+0x1b0>
    790e:	82 34       	cpi	r24, 0x42	; 66
			/*
			 * Send tftpboot version as "minor SW version"
			 */
			putch(ARIADNE_MINVER);
    7910:	11 f4       	brne	.+4      	; 0x7916 <processOptiboot+0x4c>
    7912:	84 e1       	ldi	r24, 0x14	; 20
		} else if(which == 0x81) {
    7914:	03 c0       	rjmp	.+6      	; 0x791c <processOptiboot+0x52>
    7916:	85 34       	cpi	r24, 0x45	; 69
		} else {
			/*
			 * GET PARAMETER returns a generic 0x03 reply for
			 * other parameters - enough to keep Avrdude happy
			 */
			putch(0x03);
    7918:	19 f4       	brne	.+6      	; 0x7920 <processOptiboot+0x56>
    791a:	84 e0       	ldi	r24, 0x04	; 4
    791c:	ce df       	rcall	.-100    	; 0x78ba <getNch>
    791e:	ad c0       	rjmp	.+346    	; 0x7a7a <processOptiboot+0x1b0>
		}
	} else if(ch == STK_SET_DEVICE) {
    7920:	85 35       	cpi	r24, 0x55	; 85
    7922:	81 f4       	brne	.+32     	; 0x7944 <processOptiboot+0x7a>
		// SET DEVICE is ignored
		getNch(20);
    7924:	64 df       	rcall	.-312    	; 0x77ee <getch>
    7926:	08 2f       	mov	r16, r24
	} else if(ch == STK_SET_DEVICE_EXT) {
    7928:	10 e0       	ldi	r17, 0x00	; 0
    792a:	61 df       	rcall	.-318    	; 0x77ee <getch>
		// SET DEVICE EXT is ignored
		getNch(4);
    792c:	90 e0       	ldi	r25, 0x00	; 0
    792e:	98 2f       	mov	r25, r24
    7930:	88 27       	eor	r24, r24
    7932:	80 2b       	or	r24, r16
	} else if(ch == STK_LOAD_ADDRESS) {
    7934:	91 2b       	or	r25, r17
    7936:	88 0f       	add	r24, r24
		// LOAD ADDRESS
		uint16_t newAddress;
		newAddress = getch();
    7938:	99 1f       	adc	r25, r25
    793a:	90 93 29 01 	sts	0x0129, r25
    793e:	80 93 28 01 	sts	0x0128, r24
		newAddress = (newAddress & 0xff) | (getch() << 8);
    7942:	9a c0       	rjmp	.+308    	; 0x7a78 <processOptiboot+0x1ae>
    7944:	86 35       	cpi	r24, 0x56	; 86
    7946:	21 f4       	brne	.+8      	; 0x7950 <processOptiboot+0x86>
    7948:	84 e0       	ldi	r24, 0x04	; 4
    794a:	b7 df       	rcall	.-146    	; 0x78ba <getNch>
    794c:	80 e0       	ldi	r24, 0x00	; 0
#ifdef RAMPZ
		// Transfer top bit to RAMPZ
		RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif

		newAddress += newAddress; // Convert from word address to byte address
    794e:	dd cf       	rjmp	.-70     	; 0x790a <processOptiboot+0x40>
    7950:	84 36       	cpi	r24, 0x64	; 100
		address = newAddress;
    7952:	09 f0       	breq	.+2      	; 0x7956 <processOptiboot+0x8c>
    7954:	61 c0       	rjmp	.+194    	; 0x7a18 <processOptiboot+0x14e>
    7956:	4b df       	rcall	.-362    	; 0x77ee <getch>
    7958:	4a df       	rcall	.-364    	; 0x77ee <getch>
    795a:	80 93 2a 01 	sts	0x012A, r24
		verifySpace();
	} else if(ch == STK_UNIVERSAL) {
    795e:	47 df       	rcall	.-370    	; 0x77ee <getch>
		// UNIVERSAL command is ignored
		getNch(4);
    7960:	e0 91 28 01 	lds	r30, 0x0128
    7964:	f0 91 29 01 	lds	r31, 0x0129
		putch(0x00);
    7968:	80 e7       	ldi	r24, 0x70	; 112
	}
	/* Write memory, length is big endian and is in bytes */
	else if(ch == STK_PROG_PAGE) {
    796a:	e0 30       	cpi	r30, 0x00	; 0
    796c:	f8 07       	cpc	r31, r24
    796e:	20 f4       	brcc	.+8      	; 0x7978 <processOptiboot+0xae>
		// PROGRAM PAGE - we support flash programming only, not EEPROM
		uint8_t  buff[256];
		uint8_t* bufPtr;
		uint16_t addrPtr;

		getch();			/* getlen() */
    7970:	83 e0       	ldi	r24, 0x03	; 3
    7972:	80 93 57 00 	sts	0x0057, r24
		length = getch();
    7976:	e8 95       	spm
    7978:	8e 01       	movw	r16, r28
    797a:	0f 5f       	subi	r16, 0xFF	; 255
		getch();
    797c:	1f 4f       	sbci	r17, 0xFF	; 255
    797e:	37 df       	rcall	.-402    	; 0x77ee <getch>

		// If we are in RWW section, immediately start page erase
		if(address < NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    7980:	f8 01       	movw	r30, r16
    7982:	81 93       	st	Z+, r24
    7984:	8f 01       	movw	r16, r30
    7986:	80 91 2a 01 	lds	r24, 0x012A
    798a:	81 50       	subi	r24, 0x01	; 1
    798c:	80 93 2a 01 	sts	0x012A, r24
    7990:	88 23       	and	r24, r24
    7992:	a9 f7       	brne	.-22     	; 0x797e <processOptiboot+0xb4>
    7994:	e0 91 28 01 	lds	r30, 0x0128
    7998:	f0 91 29 01 	lds	r31, 0x0129
    799c:	80 e7       	ldi	r24, 0x70	; 112

		// While that is going on, read in page contents
		bufPtr = buff;
		do* bufPtr++ = getch();
    799e:	e0 30       	cpi	r30, 0x00	; 0
    79a0:	f8 07       	cpc	r31, r24
    79a2:	20 f0       	brcs	.+8      	; 0x79ac <processOptiboot+0xe2>
    79a4:	83 e0       	ldi	r24, 0x03	; 3
    79a6:	80 93 57 00 	sts	0x0057, r24
		while(--length);
    79aa:	e8 95       	spm
    79ac:	7a df       	rcall	.-268    	; 0x78a2 <verifySpace>
    79ae:	07 b6       	in	r0, 0x37	; 55
    79b0:	00 fc       	sbrc	r0, 0
    79b2:	fd cf       	rjmp	.-6      	; 0x79ae <processOptiboot+0xe4>
    79b4:	60 91 28 01 	lds	r22, 0x0128

		// If we are in NRWW section, page erase has to be delayed until now.
		// Todo: Take RAMPZ into account
		if(address >= NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    79b8:	70 91 29 01 	lds	r23, 0x0129
    79bc:	09 81       	ldd	r16, Y+1	; 0x01
    79be:	fb 01       	movw	r30, r22
    79c0:	40 e4       	ldi	r20, 0x40	; 64
    79c2:	51 e0       	ldi	r21, 0x01	; 1
    79c4:	9e 01       	movw	r18, r28
    79c6:	2f 5f       	subi	r18, 0xFF	; 255
    79c8:	3f 4f       	sbci	r19, 0xFF	; 255
    79ca:	26 1b       	sub	r18, r22
    79cc:	37 0b       	sbc	r19, r23

		// Read command terminator, start reply
		verifySpace();
    79ce:	10 e0       	ldi	r17, 0x00	; 0
    79d0:	d9 01       	movw	r26, r18

		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();
    79d2:	ae 0f       	add	r26, r30
    79d4:	bf 1f       	adc	r27, r31
    79d6:	11 96       	adiw	r26, 0x01	; 1

		// Copy buffer into programming buffer
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
    79d8:	8c 91       	ld	r24, X
    79da:	11 97       	sbiw	r26, 0x01	; 1
    79dc:	90 e0       	ldi	r25, 0x00	; 0
    79de:	98 2f       	mov	r25, r24
		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();

		// Copy buffer into programming buffer
		bufPtr = buff;
    79e0:	88 27       	eor	r24, r24
    79e2:	80 2b       	or	r24, r16
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
    79e4:	91 2b       	or	r25, r17
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    79e6:	0c 01       	movw	r0, r24
	while(--count);
	verifySpace();
}


uint8_t processOptiboot(void)
    79e8:	50 93 57 00 	sts	0x0057, r21
    79ec:	e8 95       	spm
    79ee:	11 24       	eor	r1, r1
    79f0:	41 50       	subi	r20, 0x01	; 1
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
    79f2:	29 f0       	breq	.+10     	; 0x79fe <processOptiboot+0x134>
	while(--count);
	verifySpace();
}


uint8_t processOptiboot(void)
    79f4:	12 96       	adiw	r26, 0x02	; 2
    79f6:	0c 91       	ld	r16, X
    79f8:	12 97       	sbiw	r26, 0x02	; 2
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    79fa:	32 96       	adiw	r30, 0x02	; 2
    79fc:	e8 cf       	rjmp	.-48     	; 0x79ce <processOptiboot+0x104>
    79fe:	85 e0       	ldi	r24, 0x05	; 5
    7a00:	fb 01       	movw	r30, r22
    7a02:	80 93 57 00 	sts	0x0057, r24
    7a06:	e8 95       	spm
    7a08:	07 b6       	in	r0, 0x37	; 55
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    7a0a:	00 fc       	sbrc	r0, 0
    7a0c:	fd cf       	rjmp	.-6      	; 0x7a08 <processOptiboot+0x13e>
    7a0e:	81 e1       	ldi	r24, 0x11	; 17
    7a10:	80 93 57 00 	sts	0x0057, r24
			addrPtr += 2;
		} while(--ch);
    7a14:	e8 95       	spm
    7a16:	31 c0       	rjmp	.+98     	; 0x7a7a <processOptiboot+0x1b0>
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    7a18:	84 37       	cpi	r24, 0x74	; 116
    7a1a:	d1 f4       	brne	.+52     	; 0x7a50 <processOptiboot+0x186>
    7a1c:	e8 de       	rcall	.-560    	; 0x77ee <getch>
    7a1e:	e7 de       	rcall	.-562    	; 0x77ee <getch>
    7a20:	80 93 2a 01 	sts	0x012A, r24
			boot_page_fill((uint16_t)(void*)addrPtr, a);
			addrPtr += 2;
		} while(--ch);

		// Write from programming buffer
		boot_page_write((uint16_t)(void*)address);
    7a24:	e4 de       	rcall	.-568    	; 0x77ee <getch>
    7a26:	3d df       	rcall	.-390    	; 0x78a2 <verifySpace>
    7a28:	e0 91 28 01 	lds	r30, 0x0128
		boot_spm_busy_wait();
    7a2c:	f0 91 29 01 	lds	r31, 0x0129
    7a30:	cf 01       	movw	r24, r30

#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
    7a32:	01 96       	adiw	r24, 0x01	; 1
    7a34:	90 93 29 01 	sts	0x0129, r25
    7a38:	80 93 28 01 	sts	0x0128, r24
#endif
	}
	/* Read memory block mode, length is big endian.  */
	else if(ch == STK_READ_PAGE) {
    7a3c:	84 91       	lpm	r24, Z
    7a3e:	ca de       	rcall	.-620    	; 0x77d4 <putch>
		// READ PAGE - we only read flash
		getch();			/* getlen() */
    7a40:	80 91 2a 01 	lds	r24, 0x012A
		length = getch();
    7a44:	81 50       	subi	r24, 0x01	; 1
    7a46:	80 93 2a 01 	sts	0x012A, r24
    7a4a:	88 23       	and	r24, r24
		getch();
    7a4c:	69 f7       	brne	.-38     	; 0x7a28 <processOptiboot+0x15e>
    7a4e:	15 c0       	rjmp	.+42     	; 0x7a7a <processOptiboot+0x1b0>

		verifySpace();
    7a50:	85 37       	cpi	r24, 0x75	; 117
    7a52:	39 f4       	brne	.+14     	; 0x7a62 <processOptiboot+0x198>
			__asm__("elpm %0,Z\n":"=r"(result):"z"(address));
			putch(result);
			address++;
		} while(--length);
#else
		do putch(pgm_read_byte_near(address++));
    7a54:	26 df       	rcall	.-436    	; 0x78a2 <verifySpace>
    7a56:	8e e1       	ldi	r24, 0x1E	; 30
    7a58:	bd de       	rcall	.-646    	; 0x77d4 <putch>
    7a5a:	85 e9       	ldi	r24, 0x95	; 149
    7a5c:	bb de       	rcall	.-650    	; 0x77d4 <putch>
    7a5e:	8f e0       	ldi	r24, 0x0F	; 15
    7a60:	54 cf       	rjmp	.-344    	; 0x790a <processOptiboot+0x40>
    7a62:	81 35       	cpi	r24, 0x51	; 81
    7a64:	49 f4       	brne	.+18     	; 0x7a78 <processOptiboot+0x1ae>
    7a66:	1d df       	rcall	.-454    	; 0x78a2 <verifySpace>
    7a68:	82 e0       	ldi	r24, 0x02	; 2
    7a6a:	90 e0       	ldi	r25, 0x00	; 0
    7a6c:	6e ee       	ldi	r22, 0xEE	; 238
		while(--length);
    7a6e:	22 d0       	rcall	.+68     	; 0x7ab4 <__eewr_byte_m328p>
    7a70:	80 e1       	ldi	r24, 0x10	; 16
    7a72:	b0 de       	rcall	.-672    	; 0x77d4 <putch>
    7a74:	80 e0       	ldi	r24, 0x00	; 0
    7a76:	04 c0       	rjmp	.+8      	; 0x7a80 <processOptiboot+0x1b6>
    7a78:	14 df       	rcall	.-472    	; 0x78a2 <verifySpace>
    7a7a:	80 e1       	ldi	r24, 0x10	; 16
    7a7c:	ab de       	rcall	.-682    	; 0x77d4 <putch>
#endif
	}
	/* Get device signature bytes  */
	else if(ch == STK_READ_SIGN) {
    7a7e:	81 e0       	ldi	r24, 0x01	; 1
    7a80:	cf 5f       	subi	r28, 0xFF	; 255
		// READ SIGN - return what Avrdude wants to hear
		verifySpace();
    7a82:	de 4f       	sbci	r29, 0xFE	; 254
    7a84:	de bf       	out	0x3e, r29	; 62
		putch(SIGNATURE_0);
    7a86:	cd bf       	out	0x3d, r28	; 61
    7a88:	df 91       	pop	r29
    7a8a:	cf 91       	pop	r28
		putch(SIGNATURE_1);
    7a8c:	1f 91       	pop	r17
    7a8e:	0f 91       	pop	r16
    7a90:	08 95       	ret

00007a92 <memcpy_P>:
		putch(SIGNATURE_2);
    7a92:	fb 01       	movw	r30, r22
    7a94:	dc 01       	movw	r26, r24
	} else if(ch == STK_LEAVE_PROGMODE) {
    7a96:	02 c0       	rjmp	.+4      	; 0x7a9c <memcpy_P+0xa>
    7a98:	05 90       	lpm	r0, Z+
		// Adaboot no-wait mod
		//watchdogConfig(WATCHDOG_16MS);
		verifySpace();
    7a9a:	0d 92       	st	X+, r0
    7a9c:	41 50       	subi	r20, 0x01	; 1
		eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7a9e:	50 40       	sbci	r21, 0x00	; 0
    7aa0:	d8 f7       	brcc	.-10     	; 0x7a98 <memcpy_P+0x6>
    7aa2:	08 95       	ret

00007aa4 <__eerd_byte_m328p>:
    7aa4:	f9 99       	sbic	0x1f, 1	; 31
    7aa6:	fe cf       	rjmp	.-4      	; 0x7aa4 <__eerd_byte_m328p>
		putch(STK_OK);
    7aa8:	92 bd       	out	0x22, r25	; 34
    7aaa:	81 bd       	out	0x21, r24	; 33
    7aac:	f8 9a       	sbi	0x1f, 0	; 31
		return(0);
    7aae:	99 27       	eor	r25, r25
    7ab0:	80 b5       	in	r24, 0x20	; 32
	} else {
		// This covers the response to commands like STK_ENTER_PROGMODE
		verifySpace();
    7ab2:	08 95       	ret

00007ab4 <__eewr_byte_m328p>:
    7ab4:	26 2f       	mov	r18, r22

00007ab6 <__eewr_r18_m328p>:
	}
	putch(STK_OK);
    7ab6:	f9 99       	sbic	0x1f, 1	; 31
    7ab8:	fe cf       	rjmp	.-4      	; 0x7ab6 <__eewr_r18_m328p>
    7aba:	1f ba       	out	0x1f, r1	; 31
	return(1);
    7abc:	92 bd       	out	0x22, r25	; 34
}
    7abe:	81 bd       	out	0x21, r24	; 33
    7ac0:	20 bd       	out	0x20, r18	; 32
    7ac2:	0f b6       	in	r0, 0x3f	; 63
    7ac4:	f8 94       	cli
    7ac6:	fa 9a       	sbi	0x1f, 2	; 31
    7ac8:	f9 9a       	sbi	0x1f, 1	; 31
    7aca:	0f be       	out	0x3f, r0	; 63
    7acc:	01 96       	adiw	r24, 0x01	; 1
    7ace:	08 95       	ret

00007ad0 <_exit>:
    7ad0:	f8 94       	cli

00007ad2 <__stop_program>:
    7ad2:	ff cf       	rjmp	.-2      	; 0x7ad2 <__stop_program>
