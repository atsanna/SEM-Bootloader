
semboot_debug328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00008012  000010a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001012  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800120  00800120  000010c6  2**0
                  ALLOC
  3 .stab         000008c4  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000198  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00001b28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001da5  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3e  00000000  00000000  00003a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dca  00000000  00000000  000044cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  00005298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e7  00000000  00000000  00005730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017f9  00000000  00000000  00005f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00007710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	62 c1       	rjmp	.+708    	; 0x72c6 <__ctors_end>
    7002:	00 00       	nop
    7004:	de c1       	rjmp	.+956    	; 0x73c2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	dc c1       	rjmp	.+952    	; 0x73c2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	da c1       	rjmp	.+948    	; 0x73c2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	d8 c1       	rjmp	.+944    	; 0x73c2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	d6 c1       	rjmp	.+940    	; 0x73c2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	d4 c1       	rjmp	.+936    	; 0x73c2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	d2 c1       	rjmp	.+932    	; 0x73c2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	d0 c1       	rjmp	.+928    	; 0x73c2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	ce c1       	rjmp	.+924    	; 0x73c2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	cc c1       	rjmp	.+920    	; 0x73c2 <__bad_interrupt>
    702a:	00 00       	nop
    702c:	ca c1       	rjmp	.+916    	; 0x73c2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	c8 c1       	rjmp	.+912    	; 0x73c2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	c6 c1       	rjmp	.+908    	; 0x73c2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	c4 c1       	rjmp	.+904    	; 0x73c2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	c2 c1       	rjmp	.+900    	; 0x73c2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	c0 c1       	rjmp	.+896    	; 0x73c2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	be c1       	rjmp	.+892    	; 0x73c2 <__bad_interrupt>
    7046:	00 00       	nop
    7048:	bc c1       	rjmp	.+888    	; 0x73c2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	ba c1       	rjmp	.+884    	; 0x73c2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	b8 c1       	rjmp	.+880    	; 0x73c2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	b6 c1       	rjmp	.+876    	; 0x73c2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	b4 c1       	rjmp	.+872    	; 0x73c2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	b2 c1       	rjmp	.+868    	; 0x73c2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	b0 c1       	rjmp	.+864    	; 0x73c2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	ae c1       	rjmp	.+860    	; 0x73c2 <__bad_interrupt>
	...

00007068 <mDebugMain_EXIT>:
    7068:	53 74 61 72 74 20 75 73 65 72 20 61 70 70 00        Start user app.

00007077 <mDebugMain_TITLE>:
    7077:	53 45 4d 42 6f 6f 74 20 66 6f 72 20 41 72 64 75     SEMBoot for Ardu
    7087:	69 6e 6f 20 55 6e 6f 2c 20 56 65 72 73 69 6f 6e     ino Uno, Version
    7097:	20 30 2e 36 00                                       0.6.

0000709c <mDebugMain_PREFIX>:
    709c:	4d 61 69 6e 3a 20 00                                Main: .

000070a3 <mDebugNet_DONE>:
    70a3:	4e 65 74 77 6f 72 6b 20 69 6e 69 74 20 64 6f 6e     Network init don
    70b3:	65 00                                               e.

000070b5 <mDebugNet_MAC>:
    70b5:	09 20 20 20 20 4d 41 43 3a 20 00                    .    MAC: .

000070c0 <mDebugNet_GW>:
    70c0:	09 47 61 74 65 77 61 79 3a 20 00                    .Gateway: .

000070cb <mDebugNet_SUBN>:
    70cb:	09 20 53 75 62 6e 65 74 3a 20 00                    . Subnet: .

000070d6 <mDebugNet_ADDR>:
    70d6:	09 41 64 64 72 65 73 73 3a 20 00                    .Address: .

000070e1 <mDebugNet_BUILTIN>:
    70e1:	42 75 69 6c 74 2d 69 6e 20 73 65 74 74 69 6e 67     Built-in setting
    70f1:	73 00                                               s.

000070f3 <mDebugNet_EEPROM>:
    70f3:	45 45 50 52 4f 4d 20 73 65 74 74 69 6e 67 73 00     EEPROM settings.

00007103 <mDebugNet_PREFIX>:
    7103:	20 4e 65 74 3a 20 00                                 Net: .

0000710a <tftp_invalid_image_packet>:
    710a:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
    711a:	67 65 20 66 69 6c 65 00                             ge file.

00007122 <tftp_unknown_error_packet>:
    7122:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0000712d <tftp_full_error_packet>:
    712d:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

00007137 <tftp_opcode_error_packet>:
    7137:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

00007144 <mDebugTftp_SOCK>:
    7144:	49 6e 69 74 20 73 6f 63 6b 65 74 20 74 6f 20 70     Init socket to p
    7154:	6f 72 74 20 00                                      ort .

00007159 <mDebugTftp_PORT>:
    7159:	09 44 61 74 61 50 6f 72 74 3a 20 00                 .DataPort: .

00007165 <mDebugTftp_INIT>:
    7165:	54 46 54 50 20 73 65 72 76 65 72 20 69 6e 69 74     TFTP server init
    7175:	20 64 6f 6e 65 00                                    done.

0000717b <mDebugTftp_RESP>:
    717b:	52 65 73 70 6f 6e 73 65 20 73 65 6e 74 00           Response sent.

00007189 <mDebugTftp_SFACK>:
    7189:	53 65 6e 74 20 46 69 6e 61 6c 20 41 43 4b 00        Sent Final ACK.

00007198 <mDebugTftp_SACK>:
    7198:	53 65 6e 74 20 41 43 4b 00                          Sent ACK.

000071a1 <mDebugTftp_INVOP>:
    71a1:	49 6e 76 61 6c 69 64 20 6f 70 63 6f 64 65 20 00     Invalid opcode .

000071b1 <mDebugTftp_OPERR>:
    71b1:	45 72 72 6f 72 00                                   Error.

000071b7 <mDebugTftp_OPACK>:
    71b7:	41 63 6b 6e 6f 77 6c 65 64 67 65 00                 Acknowledge.

000071c3 <mDebugTftp_DONE>:
    71c3:	46 6c 61 73 68 69 6e 67 20 63 6f 6d 70 6c 65 74     Flashing complet
    71d3:	65 00                                               e.

000071d5 <mDebugTftp_PLEN>:
    71d5:	50 61 63 6b 65 74 20 6c 65 6e 67 74 68 20 61 64     Packet length ad
    71e5:	6a 75 73 74 65 64 20 74 6f 20 00                    justed to .

000071f0 <mDebugTftp_WRADDR>:
    71f0:	57 72 69 74 69 6e 67 20 64 61 74 61 20 66 72 6f     Writing data fro
    7200:	6d 20 61 64 64 72 65 73 73 20 00                    m address .

0000720b <mDebugTftp_FULL>:
    720b:	46 6c 61 73 68 20 69 73 20 66 75 6c 6c 00           Flash is full.

00007219 <mDebugTftp_NPORT>:
    7219:	43 68 61 6e 67 65 64 20 74 6f 20 70 6f 72 74 20     Changed to port 
	...

0000722a <mDebugTftp_OPDATA>:
    722a:	44 61 74 61 20 62 6c 6f 63 6b 00                    Data block.

00007235 <mDebugTftp_OPWRQ>:
    7235:	57 72 69 74 65 20 72 65 71 75 65 73 74 00           Write request.

00007243 <mDebugTftp_OPRRQ>:
    7243:	52 65 61 64 20 72 65 71 75 65 73 74 00              Read request.

00007250 <mDebugTftp_DLEN>:
    7250:	20 61 6e 64 20 64 61 74 61 20 6c 65 6e 67 74 68      and data length
    7260:	20 00                                                .

00007262 <mDebugTftp_OPCODE>:
    7262:	20 77 69 74 68 20 6f 70 63 6f 64 65 20 00            with opcode .

00007270 <mDebugTftp_BLOCK>:
    7270:	54 68 69 73 20 69 73 20 62 6c 6f 63 6b 20 00        This is block .

0000727f <mDebugTftp_RADDR>:
    727f:	53 65 74 20 75 70 20 72 65 74 75 72 6e 20 61 64     Set up return ad
    728f:	64 72 65 73 73 00                                   dress.

00007295 <mDebugTftp_OVFL>:
    7295:	4f 76 65 72 66 6c 6f 77 00                          Overflow.

0000729e <mDebugTftp_START>:
    729e:	50 72 6f 63 65 73 73 69 6e 67 20 70 61 63 6b 65     Processing packe
    72ae:	74 20 6f 66 20 73 69 7a 65 20 00                    t of size .

000072b9 <mDebugTftp_PREFIX>:
    72b9:	54 66 74 70 3a 20 00                                Tftp: .

000072c0 <mDebug_HEXPREF>:
    72c0:	30 78 00                                            0x.

000072c3 <mDebug_NEWLINE>:
    72c3:	0d 0a 00                                            ...

000072c6 <__ctors_end>:
    72c6:	11 24       	eor	r1, r1
    72c8:	1f be       	out	0x3f, r1	; 63
    72ca:	cf ef       	ldi	r28, 0xFF	; 255
    72cc:	d8 e0       	ldi	r29, 0x08	; 8
    72ce:	de bf       	out	0x3e, r29	; 62
    72d0:	cd bf       	out	0x3d, r28	; 61

000072d2 <__do_copy_data>:
    72d2:	11 e0       	ldi	r17, 0x01	; 1
    72d4:	a0 e0       	ldi	r26, 0x00	; 0
    72d6:	b1 e0       	ldi	r27, 0x01	; 1
    72d8:	e2 e1       	ldi	r30, 0x12	; 18
    72da:	f0 e8       	ldi	r31, 0x80	; 128
    72dc:	02 c0       	rjmp	.+4      	; 0x72e2 <__do_copy_data+0x10>
    72de:	05 90       	lpm	r0, Z+
    72e0:	0d 92       	st	X+, r0
    72e2:	a0 32       	cpi	r26, 0x20	; 32
    72e4:	b1 07       	cpc	r27, r17
    72e6:	d9 f7       	brne	.-10     	; 0x72de <__do_copy_data+0xc>

000072e8 <__do_clear_bss>:
    72e8:	11 e0       	ldi	r17, 0x01	; 1
    72ea:	a0 e2       	ldi	r26, 0x20	; 32
    72ec:	b1 e0       	ldi	r27, 0x01	; 1
    72ee:	01 c0       	rjmp	.+2      	; 0x72f2 <.do_clear_bss_start>

000072f0 <.do_clear_bss_loop>:
    72f0:	1d 92       	st	X+, r1

000072f2 <.do_clear_bss_start>:
    72f2:	af 32       	cpi	r26, 0x2F	; 47
    72f4:	b1 07       	cpc	r27, r17
    72f6:	e1 f7       	brne	.-8      	; 0x72f0 <.do_clear_bss_loop>
    72f8:	01 d0       	rcall	.+2      	; 0x72fc <main>
    72fa:	89 c6       	rjmp	.+3346   	; 0x800e <_exit>

000072fc <main>:

int main(void)
{
	/* Disable the watchdog timer to prevent
	 * eternal reset loop of doom and despair */
	uint8_t ch = MCUSR;
    72fc:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
    72fe:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    7300:	98 e1       	ldi	r25, 0x18	; 24
    7302:	0f b6       	in	r0, 0x3f	; 63
    7304:	f8 94       	cli
    7306:	90 93 60 00 	sts	0x0060, r25
    730a:	10 92 60 00 	sts	0x0060, r1
    730e:	0f be       	out	0x3f, r0	; 63
	if (!(ch & _BV(EXTRF))) appStart(); //if not external (hard reset) skip bootloader
    7310:	81 fd       	sbrc	r24, 1
    7312:	01 c0       	rjmp	.+2      	; 0x7316 <main+0x1a>
    7314:	61 d5       	rcall	.+2754   	; 0x7dd8 <appStart>
    7316:	8f ef       	ldi	r24, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7318:	95 ea       	ldi	r25, 0xA5	; 165
    731a:	ae e0       	ldi	r26, 0x0E	; 14
    731c:	81 50       	subi	r24, 0x01	; 1
    731e:	90 40       	sbci	r25, 0x00	; 0
    7320:	a0 40       	sbci	r26, 0x00	; 0
    7322:	e1 f7       	brne	.-8      	; 0x731c <main+0x20>
    7324:	00 c0       	rjmp	.+0      	; 0x7326 <main+0x2a>
    7326:	00 00       	nop
    7328:	11 24       	eor	r1, r1
	/* This code makes the following assumptions:
	 * No interrupts will execute
	 * SP points to RAMEND
	 * r1 contains zero */
	//cli();
	asm volatile("clr __zero_reg__");
    732a:	85 e0       	ldi	r24, 0x05	; 5
	// 0x02 -> ClkIO/8 -> 500ns period, 32ms max
	// 0X03 -> ClkIO/64 -> 4us period, 256ms max
	// 0x04 -> ClkIO/256 -> 16us period, 1024ms max
	// 0x05 -> ClkIO/1024 -> 64us period, 4096ms max
	// Set up Timer 1 as timekeeper for LED flashing
	TCCR1B = _BV(CS12) | _BV(CS10); // Same thing as TCCR1B = 0x05;
    732c:	80 93 81 00 	sts	0x0081, r24
    7330:	80 e0       	ldi	r24, 0x00	; 0

	/* Write version information in the EEPROM */
	if(eeprom_read_byte(EEPROM_MAJVER) != ARIADNE_MAJVER)
    7332:	90 e0       	ldi	r25, 0x00	; 0
    7334:	56 d6       	rcall	.+3244   	; 0x7fe2 <__eerd_byte_m328p>
    7336:	88 23       	and	r24, r24
    7338:	21 f0       	breq	.+8      	; 0x7342 <main+0x46>
    733a:	80 e0       	ldi	r24, 0x00	; 0
    733c:	90 e0       	ldi	r25, 0x00	; 0
		eeprom_write_byte(EEPROM_MAJVER, ARIADNE_MAJVER);
    733e:	60 e0       	ldi	r22, 0x00	; 0
    7340:	58 d6       	rcall	.+3248   	; 0x7ff2 <__eewr_byte_m328p>
    7342:	81 e0       	ldi	r24, 0x01	; 1
    7344:	90 e0       	ldi	r25, 0x00	; 0
    7346:	4d d6       	rcall	.+3226   	; 0x7fe2 <__eerd_byte_m328p>
	if(eeprom_read_byte(EEPROM_MINVER) != ARIADNE_MINVER)
    7348:	84 30       	cpi	r24, 0x04	; 4
    734a:	21 f0       	breq	.+8      	; 0x7354 <main+0x58>
    734c:	81 e0       	ldi	r24, 0x01	; 1
    734e:	90 e0       	ldi	r25, 0x00	; 0
    7350:	64 e0       	ldi	r22, 0x04	; 4
    7352:	4f d6       	rcall	.+3230   	; 0x7ff2 <__eewr_byte_m328p>
		eeprom_write_byte(EEPROM_MINVER, ARIADNE_MINVER);
    7354:	d1 d4       	rcall	.+2466   	; 0x7cf8 <serialInit>
    7356:	8c e9       	ldi	r24, 0x9C	; 156
    7358:	90 e7       	ldi	r25, 0x70	; 112
    735a:	67 e7       	ldi	r22, 0x77	; 119
    735c:	70 e7       	ldi	r23, 0x70	; 112

	//Initialize UART communication
	serialInit();
    735e:	72 d4       	rcall	.+2276   	; 0x7c44 <tracePGMln>
    7360:	92 d0       	rcall	.+292    	; 0x7486 <spiInit>
	DBG_MAIN(tracePGMlnMain(mDebugMain_TITLE);)
    7362:	9c d0       	rcall	.+312    	; 0x749c <netInit>
    7364:	39 d3       	rcall	.+1650   	; 0x79d8 <tftpInit>
    7366:	10 92 2d 01 	sts	0x012D, r1
    736a:	10 92 2e 01 	sts	0x012E, r1
		buttonInit();
	)

	/** Initalize SPI communication */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_SPI);)
	spiInit();
    736e:	13 e0       	ldi	r17, 0x03	; 3
    7370:	c0 e0       	ldi	r28, 0x00	; 0
	/** Initialize networking */
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_NET);)
	netInit();
    7372:	d0 e0       	ldi	r29, 0x00	; 0
    7374:	80 91 2d 01 	lds	r24, 0x012D

	// Initialize the UDP socket for tftp
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_TFTP);)
	tftpInit();
    7378:	88 23       	and	r24, r24
#if defined(ANNOUNCE)
	DBG_MAIN_EX(tracePGMlnMain(mDebugMain_ANN);)
	announceInit();
#endif

	serialFlashing = FALSE;
    737a:	19 f4       	brne	.+6      	; 0x7382 <main+0x86>
    737c:	62 d3       	rcall	.+1732   	; 0x7a42 <tftpPoll>
	tftpFlashing = FALSE;
    737e:	88 23       	and	r24, r24
    7380:	e9 f0       	breq	.+58     	; 0x73bc <main+0xc0>
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
				// Delete first page of flash memory
				boot_page_erase(0);
    7382:	80 91 2e 01 	lds	r24, 0x012E
    7386:	88 23       	and	r24, r24
	serialFlashing = FALSE;
	tftpFlashing = FALSE;

	for(;;) {
		// If there is no serial flashing under way, poll tftp
		if(!serialFlashing)
    7388:	19 f4       	brne	.+6      	; 0x7390 <main+0x94>
    738a:	dc d4       	rcall	.+2488   	; 0x7d44 <serialPoll>
    738c:	88 23       	and	r24, r24
    738e:	b1 f0       	breq	.+44     	; 0x73bc <main+0xc0>
			// If tftp recieved a FINAL_ACK, break
			if(tftpPoll() == 0)
    7390:	0f d5       	rcall	.+2590   	; 0x7db0 <timedOut>
    7392:	88 23       	and	r24, r24
    7394:	89 f0       	breq	.+34     	; 0x73b8 <main+0xbc>
    7396:	82 e0       	ldi	r24, 0x02	; 2
				break;

		// If there is no tftp flashing, poll serial
		if(!tftpFlashing)
    7398:	90 e0       	ldi	r25, 0x00	; 0
    739a:	23 d6       	rcall	.+3142   	; 0x7fe2 <__eerd_byte_m328p>
    739c:	8e 3e       	cpi	r24, 0xEE	; 238
    739e:	71 f0       	breq	.+28     	; 0x73bc <main+0xc0>
			// If flashing is done exit
			if(serialPoll() == 0)
    73a0:	80 91 2e 01 	lds	r24, 0x012E
    73a4:	81 30       	cpi	r24, 0x01	; 1
    73a6:	41 f4       	brne	.+16     	; 0x73b8 <main+0xbc>
		/* As explained above this goes out */
#if defined(ANNOUNCE)
		announcePoll();
#endif

		if(timedOut()) {
    73a8:	fe 01       	movw	r30, r28
    73aa:	10 93 57 00 	sts	0x0057, r17
    73ae:	e8 95       	spm
			if(eeprom_read_byte(EEPROM_IMG_STAT) == EEPROM_IMG_OK_VALUE) break;
    73b0:	13 d3       	rcall	.+1574   	; 0x79d8 <tftpInit>
    73b2:	f5 d4       	rcall	.+2538   	; 0x7d9e <resetTick>
    73b4:	10 92 2e 01 	sts	0x012E, r1
    73b8:	d0 d4       	rcall	.+2464   	; 0x7d5a <updateLed>
    73ba:	dc cf       	rjmp	.-72     	; 0x7374 <main+0x78>

			//TODO: determine the conditions for reseting server OR reseting socket
			if(tftpFlashing == TRUE) {
    73bc:	0d d5       	rcall	.+2586   	; 0x7dd8 <appStart>
    73be:	80 e0       	ldi	r24, 0x00	; 0
    73c0:	90 e0       	ldi	r25, 0x00	; 0

000073c2 <__bad_interrupt>:
    73c2:	1e ce       	rjmp	.-964    	; 0x7000 <__vectors>

000073c4 <spiWriteReg>:
		tracePGM(mDebugSpi_COMMA);
		tracenum(value);
	)

	
	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
    73c4:	20 e5       	ldi	r18, 0x50	; 80
    73c6:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    73c8:	2a 98       	cbi	0x05, 2	; 5
	SPDR = cb;  //Socket 3 BSB Write 0x6D Selects Socket 3 Register, write mode, 1 byte data length
	while(!(SPSR & _BV(SPIF)));

#else //Standard W5100 Code

	SPDR = SPI_WRITE;
    73ca:	20 ef       	ldi	r18, 0xF0	; 240
    73cc:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    73ce:	0d b4       	in	r0, 0x2d	; 45
    73d0:	07 fe       	sbrs	r0, 7
    73d2:	fd cf       	rjmp	.-6      	; 0x73ce <spiWriteReg+0xa>

	SPDR = address >> 8;
    73d4:	29 2f       	mov	r18, r25
    73d6:	33 27       	eor	r19, r19
    73d8:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    73da:	0d b4       	in	r0, 0x2d	; 45
    73dc:	07 fe       	sbrs	r0, 7
    73de:	fd cf       	rjmp	.-6      	; 0x73da <spiWriteReg+0x16>

	SPDR = address & 0xff;
    73e0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    73e2:	0d b4       	in	r0, 0x2d	; 45
    73e4:	07 fe       	sbrs	r0, 7
    73e6:	fd cf       	rjmp	.-6      	; 0x73e2 <spiWriteReg+0x1e>

#endif

	SPDR = value;
    73e8:	4e bd       	out	0x2e, r20	; 46
	while(!(SPSR & _BV(SPIF)));
    73ea:	0d b4       	in	r0, 0x2d	; 45
    73ec:	07 fe       	sbrs	r0, 7
    73ee:	fd cf       	rjmp	.-6      	; 0x73ea <spiWriteReg+0x26>

	SS_HIGH();
    73f0:	2a 9a       	sbi	0x05, 2	; 5
	
	cb = 0; //prevents compiler whining about unused cb variable
	SPCR = cb; // Turn off SPI
    73f2:	1c bc       	out	0x2c, r1	; 44
}
    73f4:	08 95       	ret

000073f6 <spiWriteWord>:

void spiWriteWord(uint16_t address, uint8_t cb, uint16_t value)
{
    73f6:	ef 92       	push	r14
    73f8:	ff 92       	push	r15
    73fa:	1f 93       	push	r17
    73fc:	cf 93       	push	r28
    73fe:	df 93       	push	r29
    7400:	ec 01       	movw	r28, r24
    7402:	16 2f       	mov	r17, r22
    7404:	7a 01       	movw	r14, r20
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, cb, value >> 8);
    7406:	45 2f       	mov	r20, r21
    7408:	55 27       	eor	r21, r21
    740a:	dc df       	rcall	.-72     	; 0x73c4 <spiWriteReg>
    740c:	ce 01       	movw	r24, r28
	spiWriteReg(address, cb, value & 0xff);
    740e:	01 96       	adiw	r24, 0x01	; 1
    7410:	61 2f       	mov	r22, r17
    7412:	4e 2d       	mov	r20, r14
    7414:	d7 df       	rcall	.-82     	; 0x73c4 <spiWriteReg>
    7416:	df 91       	pop	r29
    7418:	cf 91       	pop	r28
}
    741a:	1f 91       	pop	r17
    741c:	ff 90       	pop	r15
    741e:	ef 90       	pop	r14
    7420:	08 95       	ret

00007422 <spiReadReg>:
    7422:	20 e5       	ldi	r18, 0x50	; 80
    7424:	2c bd       	out	0x2c, r18	; 44
	)
	//#endif

	uint8_t returnValue;

	SPCR = _BV(SPE) | _BV(MSTR);
    7426:	2a 98       	cbi	0x05, 2	; 5
    7428:	2f e0       	ldi	r18, 0x0F	; 15
	SS_LOW();
    742a:	2e bd       	out	0x2e, r18	; 46
	SPDR = cb;  //Socket 3 BSB Read 0x69 Selects Socket 3 Register, read mode, 1 byte data length
	while(!(SPSR & _BV(SPIF)));

#else //Standard W5100 Code

	SPDR = SPI_READ;
    742c:	0d b4       	in	r0, 0x2d	; 45
    742e:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
    7430:	fd cf       	rjmp	.-6      	; 0x742c <spiReadReg+0xa>
    7432:	29 2f       	mov	r18, r25
    7434:	33 27       	eor	r19, r19

	SPDR = address >> 8;
    7436:	2e bd       	out	0x2e, r18	; 46
    7438:	0d b4       	in	r0, 0x2d	; 45
    743a:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
    743c:	fd cf       	rjmp	.-6      	; 0x7438 <spiReadReg+0x16>
    743e:	8e bd       	out	0x2e, r24	; 46
    7440:	0d b4       	in	r0, 0x2d	; 45

	SPDR = address & 0xff;
    7442:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
    7444:	fd cf       	rjmp	.-6      	; 0x7440 <spiReadReg+0x1e>
    7446:	1e bc       	out	0x2e, r1	; 46
    7448:	0d b4       	in	r0, 0x2d	; 45

#endif

	SPDR = 0;
    744a:	07 fe       	sbrs	r0, 7
	while(!(SPSR & _BV(SPIF)));
    744c:	fd cf       	rjmp	.-6      	; 0x7448 <spiReadReg+0x26>
    744e:	2a 9a       	sbi	0x05, 2	; 5
    7450:	8e b5       	in	r24, 0x2e	; 46

	SS_HIGH();
    7452:	1c bc       	out	0x2c, r1	; 44
	returnValue = SPDR;
    7454:	08 95       	ret

00007456 <spiReadWord>:
	
	cb = 0; //prevents compiler whining about unused cb variable
	SPCR = cb; // Turn off SPI
    7456:	0f 93       	push	r16
		tracePGM(mDebugSpi_COMMA);
		tracenum(returnValue);
	)
	return(returnValue);
	
}
    7458:	1f 93       	push	r17

uint16_t spiReadWord(uint16_t address, uint8_t cb)
{
    745a:	cf 93       	push	r28
    745c:	df 93       	push	r29
    745e:	ec 01       	movw	r28, r24
    7460:	16 2f       	mov	r17, r22
    7462:	df df       	rcall	.-66     	; 0x7422 <spiReadReg>
    7464:	08 2f       	mov	r16, r24
	// Read uint16_t from Ethernet controller
	return((spiReadReg(address, cb) << 8) | spiReadReg(address + 1, cb));
    7466:	ce 01       	movw	r24, r28
    7468:	01 96       	adiw	r24, 0x01	; 1
    746a:	61 2f       	mov	r22, r17
    746c:	da df       	rcall	.-76     	; 0x7422 <spiReadReg>
    746e:	20 2f       	mov	r18, r16
    7470:	30 e0       	ldi	r19, 0x00	; 0
    7472:	32 2f       	mov	r19, r18
    7474:	22 27       	eor	r18, r18
    7476:	90 e0       	ldi	r25, 0x00	; 0
    7478:	82 2b       	or	r24, r18
    747a:	93 2b       	or	r25, r19
    747c:	df 91       	pop	r29
    747e:	cf 91       	pop	r28
}
    7480:	1f 91       	pop	r17
    7482:	0f 91       	pop	r16
    7484:	08 95       	ret

00007486 <spiInit>:
    7486:	8c e2       	ldi	r24, 0x2C	; 44
    7488:	85 b9       	out	0x05, r24	; 5
    748a:	84 b9       	out	0x04, r24	; 4
    748c:	24 98       	cbi	0x04, 4	; 4
	 * At this stage all pins are set to HIGH. This in fact DISABLES SPI for both Ethernet and SD.
	 * SS pin for ethernet is pulled low just in time for reading or writing data inside those
	 * functions. */

	/** Set SPI pins high */
	SPI_PORT = _BV(SCK) | _BV(MOSI) | _BV(SS);
    748e:	5c 9a       	sbi	0x0b, 4	; 11
    7490:	54 9a       	sbi	0x0a, 4	; 10
	//SPI_PORT |= _BV(SS);
	/** Set SPI pins as output */
	SPI_DDR = _BV(SCK) | _BV(MOSI) | _BV(SS);
    7492:	81 e5       	ldi	r24, 0x51	; 81
	//SPI_DDR |= _BV(SS);
	
	//MISO as input
	SPI_DDR &= ~_BV(MISO);
    7494:	8c bd       	out	0x2c, r24	; 44
	ETH_DDR |= _BV(ETH_SS);
	#endif

	/** Disable SD card */
	/** Set SD SS pin high */
	SD_PORT |= _BV(SD_SS);
    7496:	81 e0       	ldi	r24, 0x01	; 1
	/** Set SD SS pin as output */
	SD_DDR |= _BV(SD_SS);
    7498:	8d bd       	out	0x2d, r24	; 45
	/** Set led pin as output */
	LED_DDR |= _BV(LED);
	#endif

	//Set as Master
	SPCR = ( 1 << SPE ) | ( 1 << MSTR ) | ( 1 << SPR0 );
    749a:	08 95       	ret

0000749c <netInit>:
	0x55          // TMSR Tx Memory Size Register, 2K per socket
};


void netInit(void)
{
    749c:	0f 93       	push	r16
    749e:	1f 93       	push	r17
    74a0:	cf 93       	push	r28
    74a2:	df 93       	push	r29
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
    74a4:	83 e0       	ldi	r24, 0x03	; 3
    74a6:	90 e0       	ldi	r25, 0x00	; 0
    74a8:	9c d5       	rcall	.+2872   	; 0x7fe2 <__eerd_byte_m328p>
    74aa:	85 35       	cpi	r24, 0x55	; 85
    74ac:	b9 f4       	brne	.+46     	; 0x74dc <netInit+0x40>
    74ae:	84 e0       	ldi	r24, 0x04	; 4
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
    74b0:	90 e0       	ldi	r25, 0x00	; 0
    74b2:	97 d5       	rcall	.+2862   	; 0x7fe2 <__eerd_byte_m328p>
    74b4:	8a 3a       	cpi	r24, 0xAA	; 170
    74b6:	91 f4       	brne	.+36     	; 0x74dc <netInit+0x40>
    74b8:	01 e0       	ldi	r16, 0x01	; 1
    74ba:	11 e0       	ldi	r17, 0x01	; 1
    74bc:	c5 e0       	ldi	r28, 0x05	; 5
    74be:	d0 e0       	ldi	r29, 0x00	; 0
    74c0:	ce 01       	movw	r24, r28
    74c2:	8f d5       	rcall	.+2846   	; 0x7fe2 <__eerd_byte_m328p>

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
    74c4:	f8 01       	movw	r30, r16
    74c6:	81 93       	st	Z+, r24
    74c8:	8f 01       	movw	r16, r30
    74ca:	21 96       	adiw	r28, 0x01	; 1
    74cc:	c7 31       	cpi	r28, 0x17	; 23
    74ce:	d1 05       	cpc	r29, r1
    74d0:	b9 f7       	brne	.-18     	; 0x74c0 <netInit+0x24>
	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
    74d2:	83 e0       	ldi	r24, 0x03	; 3
    74d4:	91 e7       	ldi	r25, 0x71	; 113
    74d6:	63 ef       	ldi	r22, 0xF3	; 243
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);

		DBG_NET(tracePGMlnNet(mDebugNet_EEPROM);)
    74d8:	70 e7       	ldi	r23, 0x70	; 112
    74da:	04 c0       	rjmp	.+8      	; 0x74e4 <netInit+0x48>
    74dc:	83 e0       	ldi	r24, 0x03	; 3
    74de:	91 e7       	ldi	r25, 0x71	; 113
    74e0:	61 ee       	ldi	r22, 0xE1	; 225

	} DBG_NET(
    74e2:	70 e7       	ldi	r23, 0x70	; 112
    74e4:	af d3       	rcall	.+1886   	; 0x7c44 <tracePGMln>
    74e6:	83 e0       	ldi	r24, 0x03	; 3
    74e8:	91 e7       	ldi	r25, 0x71	; 113
    74ea:	66 ed       	ldi	r22, 0xD6	; 214
    74ec:	70 e7       	ldi	r23, 0x70	; 112
		else tracePGMlnNet(mDebugNet_BUILTIN);
	)


	DBG_NET(
    74ee:	aa d3       	rcall	.+1876   	; 0x7c44 <tracePGMln>
    74f0:	cf e0       	ldi	r28, 0x0F	; 15
    74f2:	d1 e0       	ldi	r29, 0x01	; 1
    74f4:	1f e0       	ldi	r17, 0x0F	; 15
    74f6:	69 91       	ld	r22, Y+
    74f8:	70 e0       	ldi	r23, 0x00	; 0
    74fa:	80 e0       	ldi	r24, 0x00	; 0
    74fc:	90 e0       	ldi	r25, 0x00	; 0
    74fe:	42 e0       	ldi	r20, 0x02	; 2
    7500:	d3 d3       	rcall	.+1958   	; 0x7ca8 <tracehex>
    7502:	12 31       	cpi	r17, 0x12	; 18
    7504:	11 f0       	breq	.+4      	; 0x750a <netInit+0x6e>
    7506:	8e e2       	ldi	r24, 0x2E	; 46
    7508:	04 d4       	rcall	.+2056   	; 0x7d12 <putch>
    750a:	1f 5f       	subi	r17, 0xFF	; 255
    750c:	13 31       	cpi	r17, 0x13	; 19
    750e:	99 f7       	brne	.-26     	; 0x74f6 <netInit+0x5a>
    7510:	83 e0       	ldi	r24, 0x03	; 3
    7512:	91 e7       	ldi	r25, 0x71	; 113
    7514:	6b ec       	ldi	r22, 0xCB	; 203
    7516:	70 e7       	ldi	r23, 0x70	; 112
    7518:	95 d3       	rcall	.+1834   	; 0x7c44 <tracePGMln>
    751a:	c5 e0       	ldi	r28, 0x05	; 5
    751c:	d1 e0       	ldi	r29, 0x01	; 1
    751e:	15 e0       	ldi	r17, 0x05	; 5
    7520:	69 91       	ld	r22, Y+
    7522:	70 e0       	ldi	r23, 0x00	; 0
    7524:	80 e0       	ldi	r24, 0x00	; 0
    7526:	90 e0       	ldi	r25, 0x00	; 0
    7528:	42 e0       	ldi	r20, 0x02	; 2
    752a:	be d3       	rcall	.+1916   	; 0x7ca8 <tracehex>
    752c:	18 30       	cpi	r17, 0x08	; 8
    752e:	11 f0       	breq	.+4      	; 0x7534 <netInit+0x98>
    7530:	8e e2       	ldi	r24, 0x2E	; 46
    7532:	ef d3       	rcall	.+2014   	; 0x7d12 <putch>
    7534:	1f 5f       	subi	r17, 0xFF	; 255
    7536:	19 30       	cpi	r17, 0x09	; 9
    7538:	99 f7       	brne	.-26     	; 0x7520 <netInit+0x84>
    753a:	83 e0       	ldi	r24, 0x03	; 3
    753c:	91 e7       	ldi	r25, 0x71	; 113
    753e:	60 ec       	ldi	r22, 0xC0	; 192
    7540:	70 e7       	ldi	r23, 0x70	; 112
    7542:	80 d3       	rcall	.+1792   	; 0x7c44 <tracePGMln>
    7544:	c1 e0       	ldi	r28, 0x01	; 1
    7546:	d1 e0       	ldi	r29, 0x01	; 1
    7548:	01 e0       	ldi	r16, 0x01	; 1
    754a:	69 91       	ld	r22, Y+
    754c:	70 e0       	ldi	r23, 0x00	; 0
    754e:	80 e0       	ldi	r24, 0x00	; 0
    7550:	90 e0       	ldi	r25, 0x00	; 0
    7552:	42 e0       	ldi	r20, 0x02	; 2
    7554:	a9 d3       	rcall	.+1874   	; 0x7ca8 <tracehex>
    7556:	04 30       	cpi	r16, 0x04	; 4
    7558:	11 f0       	breq	.+4      	; 0x755e <netInit+0xc2>
    755a:	8e e2       	ldi	r24, 0x2E	; 46
    755c:	da d3       	rcall	.+1972   	; 0x7d12 <putch>
    755e:	0f 5f       	subi	r16, 0xFF	; 255
    7560:	05 30       	cpi	r16, 0x05	; 5
    7562:	99 f7       	brne	.-26     	; 0x754a <netInit+0xae>
    7564:	83 e0       	ldi	r24, 0x03	; 3
    7566:	91 e7       	ldi	r25, 0x71	; 113
    7568:	65 eb       	ldi	r22, 0xB5	; 181
    756a:	70 e7       	ldi	r23, 0x70	; 112
    756c:	6b d3       	rcall	.+1750   	; 0x7c44 <tracePGMln>
    756e:	c9 e0       	ldi	r28, 0x09	; 9
    7570:	d1 e0       	ldi	r29, 0x01	; 1
    7572:	69 91       	ld	r22, Y+
    7574:	70 e0       	ldi	r23, 0x00	; 0
    7576:	80 e0       	ldi	r24, 0x00	; 0
    7578:	90 e0       	ldi	r25, 0x00	; 0
    757a:	42 e0       	ldi	r20, 0x02	; 2
    757c:	95 d3       	rcall	.+1834   	; 0x7ca8 <tracehex>
    757e:	1e 30       	cpi	r17, 0x0E	; 14
    7580:	11 f0       	breq	.+4      	; 0x7586 <netInit+0xea>
    7582:	8e e2       	ldi	r24, 0x2E	; 46
    7584:	c6 d3       	rcall	.+1932   	; 0x7d12 <putch>
    7586:	1f 5f       	subi	r17, 0xFF	; 255
    7588:	1f 30       	cpi	r17, 0x0F	; 15
    758a:	99 f7       	brne	.-26     	; 0x7572 <netInit+0xd6>
    758c:	00 e0       	ldi	r16, 0x00	; 0
    758e:	11 e0       	ldi	r17, 0x01	; 1
    7590:	c0 e0       	ldi	r28, 0x00	; 0
    7592:	d0 e0       	ldi	r29, 0x00	; 0
    7594:	f8 01       	movw	r30, r16
    7596:	41 91       	ld	r20, Z+
    7598:	8f 01       	movw	r16, r30
    759a:	ce 01       	movw	r24, r28
    759c:	60 e0       	ldi	r22, 0x00	; 0
    759e:	12 df       	rcall	.-476    	; 0x73c4 <spiWriteReg>
    75a0:	21 96       	adiw	r28, 0x01	; 1
    75a2:	cc 31       	cpi	r28, 0x1C	; 28
    75a4:	d1 05       	cpc	r29, r1
    75a6:	b1 f7       	brne	.-20     	; 0x7594 <netInit+0xf8>
    75a8:	83 e0       	ldi	r24, 0x03	; 3
    75aa:	91 e7       	ldi	r25, 0x71	; 113
    75ac:	63 ea       	ldi	r22, 0xA3	; 163
    75ae:	70 e7       	ldi	r23, 0x70	; 112
    75b0:	49 d3       	rcall	.+1682   	; 0x7c44 <tracePGMln>
    75b2:	df 91       	pop	r29
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		spiWriteReg(i, 0, registerBuffer[i]);
    75b4:	cf 91       	pop	r28
    75b6:	1f 91       	pop	r17
    75b8:	0f 91       	pop	r16
    75ba:	08 95       	ret

000075bc <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
    75bc:	cf 93       	push	r28
    75be:	df 93       	push	r29
    75c0:	ec 01       	movw	r28, r24
	DBG_TFTP(
    75c2:	89 eb       	ldi	r24, 0xB9	; 185
    75c4:	92 e7       	ldi	r25, 0x72	; 114
    75c6:	64 e4       	ldi	r22, 0x44	; 68
    75c8:	71 e7       	ldi	r23, 0x71	; 113
    75ca:	3c d3       	rcall	.+1656   	; 0x7c44 <tracePGMln>
    75cc:	be 01       	movw	r22, r28
    75ce:	80 e0       	ldi	r24, 0x00	; 0
    75d0:	90 e0       	ldi	r25, 0x00	; 0
    75d2:	44 e0       	ldi	r20, 0x04	; 4
    75d4:	69 d3       	rcall	.+1746   	; 0x7ca8 <tracehex>
    75d6:	81 e0       	ldi	r24, 0x01	; 1
    75d8:	97 e0       	ldi	r25, 0x07	; 7
		tracePGMlnTftp(mDebugTftp_SOCK);
		tracenum(port);
	)


	spiWriteReg(REG_S3_CR, S3_W_CB, CR_CLOSE);
    75da:	6c e6       	ldi	r22, 0x6C	; 108
    75dc:	40 e1       	ldi	r20, 0x10	; 16
    75de:	f2 de       	rcall	.-540    	; 0x73c4 <spiWriteReg>
    75e0:	81 e0       	ldi	r24, 0x01	; 1
    75e2:	97 e0       	ldi	r25, 0x07	; 7
    75e4:	68 e6       	ldi	r22, 0x68	; 104
        while(spiReadReg(REG_S3_CR, S3_R_CB)) {
    75e6:	1d df       	rcall	.-454    	; 0x7422 <spiReadReg>
    75e8:	88 23       	and	r24, r24
    75ea:	d1 f7       	brne	.-12     	; 0x75e0 <sockInit+0x24>
    75ec:	82 e0       	ldi	r24, 0x02	; 2
    75ee:	97 e0       	ldi	r25, 0x07	; 7
    75f0:	6c e6       	ldi	r22, 0x6C	; 108
    75f2:	4f ef       	ldi	r20, 0xFF	; 255
        	//wait for command to complete	
        }  
        
	do {
                // Write interrupt
		spiWriteReg(REG_S3_IR, S3_W_CB, 0xFF);
    75f4:	e7 de       	rcall	.-562    	; 0x73c4 <spiWriteReg>
    75f6:	80 e0       	ldi	r24, 0x00	; 0
    75f8:	97 e0       	ldi	r25, 0x07	; 7
    75fa:	6c e6       	ldi	r22, 0x6C	; 108
    75fc:	42 e0       	ldi	r20, 0x02	; 2
    75fe:	e2 de       	rcall	.-572    	; 0x73c4 <spiWriteReg>
                // Write mode
                spiWriteReg(REG_S3_MR, S3_W_CB, MR_UDP);
    7600:	84 e0       	ldi	r24, 0x04	; 4
    7602:	97 e0       	ldi	r25, 0x07	; 7
    7604:	6c e6       	ldi	r22, 0x6C	; 108
    7606:	ae 01       	movw	r20, r28
    7608:	f6 de       	rcall	.-532    	; 0x73f6 <spiWriteWord>
    760a:	81 e0       	ldi	r24, 0x01	; 1
                // Write TFTP Port
		spiWriteWord(REG_S3_PORT0, S3_W_CB, port);
    760c:	97 e0       	ldi	r25, 0x07	; 7
    760e:	6c e6       	ldi	r22, 0x6C	; 108
    7610:	41 e0       	ldi	r20, 0x01	; 1
    7612:	d8 de       	rcall	.-592    	; 0x73c4 <spiWriteReg>
    7614:	81 e0       	ldi	r24, 0x01	; 1
    7616:	97 e0       	ldi	r25, 0x07	; 7
		// Open Socket
        	spiWriteReg(REG_S3_CR, S3_W_CB, CR_OPEN);
    7618:	68 e6       	ldi	r22, 0x68	; 104
    761a:	03 df       	rcall	.-506    	; 0x7422 <spiReadReg>
    761c:	88 23       	and	r24, r24
    761e:	d1 f7       	brne	.-12     	; 0x7614 <sockInit+0x58>
    7620:	83 e0       	ldi	r24, 0x03	; 3
    7622:	97 e0       	ldi	r25, 0x07	; 7
        	while(spiReadReg(REG_S3_CR, S3_R_CB)) {
    7624:	68 e6       	ldi	r22, 0x68	; 104
    7626:	fd de       	rcall	.-518    	; 0x7422 <spiReadReg>
    7628:	82 32       	cpi	r24, 0x22	; 34
    762a:	29 f0       	breq	.+10     	; 0x7636 <sockInit+0x7a>
    762c:	81 e0       	ldi	r24, 0x01	; 1
    762e:	97 e0       	ldi	r25, 0x07	; 7
    7630:	6c e6       	ldi	r22, 0x6C	; 108
        		//wait for command to complete	
 		} 
		// Read Status
		if(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP)
    7632:	40 e1       	ldi	r20, 0x10	; 16
    7634:	c7 de       	rcall	.-626    	; 0x73c4 <spiWriteReg>
    7636:	83 e0       	ldi	r24, 0x03	; 3
    7638:	97 e0       	ldi	r25, 0x07	; 7
    763a:	68 e6       	ldi	r22, 0x68	; 104
    763c:	f2 de       	rcall	.-540    	; 0x7422 <spiReadReg>
    763e:	82 32       	cpi	r24, 0x22	; 34
			// Close Socket if it wasn't initialized correctly
			spiWriteReg(REG_S3_CR, S3_W_CB, CR_CLOSE);
    7640:	a9 f6       	brne	.-86     	; 0x75ec <sockInit+0x30>
    7642:	df 91       	pop	r29
    7644:	cf 91       	pop	r28
    7646:	08 95       	ret

00007648 <processPacket>:
    7648:	af 92       	push	r10
    764a:	bf 92       	push	r11


		// If socket correctly opened continue
	} while(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP);
    764c:	cf 92       	push	r12
    764e:	df 92       	push	r13
    7650:	ef 92       	push	r14
    7652:	ff 92       	push	r15
    7654:	0f 93       	push	r16
    7656:	1f 93       	push	r17
    7658:	cf 93       	push	r28
}
    765a:	df 93       	push	r29
    765c:	cd b7       	in	r28, 0x3d	; 61
    765e:	de b7       	in	r29, 0x3e	; 62
#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
#endif
{
    7660:	cc 50       	subi	r28, 0x0C	; 12
    7662:	d2 40       	sbci	r29, 0x02	; 2
    7664:	de bf       	out	0x3e, r29	; 62
    7666:	cd bf       	out	0x3d, r28	; 61
    7668:	8c 01       	movw	r16, r24
    766a:	89 eb       	ldi	r24, 0xB9	; 185
    766c:	92 e7       	ldi	r25, 0x72	; 114
    766e:	6e e9       	ldi	r22, 0x9E	; 158
    7670:	72 e7       	ldi	r23, 0x72	; 114
    7672:	e8 d2       	rcall	.+1488   	; 0x7c44 <tracePGMln>
    7674:	b8 01       	movw	r22, r16
    7676:	80 e0       	ldi	r24, 0x00	; 0
    7678:	90 e0       	ldi	r25, 0x00	; 0
    767a:	44 e0       	ldi	r20, 0x04	; 4
    767c:	15 d3       	rcall	.+1578   	; 0x7ca8 <tracehex>
    767e:	28 e0       	ldi	r18, 0x08	; 8
    7680:	00 30       	cpi	r16, 0x00	; 0
	address_t writeAddr;
	// Transfer entire packet to RAM
	uint8_t* bufPtr = buffer;
	uint16_t count;

	DBG_TFTP(
    7682:	12 07       	cpc	r17, r18
    7684:	28 f0       	brcs	.+10     	; 0x7690 <processPacket+0x48>
    7686:	89 eb       	ldi	r24, 0xB9	; 185
    7688:	92 e7       	ldi	r25, 0x72	; 114
    768a:	65 e9       	ldi	r22, 0x95	; 149
    768c:	72 e7       	ldi	r23, 0x72	; 114
    768e:	da d2       	rcall	.+1460   	; 0x7c44 <tracePGMln>
    7690:	88 e2       	ldi	r24, 0x28	; 40
    7692:	97 e0       	ldi	r25, 0x07	; 7
    7694:	68 e6       	ldi	r22, 0x68	; 104
    7696:	df de       	rcall	.-578    	; 0x7456 <spiReadWord>
    7698:	ac 01       	movw	r20, r24
    769a:	00 97       	sbiw	r24, 0x00	; 0
    769c:	11 f4       	brne	.+4      	; 0x76a2 <processPacket+0x5a>
    769e:	40 e0       	ldi	r20, 0x00	; 0
    76a0:	58 e7       	ldi	r21, 0x78	; 120
    76a2:	1d e0       	ldi	r17, 0x0D	; 13
    76a4:	c1 2e       	mov	r12, r17
    76a6:	12 e0       	ldi	r17, 0x02	; 2
    76a8:	d1 2e       	mov	r13, r17
    76aa:	cc 0e       	add	r12, r28
    76ac:	dd 1e       	adc	r13, r29

		DBG_BTN(button();)
	)

	// Read data from chip to buffer
	readPointer = spiReadWord(REG_S3_RX_RD0, S3_R_CB);
    76ae:	7e 01       	movw	r14, r28
    76b0:	08 94       	sec
    76b2:	e1 1c       	adc	r14, r1
    76b4:	f1 1c       	adc	r15, r1
    76b6:	10 c0       	rjmp	.+32     	; 0x76d8 <processPacket+0x90>
    76b8:	8a 01       	movw	r16, r20

	if(readPointer == 0) readPointer = 0x0000;

#else

	if(readPointer == 0) readPointer += S3_RX_START;
    76ba:	0f 5f       	subi	r16, 0xFF	; 255
    76bc:	1f 4f       	sbci	r17, 0xFF	; 255
    76be:	ca 01       	movw	r24, r20
    76c0:	60 e0       	ldi	r22, 0x00	; 0
	} while(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP);
}


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
    76c2:	af de       	rcall	.-674    	; 0x7422 <spiReadReg>
    76c4:	f7 01       	movw	r30, r14
    76c6:	81 93       	st	Z+, r24
    76c8:	7f 01       	movw	r14, r30
    76ca:	f0 e8       	ldi	r31, 0x80	; 128
    76cc:	00 30       	cpi	r16, 0x00	; 0
    76ce:	1f 07       	cpc	r17, r31
    76d0:	11 f4       	brne	.+4      	; 0x76d6 <processPacket+0x8e>
    76d2:	00 e0       	ldi	r16, 0x00	; 0
    76d4:	18 e7       	ldi	r17, 0x78	; 120
    76d6:	a8 01       	movw	r20, r16
		*bufPtr++ = spiReadReg(readPointer++, S3_RXBUF_CB);

		if(readPointer == 0xFFFF) readPointer = 0x0000; //changed 0c0800 to 0xFFFF, fixes a 4th packet retransmit bug. upload speed changed from 500sec to 90sec for 100kb program
#else

		*bufPtr++ = spiReadReg(readPointer++, 0);
    76d8:	ec 14       	cp	r14, r12
    76da:	fd 04       	cpc	r15, r13
    76dc:	69 f7       	brne	.-38     	; 0x76b8 <processPacket+0x70>
    76de:	88 e2       	ldi	r24, 0x28	; 40
    76e0:	97 e0       	ldi	r25, 0x07	; 7
    76e2:	6c e6       	ldi	r22, 0x6C	; 108
    76e4:	88 de       	rcall	.-752    	; 0x73f6 <spiWriteWord>
    76e6:	81 e0       	ldi	r24, 0x01	; 1
    76e8:	97 e0       	ldi	r25, 0x07	; 7
    76ea:	6c e6       	ldi	r22, 0x6C	; 108

		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
    76ec:	40 e4       	ldi	r20, 0x40	; 64
    76ee:	6a de       	rcall	.-812    	; 0x73c4 <spiWriteReg>
    76f0:	81 e0       	ldi	r24, 0x01	; 1
    76f2:	97 e0       	ldi	r25, 0x07	; 7
    76f4:	68 e6       	ldi	r22, 0x68	; 104
    76f6:	95 de       	rcall	.-726    	; 0x7422 <spiReadReg>
	} while(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP);
}


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
    76f8:	88 23       	and	r24, r24

	if(readPointer == 0) readPointer += S3_RX_START;

#endif

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
    76fa:	d1 f7       	brne	.-12     	; 0x76f0 <processPacket+0xa8>
    76fc:	8e 01       	movw	r16, r28
    76fe:	0f 5f       	subi	r16, 0xFF	; 255

#endif

	}

	spiWriteWord(REG_S3_RX_RD0, S3_W_CB, readPointer);     // Write back new pointer
    7700:	1f 4f       	sbci	r17, 0xFF	; 255
    7702:	bc e0       	ldi	r27, 0x0C	; 12
    7704:	eb 2e       	mov	r14, r27
    7706:	b7 e0       	ldi	r27, 0x07	; 7
    7708:	fb 2e       	mov	r15, r27
	spiWriteReg(REG_S3_CR, S3_W_CB, CR_RECV);
    770a:	f8 01       	movw	r30, r16
    770c:	41 91       	ld	r20, Z+
    770e:	8f 01       	movw	r16, r30
    7710:	c7 01       	movw	r24, r14
    7712:	6c e6       	ldi	r22, 0x6C	; 108
    7714:	57 de       	rcall	.-850    	; 0x73c4 <spiWriteReg>

	while(spiReadReg(REG_S3_CR, S3_R_CB));
    7716:	08 94       	sec
    7718:	e1 1c       	adc	r14, r1
    771a:	f1 1c       	adc	r15, r1
    771c:	f2 e1       	ldi	r31, 0x12	; 18
    771e:	ef 16       	cp	r14, r31
    7720:	f7 e0       	ldi	r31, 0x07	; 7
    7722:	ff 06       	cpc	r15, r31
    7724:	91 f7       	brne	.-28     	; 0x770a <processPacket+0xc2>
    7726:	89 eb       	ldi	r24, 0xB9	; 185
    7728:	92 e7       	ldi	r25, 0x72	; 114
    772a:	6f e7       	ldi	r22, 0x7F	; 127
    772c:	72 e7       	ldi	r23, 0x72	; 114
    772e:	8a d2       	rcall	.+1300   	; 0x7c44 <tracePGMln>
    7730:	af 80       	ldd	r10, Y+7	; 0x07
	)

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) spiWriteReg(REG_S3_DIPR0 + i, S3_W_CB, buffer[i]);
    7732:	bb 24       	eor	r11, r11
    7734:	ba 2c       	mov	r11, r10
    7736:	aa 24       	eor	r10, r10
    7738:	88 85       	ldd	r24, Y+8	; 0x08
    773a:	a8 0e       	add	r10, r24
    773c:	b1 1c       	adc	r11, r1
    773e:	09 85       	ldd	r16, Y+9	; 0x09
    7740:	10 e0       	ldi	r17, 0x00	; 0
    7742:	10 2f       	mov	r17, r16
    7744:	00 27       	eor	r16, r16
    7746:	8a 85       	ldd	r24, Y+10	; 0x0a
    7748:	08 0f       	add	r16, r24
    774a:	11 1d       	adc	r17, r1
    774c:	eb 84       	ldd	r14, Y+11	; 0x0b
    774e:	ff 24       	eor	r15, r15

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RADDR);)
    7750:	fe 2c       	mov	r15, r14
    7752:	ee 24       	eor	r14, r14
    7754:	8c 85       	ldd	r24, Y+12	; 0x0c
    7756:	e8 0e       	add	r14, r24
    7758:	f1 1c       	adc	r15, r1
    775a:	89 eb       	ldi	r24, 0xB9	; 185

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
    775c:	92 e7       	ldi	r25, 0x72	; 114
    775e:	60 e7       	ldi	r22, 0x70	; 112
    7760:	72 e7       	ldi	r23, 0x72	; 114
    7762:	70 d2       	rcall	.+1248   	; 0x7c44 <tracePGMln>
    7764:	b7 01       	movw	r22, r14
    7766:	80 e0       	ldi	r24, 0x00	; 0
    7768:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t tftpOpcode  = (buffer[8] << 8) + buffer[9];
    776a:	44 e0       	ldi	r20, 0x04	; 4
    776c:	9d d2       	rcall	.+1338   	; 0x7ca8 <tracehex>
    776e:	82 e6       	ldi	r24, 0x62	; 98
    7770:	92 e7       	ldi	r25, 0x72	; 114
    7772:	52 d2       	rcall	.+1188   	; 0x7c18 <tracePGM>
    7774:	b8 01       	movw	r22, r16
    7776:	80 e0       	ldi	r24, 0x00	; 0
	uint16_t tftpBlock   = (buffer[10] << 8) + buffer[11];
    7778:	90 e0       	ldi	r25, 0x00	; 0
    777a:	44 e0       	ldi	r20, 0x04	; 4
    777c:	95 d2       	rcall	.+1322   	; 0x7ca8 <tracehex>
    777e:	80 e5       	ldi	r24, 0x50	; 80
    7780:	92 e7       	ldi	r25, 0x72	; 114
    7782:	4a d2       	rcall	.+1172   	; 0x7c18 <tracePGM>
    7784:	ac ef       	ldi	r26, 0xFC	; 252

	DBG_TFTP(
    7786:	ca 2e       	mov	r12, r26
    7788:	af ef       	ldi	r26, 0xFF	; 255
    778a:	da 2e       	mov	r13, r26
    778c:	ca 0c       	add	r12, r10
    778e:	db 1c       	adc	r13, r11
    7790:	b6 01       	movw	r22, r12
    7792:	80 e0       	ldi	r24, 0x00	; 0
    7794:	90 e0       	ldi	r25, 0x00	; 0
    7796:	44 e0       	ldi	r20, 0x04	; 4
    7798:	87 d2       	rcall	.+1294   	; 0x7ca8 <tracehex>
    779a:	03 30       	cpi	r16, 0x03	; 3
    779c:	11 05       	cpc	r17, r1
    779e:	89 f4       	brne	.+34     	; 0x77c2 <processPacket+0x17a>
    77a0:	29 e3       	ldi	r18, 0x39	; 57
    77a2:	e2 16       	cp	r14, r18
    77a4:	f1 04       	cpc	r15, r1
    77a6:	58 f4       	brcc	.+22     	; 0x77be <processPacket+0x176>
    77a8:	80 91 20 01 	lds	r24, 0x0120
    77ac:	90 91 21 01 	lds	r25, 0x0121
    77b0:	e8 16       	cp	r14, r24
    77b2:	f9 06       	cpc	r15, r25
    77b4:	20 f0       	brcs	.+8      	; 0x77be <processPacket+0x176>
    77b6:	01 96       	adiw	r24, 0x01	; 1
    77b8:	8e 15       	cp	r24, r14
    77ba:	9f 05       	cpc	r25, r15
    77bc:	10 f4       	brcc	.+4      	; 0x77c2 <processPacket+0x17a>
    77be:	00 e0       	ldi	r16, 0x00	; 0
    77c0:	10 e0       	ldi	r17, 0x00	; 0
    77c2:	85 e0       	ldi	r24, 0x05	; 5
    77c4:	a8 16       	cp	r10, r24
    77c6:	82 e0       	ldi	r24, 0x02	; 2
    77c8:	b8 06       	cpc	r11, r24
    77ca:	08 f0       	brcs	.+2      	; 0x77ce <processPacket+0x186>
    77cc:	e1 c0       	rjmp	.+450    	; 0x7990 <processPacket+0x348>
    77ce:	03 30       	cpi	r16, 0x03	; 3
    77d0:	11 05       	cpc	r17, r1
		tracenum(tftpOpcode);
		tracePGM(mDebugTftp_DLEN);
		tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
	)

	if((tftpOpcode == TFTP_OPCODE_DATA)
    77d2:	09 f4       	brne	.+2      	; 0x77d6 <processPacket+0x18e>
    77d4:	3f c0       	rjmp	.+126    	; 0x7854 <processPacket+0x20c>
    77d6:	04 30       	cpi	r16, 0x04	; 4
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
    77d8:	11 05       	cpc	r17, r1
    77da:	40 f4       	brcc	.+16     	; 0x77ec <processPacket+0x1a4>
    77dc:	01 30       	cpi	r16, 0x01	; 1
    77de:	11 05       	cpc	r17, r1
    77e0:	71 f0       	breq	.+28     	; 0x77fe <processPacket+0x1b6>
    77e2:	02 30       	cpi	r16, 0x02	; 2
    77e4:	11 05       	cpc	r17, r1
    77e6:	09 f0       	breq	.+2      	; 0x77ea <processPacket+0x1a2>
    77e8:	d5 c0       	rjmp	.+426    	; 0x7994 <processPacket+0x34c>
    77ea:	0e c0       	rjmp	.+28     	; 0x7808 <processPacket+0x1c0>
    77ec:	04 30       	cpi	r16, 0x04	; 4
    77ee:	11 05       	cpc	r17, r1
    77f0:	09 f4       	brne	.+2      	; 0x77f4 <processPacket+0x1ac>
    77f2:	c2 c0       	rjmp	.+388    	; 0x7978 <processPacket+0x330>
    77f4:	05 30       	cpi	r16, 0x05	; 5
		tftpOpcode = TFTP_OPCODE_UKN;
    77f6:	11 05       	cpc	r17, r1
    77f8:	09 f0       	breq	.+2      	; 0x77fc <processPacket+0x1b4>

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
    77fa:	cc c0       	rjmp	.+408    	; 0x7994 <processPacket+0x34c>
    77fc:	c2 c0       	rjmp	.+388    	; 0x7982 <processPacket+0x33a>
    77fe:	89 eb       	ldi	r24, 0xB9	; 185
    7800:	92 e7       	ldi	r25, 0x72	; 114
    7802:	63 e4       	ldi	r22, 0x43	; 67
    7804:	72 e7       	ldi	r23, 0x72	; 114

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
    7806:	c1 c0       	rjmp	.+386    	; 0x798a <processPacket+0x342>
    7808:	ca d2       	rcall	.+1428   	; 0x7d9e <resetTick>
    780a:	89 eb       	ldi	r24, 0xB9	; 185
    780c:	92 e7       	ldi	r25, 0x72	; 114
    780e:	65 e3       	ldi	r22, 0x35	; 53
    7810:	72 e7       	ldi	r23, 0x72	; 114
    7812:	18 d2       	rcall	.+1072   	; 0x7c44 <tracePGMln>
    7814:	82 e0       	ldi	r24, 0x02	; 2
    7816:	90 e0       	ldi	r25, 0x00	; 0
    7818:	6f ef       	ldi	r22, 0xFF	; 255
    781a:	eb d3       	rcall	.+2006   	; 0x7ff2 <__eewr_byte_m328p>
    781c:	80 91 2b 01 	lds	r24, 0x012B
    7820:	90 91 2c 01 	lds	r25, 0x012C
    7824:	cb de       	rcall	.-618    	; 0x75bc <sockInit>
    7826:	89 eb       	ldi	r24, 0xB9	; 185
    7828:	92 e7       	ldi	r25, 0x72	; 114
    782a:	69 e1       	ldi	r22, 0x19	; 25
    782c:	72 e7       	ldi	r23, 0x72	; 114
    782e:	0a d2       	rcall	.+1044   	; 0x7c44 <tracePGMln>
    7830:	60 91 2b 01 	lds	r22, 0x012B
    7834:	70 91 2c 01 	lds	r23, 0x012C

		case TFTP_OPCODE_RRQ: // Read request
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
    7838:	80 e0       	ldi	r24, 0x00	; 0
    783a:	90 e0       	ldi	r25, 0x00	; 0
    783c:	44 e0       	ldi	r20, 0x04	; 4
    783e:	34 d2       	rcall	.+1128   	; 0x7ca8 <tracehex>
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
    7840:	10 92 21 01 	sts	0x0121, r1

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPWRQ);)
    7844:	10 92 20 01 	sts	0x0120, r1
    7848:	10 92 23 01 	sts	0x0123, r1
    784c:	10 92 22 01 	sts	0x0122, r1

			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
    7850:	02 e0       	ldi	r16, 0x02	; 2
    7852:	b2 c0       	rjmp	.+356    	; 0x79b8 <processPacket+0x370>
    7854:	a4 d2       	rcall	.+1352   	; 0x7d9e <resetTick>
    7856:	89 eb       	ldi	r24, 0xB9	; 185
    7858:	92 e7       	ldi	r25, 0x72	; 114

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    785a:	6a e2       	ldi	r22, 0x2A	; 42
    785c:	72 e7       	ldi	r23, 0x72	; 114
    785e:	f2 d1       	rcall	.+996    	; 0x7c44 <tracePGMln>
    7860:	f0 92 23 01 	sts	0x0123, r15
    7864:	e0 92 22 01 	sts	0x0122, r14
#endif

			DBG_TFTP(
    7868:	08 94       	sec
    786a:	e1 08       	sbc	r14, r1
    786c:	f1 08       	sbc	r15, r1
    786e:	fe 2c       	mov	r15, r14
    7870:	ee 24       	eor	r14, r14
    7872:	ff 0c       	add	r15, r15
    7874:	c7 01       	movw	r24, r14
    7876:	8c 0d       	add	r24, r12
    7878:	9d 1d       	adc	r25, r13
    787a:	e0 e7       	ldi	r30, 0x70	; 112
    787c:	81 30       	cpi	r24, 0x01	; 1
    787e:	9e 07       	cpc	r25, r30
    7880:	38 f0       	brcs	.+14     	; 0x7890 <processPacket+0x248>
    7882:	89 eb       	ldi	r24, 0xB9	; 185
#else
				tracenum(tftpTransferPort);
#endif
			)

			lastPacket = highPacket = 0;
    7884:	92 e7       	ldi	r25, 0x72	; 114
    7886:	6b e0       	ldi	r22, 0x0B	; 11
    7888:	72 e7       	ldi	r23, 0x72	; 114
    788a:	dc d1       	rcall	.+952    	; 0x7c44 <tracePGMln>
    788c:	03 e0       	ldi	r16, 0x03	; 3
    788e:	94 c0       	rjmp	.+296    	; 0x79b8 <processPacket+0x370>
    7890:	89 eb       	ldi	r24, 0xB9	; 185
    7892:	92 e7       	ldi	r25, 0x72	; 114
			returnCode = ACK; // Send back acknowledge for packet 0
    7894:	60 ef       	ldi	r22, 0xF0	; 240
			break;
    7896:	71 e7       	ldi	r23, 0x71	; 113

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
    7898:	d5 d1       	rcall	.+938    	; 0x7c44 <tracePGMln>
    789a:	b7 01       	movw	r22, r14

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPDATA);)
    789c:	80 e0       	ldi	r24, 0x00	; 0
    789e:	90 e0       	ldi	r25, 0x00	; 0
    78a0:	46 e0       	ldi	r20, 0x06	; 6
    78a2:	02 d2       	rcall	.+1028   	; 0x7ca8 <tracehex>
    78a4:	f0 e0       	ldi	r31, 0x00	; 0
    78a6:	cf 16       	cp	r12, r31

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
			lastPacket = tftpBlock;
    78a8:	f2 e0       	ldi	r31, 0x02	; 2
    78aa:	df 06       	cpc	r13, r31
    78ac:	10 f4       	brcc	.+4      	; 0x78b2 <processPacket+0x26a>
    78ae:	04 e0       	ldi	r16, 0x04	; 4
#if defined(RAMPZ)
			writeAddr = (((address_t)((tftpBlock - 1)/0x80) << 16) | ((address_t)((tftpBlock - 1)%0x80) << 9));
#else
			writeAddr = (address_t)((address_t)(tftpBlock - 1) << 9); // Flash write address for this block
    78b0:	05 c0       	rjmp	.+10     	; 0x78bc <processPacket+0x274>
    78b2:	02 e0       	ldi	r16, 0x02	; 2
    78b4:	03 c0       	rjmp	.+6      	; 0x78bc <processPacket+0x274>
    78b6:	08 94       	sec
    78b8:	c1 1c       	adc	r12, r1
    78ba:	d1 1c       	adc	r13, r1
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
    78bc:	c6 01       	movw	r24, r12
    78be:	8f 77       	andi	r24, 0x7F	; 127
    78c0:	90 70       	andi	r25, 0x00	; 0
    78c2:	00 97       	sbiw	r24, 0x00	; 0
    78c4:	c1 f7       	brne	.-16     	; 0x78b6 <processPacket+0x26e>
    78c6:	89 eb       	ldi	r24, 0xB9	; 185
    78c8:	92 e7       	ldi	r25, 0x72	; 114
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.

				DBG_TFTP(tracePGMlnTftp(mDebugTftp_FULL);)
    78ca:	65 ed       	ldi	r22, 0xD5	; 213
    78cc:	71 e7       	ldi	r23, 0x71	; 113
    78ce:	ba d1       	rcall	.+884    	; 0x7c44 <tracePGMln>
    78d0:	b6 01       	movw	r22, r12
    78d2:	80 e0       	ldi	r24, 0x00	; 0
    78d4:	90 e0       	ldi	r25, 0x00	; 0

				returnCode = ERROR_FULL;
    78d6:	44 e0       	ldi	r20, 0x04	; 4
    78d8:	e7 d1       	rcall	.+974    	; 0x7ca8 <tracehex>
			} else {

				DBG_TFTP(
    78da:	e1 14       	cp	r14, r1
    78dc:	f1 04       	cpc	r15, r1
    78de:	31 f4       	brne	.+12     	; 0x78ec <processPacket+0x2a4>
    78e0:	ce 01       	movw	r24, r28
    78e2:	0d 96       	adiw	r24, 0x0d	; 13
    78e4:	87 d1       	rcall	.+782    	; 0x7bf4 <validImage>
    78e6:	88 23       	and	r24, r24
    78e8:	09 f4       	brne	.+2      	; 0x78ec <processPacket+0x2a4>
    78ea:	65 c0       	rjmp	.+202    	; 0x79b6 <processPacket+0x36e>
    78ec:	de 01       	movw	r26, r28
    78ee:	1e 96       	adiw	r26, 0x0e	; 14
    78f0:	40 e0       	ldi	r20, 0x00	; 0
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
    78f2:	50 e0       	ldi	r21, 0x00	; 0
    78f4:	61 e0       	ldi	r22, 0x01	; 1
    78f6:	73 e0       	ldi	r23, 0x03	; 3
    78f8:	15 e0       	ldi	r17, 0x05	; 5
    78fa:	31 e1       	ldi	r19, 0x11	; 17
    78fc:	a3 2e       	mov	r10, r19
    78fe:	2d c0       	rjmp	.+90     	; 0x795a <processPacket+0x312>
				else returnCode = ACK;
    7900:	8c 91       	ld	r24, X
    7902:	90 e0       	ldi	r25, 0x00	; 0

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
    7904:	38 2f       	mov	r19, r24
    7906:	22 27       	eor	r18, r18
    7908:	fd 01       	movw	r30, r26
    790a:	31 97       	sbiw	r30, 0x01	; 1
    790c:	80 81       	ld	r24, Z
    790e:	90 e0       	ldi	r25, 0x00	; 0
    7910:	28 2b       	or	r18, r24
    7912:	39 2b       	or	r19, r25

				DBG_TFTP(
    7914:	f7 01       	movw	r30, r14
    7916:	09 01       	movw	r0, r18
    7918:	60 93 57 00 	sts	0x0057, r22
    791c:	e8 95       	spm
    791e:	11 24       	eor	r1, r1
    7920:	4e 5f       	subi	r20, 0xFE	; 254
    7922:	5f 4f       	sbci	r21, 0xFF	; 255
    7924:	ca 01       	movw	r24, r20
    7926:	8f 77       	andi	r24, 0x7F	; 127
    7928:	90 70       	andi	r25, 0x00	; 0
    792a:	00 97       	sbiw	r24, 0x00	; 0
					tracePGMlnTftp(mDebugTftp_PLEN);
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
    792c:	89 f4       	brne	.+34     	; 0x7950 <processPacket+0x308>
    792e:	ee 57       	subi	r30, 0x7E	; 126
    7930:	f0 40       	sbci	r31, 0x00	; 0
					// First sector - validate
					if(!validImage(pageBase)) {
    7932:	70 93 57 00 	sts	0x0057, r23
    7936:	e8 95       	spm
    7938:	07 b6       	in	r0, 0x37	; 55
    793a:	00 fc       	sbrc	r0, 0
    793c:	fd cf       	rjmp	.-6      	; 0x7938 <processPacket+0x2f0>
    793e:	10 93 57 00 	sts	0x0057, r17
    7942:	e8 95       	spm
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
    7944:	07 b6       	in	r0, 0x37	; 55
    7946:	00 fc       	sbrc	r0, 0
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
    7948:	fd cf       	rjmp	.-6      	; 0x7944 <processPacket+0x2fc>
					)

					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    794a:	a0 92 57 00 	sts	0x0057, r10
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    794e:	e8 95       	spm
    7950:	12 96       	adiw	r26, 0x02	; 2
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
    7952:	82 e0       	ldi	r24, 0x02	; 2
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
    7954:	90 e0       	ldi	r25, 0x00	; 0
    7956:	e8 0e       	add	r14, r24
    7958:	f9 1e       	adc	r15, r25
    795a:	4c 15       	cp	r20, r12
	} while(spiReadReg(REG_S3_SR, S3_R_CB) != SOCK_UDP);
}


#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
    795c:	5d 05       	cpc	r21, r13
    795e:	80 f2       	brcs	.-96     	; 0x7900 <processPacket+0x2b8>
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
					writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
    7960:	04 30       	cpi	r16, 0x04	; 4
    7962:	51 f5       	brne	.+84     	; 0x79b8 <processPacket+0x370>
    7964:	89 eb       	ldi	r24, 0xB9	; 185
    7966:	92 e7       	ldi	r25, 0x72	; 114
					boot_page_fill(writeAddr + offset, writeValue);
    7968:	63 ec       	ldi	r22, 0xC3	; 195
    796a:	71 e7       	ldi	r23, 0x71	; 113
    796c:	6b d1       	rcall	.+726    	; 0x7c44 <tracePGMln>
    796e:	82 e0       	ldi	r24, 0x02	; 2
    7970:	90 e0       	ldi	r25, 0x00	; 0
    7972:	6e ee       	ldi	r22, 0xEE	; 238
							tracePGM(mDebugTftp_OFFSET);
							tracenum(writeAddr + offset);
						}
					)

					offset += 2;
    7974:	3e d3       	rcall	.+1660   	; 0x7ff2 <__eewr_byte_m328p>
    7976:	20 c0       	rjmp	.+64     	; 0x79b8 <processPacket+0x370>

					if(offset % SPM_PAGESIZE == 0) {
    7978:	89 eb       	ldi	r24, 0xB9	; 185
    797a:	92 e7       	ldi	r25, 0x72	; 114
    797c:	67 eb       	ldi	r22, 0xB7	; 183
    797e:	71 e7       	ldi	r23, 0x71	; 113
    7980:	04 c0       	rjmp	.+8      	; 0x798a <processPacket+0x342>
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    7982:	89 eb       	ldi	r24, 0xB9	; 185
    7984:	92 e7       	ldi	r25, 0x72	; 114
    7986:	61 eb       	ldi	r22, 0xB1	; 177
    7988:	71 e7       	ldi	r23, 0x71	; 113
    798a:	5c d1       	rcall	.+696    	; 0x7c44 <tracePGMln>
						boot_spm_busy_wait();
    798c:	00 e0       	ldi	r16, 0x00	; 0
    798e:	14 c0       	rjmp	.+40     	; 0x79b8 <processPacket+0x370>
    7990:	00 e0       	ldi	r16, 0x00	; 0
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    7992:	10 e0       	ldi	r17, 0x00	; 0
    7994:	89 eb       	ldi	r24, 0xB9	; 185
    7996:	92 e7       	ldi	r25, 0x72	; 114
						boot_spm_busy_wait();
    7998:	61 ea       	ldi	r22, 0xA1	; 161
    799a:	71 e7       	ldi	r23, 0x71	; 113
    799c:	53 d1       	rcall	.+678    	; 0x7c44 <tracePGMln>
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    799e:	b8 01       	movw	r22, r16
    79a0:	80 e0       	ldi	r24, 0x00	; 0
    79a2:	90 e0       	ldi	r25, 0x00	; 0
    79a4:	44 e0       	ldi	r20, 0x04	; 4
    79a6:	80 d1       	rcall	.+768    	; 0x7ca8 <tracehex>
    79a8:	80 91 2b 01 	lds	r24, 0x012B
    79ac:	90 91 2c 01 	lds	r25, 0x012C
					}
				}

				// Flash packets
				uint16_t writeValue;
				for(offset = 0; offset < packetLength;) {
    79b0:	05 de       	rcall	.-1014   	; 0x75bc <sockInit>
    79b2:	01 e0       	ldi	r16, 0x01	; 1
						boot_rww_enable();
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
    79b4:	01 c0       	rjmp	.+2      	; 0x79b8 <processPacket+0x370>
    79b6:	05 e0       	ldi	r16, 0x05	; 5
					// Flash is complete
					// Hand over to application

					DBG_TFTP(tracePGMlnTftp(mDebugTftp_DONE);)
    79b8:	80 2f       	mov	r24, r16
    79ba:	c4 5f       	subi	r28, 0xF4	; 244
    79bc:	dd 4f       	sbci	r29, 0xFD	; 253
    79be:	de bf       	out	0x3e, r29	; 62
    79c0:	cd bf       	out	0x3d, r28	; 61
    79c2:	df 91       	pop	r29

					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    79c4:	cf 91       	pop	r28
    79c6:	1f 91       	pop	r17
    79c8:	0f 91       	pop	r16
    79ca:	ff 90       	pop	r15
    79cc:	ef 90       	pop	r14
    79ce:	df 90       	pop	r13
			break;

		// Acknowledgment
		case TFTP_OPCODE_ACK:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPACK);)
    79d0:	cf 90       	pop	r12
    79d2:	bf 90       	pop	r11
    79d4:	af 90       	pop	r10
    79d6:	08 95       	ret

000079d8 <tftpInit>:
    79d8:	cf 93       	push	r28
			break;

		// Error signal
		case TFTP_OPCODE_ERROR:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPERR);)
    79da:	85 e4       	ldi	r24, 0x45	; 69
    79dc:	90 e0       	ldi	r25, 0x00	; 0
    79de:	ee dd       	rcall	.-1060   	; 0x75bc <sockInit>
    79e0:	87 e1       	ldi	r24, 0x17	; 23
    79e2:	90 e0       	ldi	r25, 0x00	; 0
    79e4:	fe d2       	rcall	.+1532   	; 0x7fe2 <__eerd_byte_m328p>
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
    79e6:	8b 3b       	cpi	r24, 0xBB	; 187
		case TFTP_OPCODE_ERROR:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPERR);)

			/* FIXME: Resetting might be needed here too */
			break;
    79e8:	91 f4       	brne	.+36     	; 0x7a0e <tftpInit+0x36>
	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;
    79ea:	89 e1       	ldi	r24, 0x19	; 25
    79ec:	90 e0       	ldi	r25, 0x00	; 0

			/* FIXME: Resetting might be needed here too */
			break;

		default:
			DBG_TFTP(
    79ee:	f9 d2       	rcall	.+1522   	; 0x7fe2 <__eerd_byte_m328p>
    79f0:	c8 2f       	mov	r28, r24
    79f2:	88 e1       	ldi	r24, 0x18	; 24
    79f4:	90 e0       	ldi	r25, 0x00	; 0
    79f6:	f5 d2       	rcall	.+1514   	; 0x7fe2 <__eerd_byte_m328p>
    79f8:	2c 2f       	mov	r18, r28
    79fa:	30 e0       	ldi	r19, 0x00	; 0
    79fc:	32 2f       	mov	r19, r18
    79fe:	22 27       	eor	r18, r18
    7a00:	28 0f       	add	r18, r24
    7a02:	31 1d       	adc	r19, r1
    7a04:	30 93 2c 01 	sts	0x012C, r19
			)

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    7a08:	20 93 2b 01 	sts	0x012B, r18
    7a0c:	06 c0       	rjmp	.+12     	; 0x7a1a <tftpInit+0x42>
    7a0e:	89 e7       	ldi	r24, 0x79	; 121
    7a10:	97 eb       	ldi	r25, 0xB7	; 183
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
    7a12:	90 93 2c 01 	sts	0x012C, r25

#if defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
						/* FIXME: Validity checks. Small programms (under 512 bytes?) don't
						 * have the the JMP sections and that is why app.bin was failing.
						 * When flashing big binaries is fixed, uncomment the break below.*/
						returnCode = INVALID_IMAGE;
    7a16:	80 93 2b 01 	sts	0x012B, r24
			break;

	}

	return(returnCode);
}
    7a1a:	89 eb       	ldi	r24, 0xB9	; 185
    7a1c:	92 e7       	ldi	r25, 0x72	; 114
    7a1e:	65 e6       	ldi	r22, 0x65	; 101
    7a20:	71 e7       	ldi	r23, 0x71	; 113
    7a22:	10 d1       	rcall	.+544    	; 0x7c44 <tracePGMln>
    7a24:	89 eb       	ldi	r24, 0xB9	; 185
    7a26:	92 e7       	ldi	r25, 0x72	; 114
    7a28:	69 e5       	ldi	r22, 0x59	; 89
    7a2a:	71 e7       	ldi	r23, 0x71	; 113
    7a2c:	0b d1       	rcall	.+534    	; 0x7c44 <tracePGMln>
    7a2e:	60 91 2b 01 	lds	r22, 0x012B
    7a32:	70 91 2c 01 	lds	r23, 0x012C
    7a36:	80 e0       	ldi	r24, 0x00	; 0

/**
 * Initializes the network controller
 */
void tftpInit(void)
{
    7a38:	90 e0       	ldi	r25, 0x00	; 0
	// Open socket
	sockInit(TFTP_PORT);
    7a3a:	44 e0       	ldi	r20, 0x04	; 4
    7a3c:	35 d1       	rcall	.+618    	; 0x7ca8 <tracehex>
    7a3e:	cf 91       	pop	r28
    7a40:	08 95       	ret

00007a42 <tftpPoll>:

#if defined(RANDOM_TFTP_DATA_PORT)
#else
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
    7a42:	af 92       	push	r10
    7a44:	bf 92       	push	r11
    7a46:	cf 92       	push	r12
    7a48:	df 92       	push	r13
    7a4a:	ff 92       	push	r15
    7a4c:	0f 93       	push	r16
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
    7a4e:	1f 93       	push	r17
    7a50:	cf 93       	push	r28
    7a52:	df 93       	push	r29
    7a54:	cd b7       	in	r28, 0x3d	; 61
    7a56:	de b7       	in	r29, 0x3e	; 62
    7a58:	c5 56       	subi	r28, 0x65	; 101
    7a5a:	d0 40       	sbci	r29, 0x00	; 0
    7a5c:	de bf       	out	0x3e, r29	; 62
    7a5e:	cd bf       	out	0x3d, r28	; 61
    7a60:	86 e2       	ldi	r24, 0x26	; 38
    7a62:	97 e0       	ldi	r25, 0x07	; 7
    7a64:	68 e6       	ldi	r22, 0x68	; 104
    7a66:	f7 dc       	rcall	.-1554   	; 0x7456 <spiReadWord>
    7a68:	00 97       	sbiw	r24, 0x00	; 0
    7a6a:	09 f4       	brne	.+2      	; 0x7a6e <tftpPoll+0x2c>
    7a6c:	b4 c0       	rjmp	.+360    	; 0x7bd6 <tftpPoll+0x194>
    7a6e:	81 e0       	ldi	r24, 0x01	; 1
    7a70:	80 93 2e 01 	sts	0x012E, r24
    7a74:	0e c0       	rjmp	.+28     	; 0x7a92 <tftpPoll+0x50>
	else
		tftpTransferPort = TFTP_DATA_PORT;
    7a76:	82 e0       	ldi	r24, 0x02	; 2
    7a78:	97 e0       	ldi	r25, 0x07	; 7
    7a7a:	6c e6       	ldi	r22, 0x6C	; 108
    7a7c:	44 e0       	ldi	r20, 0x04	; 4
    7a7e:	a2 dc       	rcall	.-1724   	; 0x73c4 <spiWriteReg>
    7a80:	8f ef       	ldi	r24, 0xFF	; 255
#endif

	DBG_TFTP(
    7a82:	97 e8       	ldi	r25, 0x87	; 135
    7a84:	a3 e1       	ldi	r26, 0x13	; 19
    7a86:	81 50       	subi	r24, 0x01	; 1
    7a88:	90 40       	sbci	r25, 0x00	; 0
    7a8a:	a0 40       	sbci	r26, 0x00	; 0
    7a8c:	e1 f7       	brne	.-8      	; 0x7a86 <tftpPoll+0x44>
    7a8e:	00 c0       	rjmp	.+0      	; 0x7a90 <tftpPoll+0x4e>
    7a90:	00 00       	nop
    7a92:	82 e0       	ldi	r24, 0x02	; 2
    7a94:	97 e0       	ldi	r25, 0x07	; 7
    7a96:	68 e6       	ldi	r22, 0x68	; 104
    7a98:	c4 dc       	rcall	.-1656   	; 0x7422 <spiReadReg>
    7a9a:	82 fd       	sbrc	r24, 2
    7a9c:	ec cf       	rjmp	.-40     	; 0x7a76 <tftpPoll+0x34>
    7a9e:	86 e2       	ldi	r24, 0x26	; 38
    7aa0:	97 e0       	ldi	r25, 0x07	; 7
    7aa2:	68 e6       	ldi	r22, 0x68	; 104
    7aa4:	d8 dc       	rcall	.-1616   	; 0x7456 <spiReadWord>
    7aa6:	d0 dd       	rcall	.-1120   	; 0x7648 <processPacket>
    7aa8:	f8 2e       	mov	r15, r24
    7aaa:	84 e2       	ldi	r24, 0x24	; 36
#else
		tracePGMlnTftp(mDebugTftp_PORT);
		tracenum(tftpTransferPort);
#endif
	)
}
    7aac:	97 e0       	ldi	r25, 0x07	; 7
    7aae:	60 e0       	ldi	r22, 0x00	; 0

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
    7ab0:	d2 dc       	rcall	.-1628   	; 0x7456 <spiReadWord>
    7ab2:	c1 2c       	mov	r12, r1
    7ab4:	68 e5       	ldi	r22, 0x58	; 88
    7ab6:	d6 2e       	mov	r13, r22
    7ab8:	c8 0e       	add	r12, r24
    7aba:	d9 1e       	adc	r13, r25
    7abc:	92 e0       	ldi	r25, 0x02	; 2
    7abe:	f9 16       	cp	r15, r25
    7ac0:	59 f1       	breq	.+86     	; 0x7b18 <tftpPoll+0xd6>
    7ac2:	9f 15       	cp	r25, r15
    7ac4:	20 f0       	brcs	.+8      	; 0x7ace <tftpPoll+0x8c>
    7ac6:	a1 e0       	ldi	r26, 0x01	; 1
    7ac8:	fa 16       	cp	r15, r26
    7aca:	39 f4       	brne	.+14     	; 0x7ada <tftpPoll+0x98>
    7acc:	13 c0       	rjmp	.+38     	; 0x7af4 <tftpPoll+0xb2>
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = spiReadWord(REG_S3_RX_RSR0, S3_R_CB);
    7ace:	b3 e0       	ldi	r27, 0x03	; 3
    7ad0:	fb 16       	cp	r15, r27
    7ad2:	c9 f0       	breq	.+50     	; 0x7b06 <tftpPoll+0xc4>
    7ad4:	e4 e0       	ldi	r30, 0x04	; 4
    7ad6:	fe 16       	cp	r15, r30
// 			_delay_ms(400);
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
    7ad8:	99 f1       	breq	.+102    	; 0x7b40 <tftpPoll+0xfe>
    7ada:	ce 01       	movw	r24, r28
    7adc:	01 96       	adiw	r24, 0x01	; 1
		tftpFlashing = TRUE;
    7ade:	62 e2       	ldi	r22, 0x22	; 34
    7ae0:	71 e7       	ldi	r23, 0x71	; 113
    7ae2:	4a e0       	ldi	r20, 0x0A	; 10

		while((spiReadReg(REG_S3_IR, S3_R_CB) & IR_RECV)) {
    7ae4:	50 e0       	ldi	r21, 0x00	; 0
			spiWriteReg(REG_S3_IR, S3_W_CB, IR_RECV);
    7ae6:	74 d2       	rcall	.+1256   	; 0x7fd0 <memcpy_P>
    7ae8:	2a e0       	ldi	r18, 0x0A	; 10
    7aea:	5e 01       	movw	r10, r28
    7aec:	08 94       	sec
    7aee:	a1 1c       	adc	r10, r1
    7af0:	b1 1c       	adc	r11, r1
    7af2:	36 c0       	rjmp	.+108    	; 0x7b60 <tftpPoll+0x11e>
    7af4:	ce 01       	movw	r24, r28
    7af6:	01 96       	adiw	r24, 0x01	; 1
    7af8:	67 e3       	ldi	r22, 0x37	; 55
    7afa:	71 e7       	ldi	r23, 0x71	; 113
    7afc:	4c e0       	ldi	r20, 0x0C	; 12
    7afe:	50 e0       	ldi	r21, 0x00	; 0
    7b00:	67 d2       	rcall	.+1230   	; 0x7fd0 <memcpy_P>
    7b02:	2c e0       	ldi	r18, 0x0C	; 12
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;

		while((spiReadReg(REG_S3_IR, S3_R_CB) & IR_RECV)) {
    7b04:	f2 cf       	rjmp	.-28     	; 0x7aea <tftpPoll+0xa8>
    7b06:	ce 01       	movw	r24, r28
    7b08:	01 96       	adiw	r24, 0x01	; 1
    7b0a:	6d e2       	ldi	r22, 0x2D	; 45
    7b0c:	71 e7       	ldi	r23, 0x71	; 113
    7b0e:	49 e0       	ldi	r20, 0x09	; 9
    7b10:	50 e0       	ldi	r21, 0x00	; 0
			_delay_ms(TFTP_PACKET_DELAY);
		}

		// Process Packet and get TFTP response code
#if (DEBUG_TFTP > 0)
		packetSize = spiReadWord(REG_S3_RX_RSR0, S3_R_CB);
    7b12:	5e d2       	rcall	.+1212   	; 0x7fd0 <memcpy_P>
    7b14:	29 e0       	ldi	r18, 0x09	; 9
    7b16:	e9 cf       	rjmp	.-46     	; 0x7aea <tftpPoll+0xa8>
    7b18:	80 91 22 01 	lds	r24, 0x0122
		response = processPacket(packetSize);
    7b1c:	90 91 23 01 	lds	r25, 0x0123
    7b20:	20 91 20 01 	lds	r18, 0x0120
	uint16_t writePointer;
	
#if (W5500 > 0)
	writePointer = spiReadWord(REG_S3_TX_WR0, S3_R_CB);
#else
	writePointer = spiReadWord(REG_S3_TX_WR0, 0) + S3_TX_START;
    7b24:	30 91 21 01 	lds	r19, 0x0121
    7b28:	28 17       	cp	r18, r24
    7b2a:	39 07       	cpc	r19, r25
    7b2c:	20 f4       	brcc	.+8      	; 0x7b36 <tftpPoll+0xf4>
    7b2e:	90 93 21 01 	sts	0x0121, r25
    7b32:	80 93 20 01 	sts	0x0120, r24
#endif


	switch(response) {
    7b36:	89 eb       	ldi	r24, 0xB9	; 185
    7b38:	92 e7       	ldi	r25, 0x72	; 114
    7b3a:	68 e9       	ldi	r22, 0x98	; 152
    7b3c:	71 e7       	ldi	r23, 0x71	; 113
    7b3e:	04 c0       	rjmp	.+8      	; 0x7b48 <tftpPoll+0x106>
    7b40:	89 eb       	ldi	r24, 0xB9	; 185
    7b42:	92 e7       	ldi	r25, 0x72	; 114
    7b44:	69 e8       	ldi	r22, 0x89	; 137
    7b46:	71 e7       	ldi	r23, 0x71	; 113
    7b48:	7d d0       	rcall	.+250    	; 0x7c44 <tracePGMln>
    7b4a:	19 82       	std	Y+1, r1	; 0x01
    7b4c:	84 e0       	ldi	r24, 0x04	; 4
    7b4e:	8a 83       	std	Y+2, r24	; 0x02
    7b50:	80 91 22 01 	lds	r24, 0x0122
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_unknown_error_packet, packetLength);
#else
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
    7b54:	90 91 23 01 	lds	r25, 0x0123
    7b58:	9b 83       	std	Y+3, r25	; 0x03
    7b5a:	8c 83       	std	Y+4, r24	; 0x04
    7b5c:	24 e0       	ldi	r18, 0x04	; 4
    7b5e:	c5 cf       	rjmp	.-118    	; 0x7aea <tftpPoll+0xa8>
    7b60:	86 01       	movw	r16, r12
    7b62:	0f 5f       	subi	r16, 0xFF	; 255
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
    7b64:	1f 4f       	sbci	r17, 0xFF	; 255
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
    7b66:	d5 01       	movw	r26, r10
    7b68:	4d 91       	ld	r20, X+
    7b6a:	5d 01       	movw	r10, r26
    7b6c:	c6 01       	movw	r24, r12
    7b6e:	64 e7       	ldi	r22, 0x74	; 116
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_opcode_error_packet, packetLength);
#else
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
    7b70:	a6 96       	adiw	r28, 0x26	; 38
    7b72:	2f af       	sts	0x7f, r18
    7b74:	a6 97       	sbiw	r28, 0x26	; 38
    7b76:	26 dc       	rcall	.-1972   	; 0x73c4 <spiWriteReg>
    7b78:	a6 96       	adiw	r28, 0x26	; 38
    7b7a:	2f ad       	sts	0x6f, r18
    7b7c:	a6 97       	sbiw	r28, 0x26	; 38
    7b7e:	b0 e6       	ldi	r27, 0x60	; 96
#endif
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
    7b80:	00 30       	cpi	r16, 0x00	; 0
    7b82:	1b 07       	cpc	r17, r27
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_full_error_packet, packetLength);
#else
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
    7b84:	11 f0       	breq	.+4      	; 0x7b8a <tftpPoll+0x148>
    7b86:	68 01       	movw	r12, r16
    7b88:	03 c0       	rjmp	.+6      	; 0x7b90 <tftpPoll+0x14e>
    7b8a:	c1 2c       	mov	r12, r1
    7b8c:	58 e5       	ldi	r21, 0x58	; 88
    7b8e:	d5 2e       	mov	r13, r21
    7b90:	21 50       	subi	r18, 0x01	; 1
    7b92:	31 f7       	brne	.-52     	; 0x7b60 <tftpPoll+0x11e>
#endif
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
    7b94:	a6 01       	movw	r20, r12
    7b96:	40 50       	subi	r20, 0x00	; 0
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
#endif
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
    7b98:	58 45       	sbci	r21, 0x58	; 88
    7b9a:	84 e2       	ldi	r24, 0x24	; 36
    7b9c:	97 e0       	ldi	r25, 0x07	; 7
    7b9e:	6c e6       	ldi	r22, 0x6C	; 108
    7ba0:	2a dc       	rcall	.-1964   	; 0x73f6 <spiWriteWord>
    7ba2:	81 e0       	ldi	r24, 0x01	; 1
    7ba4:	97 e0       	ldi	r25, 0x07	; 7
    7ba6:	6c e6       	ldi	r22, 0x6C	; 108
    7ba8:	40 e2       	ldi	r20, 0x20	; 32
    7baa:	0c dc       	rcall	.-2024   	; 0x73c4 <spiWriteReg>
    7bac:	81 e0       	ldi	r24, 0x01	; 1
    7bae:	97 e0       	ldi	r25, 0x07	; 7
    7bb0:	68 e6       	ldi	r22, 0x68	; 104
    7bb2:	37 dc       	rcall	.-1938   	; 0x7422 <spiReadReg>
    7bb4:	88 23       	and	r24, r24

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_SACK);)
    7bb6:	d1 f7       	brne	.-12     	; 0x7bac <tftpPoll+0x16a>
    7bb8:	89 eb       	ldi	r24, 0xB9	; 185
    7bba:	92 e7       	ldi	r25, 0x72	; 114
    7bbc:	6b e7       	ldi	r22, 0x7B	; 123
    7bbe:	71 e7       	ldi	r23, 0x71	; 113
			/* no break */

		case FINAL_ACK:

			DBG_TFTP(
    7bc0:	41 d0       	rcall	.+130    	; 0x7c44 <tracePGMln>
    7bc2:	e4 e0       	ldi	r30, 0x04	; 4
    7bc4:	fe 16       	cp	r15, r30
    7bc6:	39 f4       	brne	.+14     	; 0x7bd6 <tftpPoll+0x194>
    7bc8:	81 e0       	ldi	r24, 0x01	; 1
    7bca:	97 e0       	ldi	r25, 0x07	; 7
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
    7bcc:	6c e6       	ldi	r22, 0x6C	; 108
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
    7bce:	40 e1       	ldi	r20, 0x10	; 16
    7bd0:	f9 db       	rcall	.-2062   	; 0x73c4 <spiWriteReg>
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
    7bd2:	80 e0       	ldi	r24, 0x00	; 0
    7bd4:	01 c0       	rjmp	.+2      	; 0x7bd8 <tftpPoll+0x196>
    7bd6:	81 e0       	ldi	r24, 0x01	; 1
    7bd8:	cb 59       	subi	r28, 0x9B	; 155
    7bda:	df 4f       	sbci	r29, 0xFF	; 255
			*txPtr = lastPacket & 0xff;
    7bdc:	de bf       	out	0x3e, r29	; 62
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
    7bde:	cd bf       	out	0x3d, r28	; 61
    7be0:	df 91       	pop	r29
	}

	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, S3_TXBUF_CB, *txPtr++);
    7be2:	cf 91       	pop	r28
    7be4:	1f 91       	pop	r17
    7be6:	0f 91       	pop	r16
    7be8:	ff 90       	pop	r15
    7bea:	df 90       	pop	r13
    7bec:	cf 90       	pop	r12
    7bee:	bf 90       	pop	r11
    7bf0:	af 90       	pop	r10
    7bf2:	08 95       	ret

00007bf4 <validImage>:
#include "serial.h"
#include "debug.h"
#include "debug_vald.h"

uint8_t validImage(uint8_t* base)
{
    7bf4:	fc 01       	movw	r30, r24
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
    7bf6:	80 e0       	ldi	r24, 0x00	; 0

		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
    7bf8:	90 81       	ld	r25, Z
    7bfa:	9c 30       	cpi	r25, 0x0C	; 12
    7bfc:	49 f4       	brne	.+18     	; 0x7c10 <validImage+0x1c>
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
		}
		
		if(base[i + 1] != 0x94) {
    7bfe:	91 81       	ldd	r25, Z+1	; 0x01
    7c00:	94 39       	cpi	r25, 0x94	; 148
    7c02:	41 f4       	brne	.+16     	; 0x7c14 <validImage+0x20>

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
    7c04:	8c 5f       	subi	r24, 0xFC	; 252
    7c06:	34 96       	adiw	r30, 0x04	; 4
    7c08:	84 33       	cpi	r24, 0x34	; 52
    7c0a:	b1 f7       	brne	.-20     	; 0x7bf8 <validImage+0x4>
		}
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
    7c0c:	81 e0       	ldi	r24, 0x01	; 1
    7c0e:	08 95       	ret
				tracenum(i);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i]);
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
    7c10:	80 e0       	ldi	r24, 0x00	; 0
    7c12:	08 95       	ret
				tracenum(i + 1);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i + 1]);
				tracePGM(mDebugVald_0x94);
			)
			return(0);
    7c14:	80 e0       	ldi	r24, 0x00	; 0
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
}
    7c16:	08 95       	ret

00007c18 <tracePGM>:
 */
const unsigned char mDebug_NEWLINE[]	PROGMEM =	"\r\n";
const unsigned char mDebug_HEXPREF[]	PROGMEM =	"0x";

void tracePGM(const void* p_msg)
{
    7c18:	0f 93       	push	r16
    7c1a:	1f 93       	push	r17
    7c1c:	cf 93       	push	r28
    7c1e:	df 93       	push	r29
    7c20:	ec 01       	movw	r28, r24
	uint8_t	c = 1, i = 0;
    7c22:	10 e0       	ldi	r17, 0x00	; 0
		 * 0x30000 is specific to atmega2560 and won't work on smaller or larger flashes.
		 * I should find a way to macro the calculation of this value
		 */
		c = pgm_read_byte_far(PROGMEM_OFFSET + (uint32_t)(uint16_t)p_msg + i);
#else
		c = pgm_read_byte_near((uint16_t)p_msg + i);
    7c24:	fe 01       	movw	r30, r28
    7c26:	e1 0f       	add	r30, r17
    7c28:	f1 1d       	adc	r31, r1
    7c2a:	04 91       	lpm	r16, Z
#endif
		if (c != 0) putch(c);
    7c2c:	00 23       	and	r16, r16
    7c2e:	11 f0       	breq	.+4      	; 0x7c34 <tracePGM+0x1c>
    7c30:	80 2f       	mov	r24, r16
    7c32:	6f d0       	rcall	.+222    	; 0x7d12 <putch>
    7c34:	1f 5f       	subi	r17, 0xFF	; 255
		i++;
    7c36:	00 23       	and	r16, r16

void tracePGM(const void* p_msg)
{
	uint8_t	c = 1, i = 0;

	while(c != 0){
    7c38:	a9 f7       	brne	.-22     	; 0x7c24 <tracePGM+0xc>
    7c3a:	df 91       	pop	r29
		c = pgm_read_byte_near((uint16_t)p_msg + i);
#endif
		if (c != 0) putch(c);
		i++;
	}
}
    7c3c:	cf 91       	pop	r28
    7c3e:	1f 91       	pop	r17
    7c40:	0f 91       	pop	r16
    7c42:	08 95       	ret

00007c44 <tracePGMln>:
    7c44:	0f 93       	push	r16


void tracePGMln(const void* p_prefix, const void* p_msg)
{
    7c46:	1f 93       	push	r17
    7c48:	cf 93       	push	r28
    7c4a:	df 93       	push	r29
    7c4c:	8c 01       	movw	r16, r24
    7c4e:	eb 01       	movw	r28, r22
    7c50:	83 ec       	ldi	r24, 0xC3	; 195
	tracePGM(mDebug_NEWLINE);
    7c52:	92 e7       	ldi	r25, 0x72	; 114
    7c54:	e1 df       	rcall	.-62     	; 0x7c18 <tracePGM>
    7c56:	c8 01       	movw	r24, r16
    7c58:	df df       	rcall	.-66     	; 0x7c18 <tracePGM>
	tracePGM(p_prefix);
    7c5a:	ce 01       	movw	r24, r28
    7c5c:	dd df       	rcall	.-70     	; 0x7c18 <tracePGM>
    7c5e:	df 91       	pop	r29
	tracePGM(p_msg);
    7c60:	cf 91       	pop	r28
    7c62:	1f 91       	pop	r17
    7c64:	0f 91       	pop	r16
}
    7c66:	08 95       	ret

00007c68 <trace>:
    7c68:	cf 93       	push	r28
    7c6a:	df 93       	push	r29
    7c6c:	ec 01       	movw	r28, r24
    7c6e:	88 81       	ld	r24, Y


void trace(char* msg)
{
    7c70:	88 23       	and	r24, r24
    7c72:	11 f4       	brne	.+4      	; 0x7c78 <trace+0x10>
    7c74:	04 c0       	rjmp	.+8      	; 0x7c7e <trace+0x16>
	uint8_t c;

	if(*msg != '\0') {
    7c76:	4d d0       	rcall	.+154    	; 0x7d12 <putch>
    7c78:	89 91       	ld	r24, Y+
    7c7a:	88 23       	and	r24, r24
    7c7c:	e1 f7       	brne	.-8      	; 0x7c76 <trace+0xe>
		while((c = *msg++)) putch(c);
    7c7e:	df 91       	pop	r29
    7c80:	cf 91       	pop	r28
    7c82:	08 95       	ret

00007c84 <traceln>:
    7c84:	0f 93       	push	r16
    7c86:	1f 93       	push	r17
	}
}
    7c88:	cf 93       	push	r28
    7c8a:	df 93       	push	r29
    7c8c:	8c 01       	movw	r16, r24


void traceln(const void* p_prefix, char* msg)
{
    7c8e:	eb 01       	movw	r28, r22
    7c90:	83 ec       	ldi	r24, 0xC3	; 195
    7c92:	92 e7       	ldi	r25, 0x72	; 114
    7c94:	c1 df       	rcall	.-126    	; 0x7c18 <tracePGM>
    7c96:	c8 01       	movw	r24, r16
    7c98:	bf df       	rcall	.-130    	; 0x7c18 <tracePGM>
	tracePGM(mDebug_NEWLINE);
    7c9a:	ce 01       	movw	r24, r28
    7c9c:	e5 df       	rcall	.-54     	; 0x7c68 <trace>
    7c9e:	df 91       	pop	r29
    7ca0:	cf 91       	pop	r28
	tracePGM(p_prefix);
    7ca2:	1f 91       	pop	r17
    7ca4:	0f 91       	pop	r16
    7ca6:	08 95       	ret

00007ca8 <tracehex>:
	trace(msg);
    7ca8:	cf 92       	push	r12
    7caa:	df 92       	push	r13
    7cac:	ef 92       	push	r14
}
    7cae:	ff 92       	push	r15
    7cb0:	cf 93       	push	r28
    7cb2:	6b 01       	movw	r12, r22
    7cb4:	7c 01       	movw	r14, r24
    7cb6:	c4 2f       	mov	r28, r20


void tracehex(uint32_t num, uint8_t len)
{
    7cb8:	80 ec       	ldi	r24, 0xC0	; 192
    7cba:	92 e7       	ldi	r25, 0x72	; 114
    7cbc:	ad df       	rcall	.-166    	; 0x7c18 <tracePGM>
    7cbe:	14 c0       	rjmp	.+40     	; 0x7ce8 <tracehex+0x40>
    7cc0:	8c 2f       	mov	r24, r28
    7cc2:	90 e0       	ldi	r25, 0x00	; 0
    7cc4:	01 97       	sbiw	r24, 0x01	; 1
    7cc6:	88 0f       	add	r24, r24
	tracePGM(mDebug_HEXPREF);
    7cc8:	99 1f       	adc	r25, r25
    7cca:	88 0f       	add	r24, r24
    7ccc:	99 1f       	adc	r25, r25
    7cce:	a7 01       	movw	r20, r14

	while(len > 0) {
    7cd0:	96 01       	movw	r18, r12
		puthex(num >> (4 * (len - 1)));
    7cd2:	04 c0       	rjmp	.+8      	; 0x7cdc <tracehex+0x34>
    7cd4:	56 95       	lsr	r21
    7cd6:	47 95       	ror	r20
    7cd8:	37 95       	ror	r19
    7cda:	27 95       	ror	r18
    7cdc:	8a 95       	dec	r24
    7cde:	d2 f7       	brpl	.-12     	; 0x7cd4 <tracehex+0x2c>
    7ce0:	da 01       	movw	r26, r20
    7ce2:	c9 01       	movw	r24, r18
    7ce4:	1d d0       	rcall	.+58     	; 0x7d20 <puthex>
    7ce6:	c1 50       	subi	r28, 0x01	; 1
    7ce8:	cc 23       	and	r28, r28
    7cea:	51 f7       	brne	.-44     	; 0x7cc0 <tracehex+0x18>
    7cec:	cf 91       	pop	r28
    7cee:	ff 90       	pop	r15
    7cf0:	ef 90       	pop	r14
    7cf2:	df 90       	pop	r13
    7cf4:	cf 90       	pop	r12
    7cf6:	08 95       	ret

00007cf8 <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
    7cf8:	82 e0       	ldi	r24, 0x02	; 2
    7cfa:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
    7cfe:	88 e1       	ldi	r24, 0x18	; 24
    7d00:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
    7d04:	86 e0       	ldi	r24, 0x06	; 6
    7d06:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
    7d0a:	80 e1       	ldi	r24, 0x10	; 16
    7d0c:	80 93 c4 00 	sts	0x00C4, r24

#if (DEBUG > 0)
	DDRD = 0x92;
#endif

}
    7d10:	08 95       	ret

00007d12 <putch>:


void putch(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
    7d12:	90 91 c0 00 	lds	r25, 0x00C0
    7d16:	95 ff       	sbrs	r25, 5
    7d18:	fc cf       	rjmp	.-8      	; 0x7d12 <putch>
	UART_DATA_REG = c;
    7d1a:	80 93 c6 00 	sts	0x00C6, r24
}
    7d1e:	08 95       	ret

00007d20 <puthex>:


void puthex(uint8_t c)
{
	c &= 0xf;
    7d20:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
    7d22:	8a 30       	cpi	r24, 0x0A	; 10
    7d24:	08 f0       	brcs	.+2      	; 0x7d28 <puthex+0x8>
    7d26:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putch(c + '0');
    7d28:	80 5d       	subi	r24, 0xD0	; 208
    7d2a:	f3 cf       	rjmp	.-26     	; 0x7d12 <putch>

00007d2c <getch>:
    7d2c:	80 91 c0 00 	lds	r24, 0x00C0

uint8_t getch(void)
{
	//uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
    7d30:	87 ff       	sbrs	r24, 7
    7d32:	fc cf       	rjmp	.-8      	; 0x7d2c <getch>
    7d34:	80 91 c0 00 	lds	r24, 0x00C0
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
    7d38:	84 fd       	sbrc	r24, 4
    7d3a:	01 c0       	rjmp	.+2      	; 0x7d3e <getch+0x12>
    7d3c:	a8 95       	wdr
    7d3e:	80 91 c6 00 	lds	r24, 0x00C6
	}

	//ch = UART_DATA_REG;
	//return ch;

	return(UART_DATA_REG);
    7d42:	08 95       	ret

00007d44 <serialPoll>:
    7d44:	80 91 c0 00 	lds	r24, 0x00C0
}


uint8_t serialPoll(void)
{
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
    7d48:	87 ff       	sbrs	r24, 7
    7d4a:	05 c0       	rjmp	.+10     	; 0x7d56 <serialPoll+0x12>
    7d4c:	28 d0       	rcall	.+80     	; 0x7d9e <resetTick>
    7d4e:	81 e0       	ldi	r24, 0x01	; 1
		resetTick();
    7d50:	80 93 2d 01 	sts	0x012D, r24
		serialFlashing = TRUE;
    7d54:	59 c0       	rjmp	.+178    	; 0x7e08 <processOptiboot>
    7d56:	81 e0       	ldi	r24, 0x01	; 1
    7d58:	08 95       	ret

00007d5a <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
    7d5a:	80 91 84 00 	lds	r24, 0x0084
    7d5e:	90 91 85 00 	lds	r25, 0x0085

	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
    7d62:	92 ff       	sbrs	r25, 2
    7d64:	05 c0       	rjmp	.+10     	; 0x7d70 <updateLed+0x16>
    7d66:	25 b1       	in	r18, 0x05	; 5
    7d68:	30 e2       	ldi	r19, 0x20	; 32
    7d6a:	23 27       	eor	r18, r19
    7d6c:	25 b9       	out	0x05, r18	; 5
    7d6e:	01 c0       	rjmp	.+2      	; 0x7d72 <updateLed+0x18>
	else LED_PORT &= ~_BV(LED); // Led pin low
    7d70:	2d 98       	cbi	0x05, 5	; 5

	if(next_timer_1 < last_timer_1) {
    7d72:	20 91 24 01 	lds	r18, 0x0124
    7d76:	30 91 25 01 	lds	r19, 0x0125
    7d7a:	82 17       	cp	r24, r18
    7d7c:	93 07       	cpc	r25, r19
    7d7e:	50 f4       	brcc	.+20     	; 0x7d94 <updateLed+0x3a>
		tick++;
    7d80:	20 91 26 01 	lds	r18, 0x0126
    7d84:	30 91 27 01 	lds	r19, 0x0127
    7d88:	2f 5f       	subi	r18, 0xFF	; 255
    7d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    7d8c:	30 93 27 01 	sts	0x0127, r19
    7d90:	20 93 26 01 	sts	0x0126, r18
		    tracePGMlnUtil(mDebugUtil_LAST);
		    tracenum(last_timer_1);
		)
	}

	last_timer_1 = next_timer_1;
    7d94:	90 93 25 01 	sts	0x0125, r25
    7d98:	80 93 24 01 	sts	0x0124, r24
}
    7d9c:	08 95       	ret

00007d9e <resetTick>:

void resetTick(void)
{
	TCNT1 = 0;
    7d9e:	10 92 85 00 	sts	0x0085, r1
    7da2:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
    7da6:	10 92 27 01 	sts	0x0127, r1
    7daa:	10 92 26 01 	sts	0x0126, r1
}
    7dae:	08 95       	ret

00007db0 <timedOut>:
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
#else
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
    7db0:	e0 e0       	ldi	r30, 0x00	; 0
    7db2:	f0 e0       	ldi	r31, 0x00	; 0
    7db4:	85 91       	lpm	r24, Z+
    7db6:	94 91       	lpm	r25, Z
    7db8:	2f ef       	ldi	r18, 0xFF	; 255
    7dba:	8f 3f       	cpi	r24, 0xFF	; 255
    7dbc:	92 07       	cpc	r25, r18
    7dbe:	51 f0       	breq	.+20     	; 0x7dd4 <timedOut+0x24>
    7dc0:	81 e0       	ldi	r24, 0x01	; 1
    7dc2:	20 91 26 01 	lds	r18, 0x0126
    7dc6:	30 91 27 01 	lds	r19, 0x0127
    7dca:	25 30       	cpi	r18, 0x05	; 5
    7dcc:	31 05       	cpc	r19, r1
    7dce:	18 f4       	brcc	.+6      	; 0x7dd6 <timedOut+0x26>
    7dd0:	80 e0       	ldi	r24, 0x00	; 0
    7dd2:	08 95       	ret
    7dd4:	80 e0       	ldi	r24, 0x00	; 0
#endif

	if(tick > TIMEOUT) return(1);
	else return(0);
}
    7dd6:	08 95       	ret

00007dd8 <appStart>:
void appStart(void) {
	__asm__ __volatile__ (
    7dd8:	ee 27       	eor	r30, r30
    7dda:	ff 27       	eor	r31, r31
    7ddc:	09 94       	ijmp
		"clr	r30		\n\t"
		"clr	r31		\n\t"
		"ijmp	\n\t"
	);
}
    7dde:	08 95       	ret

00007de0 <verifySpace>:
static uint16_t address = 0;
static uint8_t  length;

static void verifySpace(void)
{
	if(getch() != CRC_EOP) {
    7de0:	a5 df       	rcall	.-182    	; 0x7d2c <getch>
    7de2:	80 32       	cpi	r24, 0x20	; 32
    7de4:	39 f0       	breq	.+14     	; 0x7df4 <verifySpace+0x14>
    7de6:	88 e1       	ldi	r24, 0x18	; 24
		WDTCSR = _BV(WDCE) | _BV(WDE);
    7de8:	80 93 60 00 	sts	0x0060, r24
    7dec:	88 e0       	ldi	r24, 0x08	; 8
		WDTCSR = WATCHDOG_16MS;	// shorten WD timeout
    7dee:	80 93 60 00 	sts	0x0060, r24
    7df2:	ff cf       	rjmp	.-2      	; 0x7df2 <verifySpace+0x12>
    7df4:	84 e1       	ldi	r24, 0x14	; 20
		while(1)				// and busy-loop so that WD causes
			;					// a reset and app start.
	}
	putch(STK_INSYNC);
    7df6:	8d cf       	rjmp	.-230    	; 0x7d12 <putch>

00007df8 <getNch>:
    7df8:	cf 93       	push	r28
    7dfa:	c8 2f       	mov	r28, r24
}
    7dfc:	97 df       	rcall	.-210    	; 0x7d2c <getch>


static void getNch(uint8_t count)
{
    7dfe:	c1 50       	subi	r28, 0x01	; 1
    7e00:	e9 f7       	brne	.-6      	; 0x7dfc <getNch+0x4>
	do getch();
    7e02:	ee df       	rcall	.-36     	; 0x7de0 <verifySpace>
    7e04:	cf 91       	pop	r28
	while(--count);
    7e06:	08 95       	ret

00007e08 <processOptiboot>:
    7e08:	0f 93       	push	r16
	verifySpace();
    7e0a:	1f 93       	push	r17
    7e0c:	cf 93       	push	r28
}
    7e0e:	df 93       	push	r29
    7e10:	cd b7       	in	r28, 0x3d	; 61


uint8_t processOptiboot(void)
{
    7e12:	de b7       	in	r29, 0x3e	; 62
    7e14:	c1 50       	subi	r28, 0x01	; 1
    7e16:	d1 40       	sbci	r29, 0x01	; 1
    7e18:	de bf       	out	0x3e, r29	; 62
    7e1a:	cd bf       	out	0x3d, r28	; 61
    7e1c:	87 df       	rcall	.-242    	; 0x7d2c <getch>
    7e1e:	81 34       	cpi	r24, 0x41	; 65
    7e20:	a9 f4       	brne	.+42     	; 0x7e4c <processOptiboot+0x44>
    7e22:	84 df       	rcall	.-248    	; 0x7d2c <getch>
    7e24:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t ch;

	ch = getch();
    7e26:	de 4f       	sbci	r29, 0xFE	; 254
    7e28:	88 83       	st	Y, r24

	if(ch == STK_GET_PARAMETER) {
    7e2a:	c1 50       	subi	r28, 0x01	; 1
    7e2c:	d1 40       	sbci	r29, 0x01	; 1
		unsigned char which = getch();
    7e2e:	d8 df       	rcall	.-80     	; 0x7de0 <verifySpace>
    7e30:	cf 5f       	subi	r28, 0xFF	; 255
		verifySpace();
    7e32:	de 4f       	sbci	r29, 0xFE	; 254
    7e34:	88 81       	ld	r24, Y
    7e36:	c1 50       	subi	r28, 0x01	; 1
    7e38:	d1 40       	sbci	r29, 0x01	; 1
    7e3a:	82 38       	cpi	r24, 0x82	; 130
    7e3c:	11 f4       	brne	.+4      	; 0x7e42 <processOptiboot+0x3a>
    7e3e:	84 e0       	ldi	r24, 0x04	; 4
		if(which == 0x82) {
    7e40:	03 c0       	rjmp	.+6      	; 0x7e48 <processOptiboot+0x40>
    7e42:	81 38       	cpi	r24, 0x81	; 129
    7e44:	11 f1       	breq	.+68     	; 0x7e8a <processOptiboot+0x82>
    7e46:	83 e0       	ldi	r24, 0x03	; 3
    7e48:	64 df       	rcall	.-312    	; 0x7d12 <putch>
    7e4a:	b6 c0       	rjmp	.+364    	; 0x7fb8 <processOptiboot+0x1b0>
    7e4c:	82 34       	cpi	r24, 0x42	; 66
			/*
			 * Send tftpboot version as "minor SW version"
			 */
			putch(ARIADNE_MINVER);
    7e4e:	11 f4       	brne	.+4      	; 0x7e54 <processOptiboot+0x4c>
    7e50:	84 e1       	ldi	r24, 0x14	; 20
		} else if(which == 0x81) {
    7e52:	03 c0       	rjmp	.+6      	; 0x7e5a <processOptiboot+0x52>
    7e54:	85 34       	cpi	r24, 0x45	; 69
		} else {
			/*
			 * GET PARAMETER returns a generic 0x03 reply for
			 * other parameters - enough to keep Avrdude happy
			 */
			putch(0x03);
    7e56:	19 f4       	brne	.+6      	; 0x7e5e <processOptiboot+0x56>
    7e58:	84 e0       	ldi	r24, 0x04	; 4
    7e5a:	ce df       	rcall	.-100    	; 0x7df8 <getNch>
    7e5c:	ad c0       	rjmp	.+346    	; 0x7fb8 <processOptiboot+0x1b0>
		}
	} else if(ch == STK_SET_DEVICE) {
    7e5e:	85 35       	cpi	r24, 0x55	; 85
    7e60:	81 f4       	brne	.+32     	; 0x7e82 <processOptiboot+0x7a>
		// SET DEVICE is ignored
		getNch(20);
    7e62:	64 df       	rcall	.-312    	; 0x7d2c <getch>
    7e64:	08 2f       	mov	r16, r24
	} else if(ch == STK_SET_DEVICE_EXT) {
    7e66:	10 e0       	ldi	r17, 0x00	; 0
    7e68:	61 df       	rcall	.-318    	; 0x7d2c <getch>
		// SET DEVICE EXT is ignored
		getNch(4);
    7e6a:	90 e0       	ldi	r25, 0x00	; 0
    7e6c:	98 2f       	mov	r25, r24
    7e6e:	88 27       	eor	r24, r24
    7e70:	80 2b       	or	r24, r16
	} else if(ch == STK_LOAD_ADDRESS) {
    7e72:	91 2b       	or	r25, r17
    7e74:	88 0f       	add	r24, r24
		// LOAD ADDRESS
		uint16_t newAddress;
		newAddress = getch();
    7e76:	99 1f       	adc	r25, r25
    7e78:	90 93 29 01 	sts	0x0129, r25
    7e7c:	80 93 28 01 	sts	0x0128, r24
		newAddress = (newAddress & 0xff) | (getch() << 8);
    7e80:	9a c0       	rjmp	.+308    	; 0x7fb6 <processOptiboot+0x1ae>
    7e82:	86 35       	cpi	r24, 0x56	; 86
    7e84:	21 f4       	brne	.+8      	; 0x7e8e <processOptiboot+0x86>
    7e86:	84 e0       	ldi	r24, 0x04	; 4
    7e88:	b7 df       	rcall	.-146    	; 0x7df8 <getNch>
    7e8a:	80 e0       	ldi	r24, 0x00	; 0
#ifdef RAMPZ
		// Transfer top bit to RAMPZ
		RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif

		newAddress += newAddress; // Convert from word address to byte address
    7e8c:	dd cf       	rjmp	.-70     	; 0x7e48 <processOptiboot+0x40>
    7e8e:	84 36       	cpi	r24, 0x64	; 100
		address = newAddress;
    7e90:	09 f0       	breq	.+2      	; 0x7e94 <processOptiboot+0x8c>
    7e92:	61 c0       	rjmp	.+194    	; 0x7f56 <processOptiboot+0x14e>
    7e94:	4b df       	rcall	.-362    	; 0x7d2c <getch>
    7e96:	4a df       	rcall	.-364    	; 0x7d2c <getch>
    7e98:	80 93 2a 01 	sts	0x012A, r24
		verifySpace();
	} else if(ch == STK_UNIVERSAL) {
    7e9c:	47 df       	rcall	.-370    	; 0x7d2c <getch>
		// UNIVERSAL command is ignored
		getNch(4);
    7e9e:	e0 91 28 01 	lds	r30, 0x0128
    7ea2:	f0 91 29 01 	lds	r31, 0x0129
		putch(0x00);
    7ea6:	80 e7       	ldi	r24, 0x70	; 112
	}
	/* Write memory, length is big endian and is in bytes */
	else if(ch == STK_PROG_PAGE) {
    7ea8:	e0 30       	cpi	r30, 0x00	; 0
    7eaa:	f8 07       	cpc	r31, r24
    7eac:	20 f4       	brcc	.+8      	; 0x7eb6 <processOptiboot+0xae>
		// PROGRAM PAGE - we support flash programming only, not EEPROM
		uint8_t  buff[256];
		uint8_t* bufPtr;
		uint16_t addrPtr;

		getch();			/* getlen() */
    7eae:	83 e0       	ldi	r24, 0x03	; 3
    7eb0:	80 93 57 00 	sts	0x0057, r24
		length = getch();
    7eb4:	e8 95       	spm
    7eb6:	8e 01       	movw	r16, r28
    7eb8:	0f 5f       	subi	r16, 0xFF	; 255
		getch();
    7eba:	1f 4f       	sbci	r17, 0xFF	; 255
    7ebc:	37 df       	rcall	.-402    	; 0x7d2c <getch>

		// If we are in RWW section, immediately start page erase
		if(address < NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    7ebe:	f8 01       	movw	r30, r16
    7ec0:	81 93       	st	Z+, r24
    7ec2:	8f 01       	movw	r16, r30
    7ec4:	80 91 2a 01 	lds	r24, 0x012A
    7ec8:	81 50       	subi	r24, 0x01	; 1
    7eca:	80 93 2a 01 	sts	0x012A, r24
    7ece:	88 23       	and	r24, r24
    7ed0:	a9 f7       	brne	.-22     	; 0x7ebc <processOptiboot+0xb4>
    7ed2:	e0 91 28 01 	lds	r30, 0x0128
    7ed6:	f0 91 29 01 	lds	r31, 0x0129
    7eda:	80 e7       	ldi	r24, 0x70	; 112

		// While that is going on, read in page contents
		bufPtr = buff;
		do* bufPtr++ = getch();
    7edc:	e0 30       	cpi	r30, 0x00	; 0
    7ede:	f8 07       	cpc	r31, r24
    7ee0:	20 f0       	brcs	.+8      	; 0x7eea <processOptiboot+0xe2>
    7ee2:	83 e0       	ldi	r24, 0x03	; 3
    7ee4:	80 93 57 00 	sts	0x0057, r24
		while(--length);
    7ee8:	e8 95       	spm
    7eea:	7a df       	rcall	.-268    	; 0x7de0 <verifySpace>
    7eec:	07 b6       	in	r0, 0x37	; 55
    7eee:	00 fc       	sbrc	r0, 0
    7ef0:	fd cf       	rjmp	.-6      	; 0x7eec <processOptiboot+0xe4>
    7ef2:	60 91 28 01 	lds	r22, 0x0128

		// If we are in NRWW section, page erase has to be delayed until now.
		// Todo: Take RAMPZ into account
		if(address >= NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    7ef6:	70 91 29 01 	lds	r23, 0x0129
    7efa:	09 81       	ldd	r16, Y+1	; 0x01
    7efc:	fb 01       	movw	r30, r22
    7efe:	40 e4       	ldi	r20, 0x40	; 64
    7f00:	51 e0       	ldi	r21, 0x01	; 1
    7f02:	9e 01       	movw	r18, r28
    7f04:	2f 5f       	subi	r18, 0xFF	; 255
    7f06:	3f 4f       	sbci	r19, 0xFF	; 255
    7f08:	26 1b       	sub	r18, r22
    7f0a:	37 0b       	sbc	r19, r23

		// Read command terminator, start reply
		verifySpace();
    7f0c:	10 e0       	ldi	r17, 0x00	; 0
    7f0e:	d9 01       	movw	r26, r18

		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();
    7f10:	ae 0f       	add	r26, r30
    7f12:	bf 1f       	adc	r27, r31
    7f14:	11 96       	adiw	r26, 0x01	; 1

		// Copy buffer into programming buffer
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
    7f16:	8c 91       	ld	r24, X
    7f18:	11 97       	sbiw	r26, 0x01	; 1
    7f1a:	90 e0       	ldi	r25, 0x00	; 0
    7f1c:	98 2f       	mov	r25, r24
		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();

		// Copy buffer into programming buffer
		bufPtr = buff;
    7f1e:	88 27       	eor	r24, r24
    7f20:	80 2b       	or	r24, r16
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
    7f22:	91 2b       	or	r25, r17
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    7f24:	0c 01       	movw	r0, r24
	while(--count);
	verifySpace();
}


uint8_t processOptiboot(void)
    7f26:	50 93 57 00 	sts	0x0057, r21
    7f2a:	e8 95       	spm
    7f2c:	11 24       	eor	r1, r1
    7f2e:	41 50       	subi	r20, 0x01	; 1
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
    7f30:	29 f0       	breq	.+10     	; 0x7f3c <processOptiboot+0x134>
	while(--count);
	verifySpace();
}


uint8_t processOptiboot(void)
    7f32:	12 96       	adiw	r26, 0x02	; 2
    7f34:	0c 91       	ld	r16, X
    7f36:	12 97       	sbiw	r26, 0x02	; 2
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    7f38:	32 96       	adiw	r30, 0x02	; 2
    7f3a:	e8 cf       	rjmp	.-48     	; 0x7f0c <processOptiboot+0x104>
    7f3c:	85 e0       	ldi	r24, 0x05	; 5
    7f3e:	fb 01       	movw	r30, r22
    7f40:	80 93 57 00 	sts	0x0057, r24
    7f44:	e8 95       	spm
    7f46:	07 b6       	in	r0, 0x37	; 55
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    7f48:	00 fc       	sbrc	r0, 0
    7f4a:	fd cf       	rjmp	.-6      	; 0x7f46 <processOptiboot+0x13e>
    7f4c:	81 e1       	ldi	r24, 0x11	; 17
    7f4e:	80 93 57 00 	sts	0x0057, r24
			addrPtr += 2;
		} while(--ch);
    7f52:	e8 95       	spm
    7f54:	31 c0       	rjmp	.+98     	; 0x7fb8 <processOptiboot+0x1b0>
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    7f56:	84 37       	cpi	r24, 0x74	; 116
    7f58:	d1 f4       	brne	.+52     	; 0x7f8e <processOptiboot+0x186>
    7f5a:	e8 de       	rcall	.-560    	; 0x7d2c <getch>
    7f5c:	e7 de       	rcall	.-562    	; 0x7d2c <getch>
    7f5e:	80 93 2a 01 	sts	0x012A, r24
			boot_page_fill((uint16_t)(void*)addrPtr, a);
			addrPtr += 2;
		} while(--ch);

		// Write from programming buffer
		boot_page_write((uint16_t)(void*)address);
    7f62:	e4 de       	rcall	.-568    	; 0x7d2c <getch>
    7f64:	3d df       	rcall	.-390    	; 0x7de0 <verifySpace>
    7f66:	e0 91 28 01 	lds	r30, 0x0128
		boot_spm_busy_wait();
    7f6a:	f0 91 29 01 	lds	r31, 0x0129
    7f6e:	cf 01       	movw	r24, r30

#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
    7f70:	01 96       	adiw	r24, 0x01	; 1
    7f72:	90 93 29 01 	sts	0x0129, r25
    7f76:	80 93 28 01 	sts	0x0128, r24
#endif
	}
	/* Read memory block mode, length is big endian.  */
	else if(ch == STK_READ_PAGE) {
    7f7a:	84 91       	lpm	r24, Z
    7f7c:	ca de       	rcall	.-620    	; 0x7d12 <putch>
		// READ PAGE - we only read flash
		getch();			/* getlen() */
    7f7e:	80 91 2a 01 	lds	r24, 0x012A
		length = getch();
    7f82:	81 50       	subi	r24, 0x01	; 1
    7f84:	80 93 2a 01 	sts	0x012A, r24
    7f88:	88 23       	and	r24, r24
		getch();
    7f8a:	69 f7       	brne	.-38     	; 0x7f66 <processOptiboot+0x15e>
    7f8c:	15 c0       	rjmp	.+42     	; 0x7fb8 <processOptiboot+0x1b0>

		verifySpace();
    7f8e:	85 37       	cpi	r24, 0x75	; 117
    7f90:	39 f4       	brne	.+14     	; 0x7fa0 <processOptiboot+0x198>
			__asm__("elpm %0,Z\n":"=r"(result):"z"(address));
			putch(result);
			address++;
		} while(--length);
#else
		do putch(pgm_read_byte_near(address++));
    7f92:	26 df       	rcall	.-436    	; 0x7de0 <verifySpace>
    7f94:	8e e1       	ldi	r24, 0x1E	; 30
    7f96:	bd de       	rcall	.-646    	; 0x7d12 <putch>
    7f98:	85 e9       	ldi	r24, 0x95	; 149
    7f9a:	bb de       	rcall	.-650    	; 0x7d12 <putch>
    7f9c:	8f e0       	ldi	r24, 0x0F	; 15
    7f9e:	54 cf       	rjmp	.-344    	; 0x7e48 <processOptiboot+0x40>
    7fa0:	81 35       	cpi	r24, 0x51	; 81
    7fa2:	49 f4       	brne	.+18     	; 0x7fb6 <processOptiboot+0x1ae>
    7fa4:	1d df       	rcall	.-454    	; 0x7de0 <verifySpace>
    7fa6:	82 e0       	ldi	r24, 0x02	; 2
    7fa8:	90 e0       	ldi	r25, 0x00	; 0
    7faa:	6e ee       	ldi	r22, 0xEE	; 238
		while(--length);
    7fac:	22 d0       	rcall	.+68     	; 0x7ff2 <__eewr_byte_m328p>
    7fae:	80 e1       	ldi	r24, 0x10	; 16
    7fb0:	b0 de       	rcall	.-672    	; 0x7d12 <putch>
    7fb2:	80 e0       	ldi	r24, 0x00	; 0
    7fb4:	04 c0       	rjmp	.+8      	; 0x7fbe <processOptiboot+0x1b6>
    7fb6:	14 df       	rcall	.-472    	; 0x7de0 <verifySpace>
    7fb8:	80 e1       	ldi	r24, 0x10	; 16
    7fba:	ab de       	rcall	.-682    	; 0x7d12 <putch>
#endif
	}
	/* Get device signature bytes  */
	else if(ch == STK_READ_SIGN) {
    7fbc:	81 e0       	ldi	r24, 0x01	; 1
    7fbe:	cf 5f       	subi	r28, 0xFF	; 255
		// READ SIGN - return what Avrdude wants to hear
		verifySpace();
    7fc0:	de 4f       	sbci	r29, 0xFE	; 254
    7fc2:	de bf       	out	0x3e, r29	; 62
		putch(SIGNATURE_0);
    7fc4:	cd bf       	out	0x3d, r28	; 61
    7fc6:	df 91       	pop	r29
    7fc8:	cf 91       	pop	r28
		putch(SIGNATURE_1);
    7fca:	1f 91       	pop	r17
    7fcc:	0f 91       	pop	r16
    7fce:	08 95       	ret

00007fd0 <memcpy_P>:
		putch(SIGNATURE_2);
    7fd0:	fb 01       	movw	r30, r22
    7fd2:	dc 01       	movw	r26, r24
	} else if(ch == STK_LEAVE_PROGMODE) {
    7fd4:	02 c0       	rjmp	.+4      	; 0x7fda <memcpy_P+0xa>
    7fd6:	05 90       	lpm	r0, Z+
		// Adaboot no-wait mod
		//watchdogConfig(WATCHDOG_16MS);
		verifySpace();
    7fd8:	0d 92       	st	X+, r0
    7fda:	41 50       	subi	r20, 0x01	; 1
		eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7fdc:	50 40       	sbci	r21, 0x00	; 0
    7fde:	d8 f7       	brcc	.-10     	; 0x7fd6 <memcpy_P+0x6>
    7fe0:	08 95       	ret

00007fe2 <__eerd_byte_m328p>:
    7fe2:	f9 99       	sbic	0x1f, 1	; 31
    7fe4:	fe cf       	rjmp	.-4      	; 0x7fe2 <__eerd_byte_m328p>
		putch(STK_OK);
    7fe6:	92 bd       	out	0x22, r25	; 34
    7fe8:	81 bd       	out	0x21, r24	; 33
    7fea:	f8 9a       	sbi	0x1f, 0	; 31
		return(0);
    7fec:	99 27       	eor	r25, r25
    7fee:	80 b5       	in	r24, 0x20	; 32
	} else {
		// This covers the response to commands like STK_ENTER_PROGMODE
		verifySpace();
    7ff0:	08 95       	ret

00007ff2 <__eewr_byte_m328p>:
    7ff2:	26 2f       	mov	r18, r22

00007ff4 <__eewr_r18_m328p>:
	}
	putch(STK_OK);
    7ff4:	f9 99       	sbic	0x1f, 1	; 31
    7ff6:	fe cf       	rjmp	.-4      	; 0x7ff4 <__eewr_r18_m328p>
    7ff8:	1f ba       	out	0x1f, r1	; 31
	return(1);
    7ffa:	92 bd       	out	0x22, r25	; 34
}
    7ffc:	81 bd       	out	0x21, r24	; 33
    7ffe:	20 bd       	out	0x20, r18	; 32
    8000:	0f b6       	in	r0, 0x3f	; 63
    8002:	f8 94       	cli
    8004:	fa 9a       	sbi	0x1f, 2	; 31
    8006:	f9 9a       	sbi	0x1f, 1	; 31
    8008:	0f be       	out	0x3f, r0	; 63
    800a:	01 96       	adiw	r24, 0x01	; 1
    800c:	08 95       	ret

0000800e <_exit>:
    800e:	f8 94       	cli

00008010 <__stop_program>:
    8010:	ff cf       	rjmp	.-2      	; 0x8010 <__stop_program>
